/**
 *
 * carbon-angular v0.0.0 | overflow-menu-custom-pane.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ElementRef, Optional } from "@angular/core";
import { position } from "@carbon/utils-position";
import { I18n } from "carbon-components-angular/i18n";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { closestAttr } from "carbon-components-angular/utils";
import { CloseReasons } from "../dialog-config.interface";
import { Dialog } from "../dialog.component";
export class OverflowMenuCustomPane extends Dialog {
    constructor(elementRef, i18n, animationFrameService = null, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService = null) {
        super(elementRef, elementService, animationFrameService);
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.animationFrameService = animationFrameService;
        this.elementService = elementService;
    }
    onClick(event) {
        this.doClose({
            reason: CloseReasons.interaction,
            target: event.target
        });
    }
    onDialogInit() {
        const positionOverflowMenu = pos => {
            let offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            const closestRel = closestAttr("position", ["relative", "fixed", "absolute"], this.elementRef.nativeElement);
            const topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            const leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    }
}
OverflowMenuCustomPane.decorators = [
    { type: Component, args: [{
                selector: "ibm-overflow-custom-menu-pane",
                template: `
		<div
			[attr.aria-label]="dialogConfig.menuLabel"
			[ngClass]="{'bx--overflow-menu--flip': dialogConfig.flip}"
			class="bx--overflow-menu-options bx--overflow-menu-options--open"
			role="menu"
			(click)="onClick($event)"
			#dialog
			[attr.aria-label]="dialogConfig.menuLabel">
			<ng-template
				[ngTemplateOutlet]="dialogConfig.content"
				[ngTemplateOutletContext]="{overflowMenu: this}">
			</ng-template>
		</div>
	`
            }] }
];
/** @nocollapse */
OverflowMenuCustomPane.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n },
    { type: AnimationFrameService, decorators: [{ type: Optional }] },
    { type: ElementService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQW9CN0MsTUFBTSxPQUFPLHNCQUF1QixTQUFRLE1BQU07SUFDakQsWUFDVyxVQUFzQixFQUN0QixJQUFVLEVBQ0Usd0JBQStDLElBQUk7SUFDekUseUZBQXlGO0lBQ25FLGlCQUFpQyxJQUFJO1FBRTNELEtBQUssQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFOL0MsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ0UsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QjtRQUVuRCxtQkFBYyxHQUFkLGNBQWMsQ0FBdUI7SUFHNUQsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNaLE1BQU0sRUFBRSxZQUFZLENBQUMsV0FBVztZQUNoQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVk7UUFDWCxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ2xDLElBQUksTUFBTSxDQUFDO1lBQ1g7Ozs7Y0FJRTtZQUNGLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDN0csTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlFLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDcEUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtnQkFDM0IsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLG9CQUFvQixDQUFDO1FBRTdDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsb0JBQW9CLENBQUM7UUFFMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztTQUNyRTtJQUNGLENBQUM7OztZQTlERCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLCtCQUErQjtnQkFDekMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7OztFQWNUO2FBQ0Q7Ozs7WUF6QmtDLFVBQVU7WUFFcEMsSUFBSTtZQUNKLHFCQUFxQix1QkEyQjNCLFFBQVE7WUEzQnFCLGNBQWMsdUJBNkIzQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPcHRpb25hbCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBwb3NpdGlvbiB9IGZyb20gXCJAY2FyYm9uL3V0aWxzLXBvc2l0aW9uXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlLCBFbGVtZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5pbXBvcnQgeyBjbG9zZXN0QXR0ciB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5pbXBvcnQgeyBDbG9zZVJlYXNvbnMgfSBmcm9tIFwiLi4vZGlhbG9nLWNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gXCIuLi9kaWFsb2cuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmZsb3ctY3VzdG9tLW1lbnUtcGFuZVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXZcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiZGlhbG9nQ29uZmlnLm1lbnVMYWJlbFwiXG5cdFx0XHRbbmdDbGFzc109XCJ7J2J4LS1vdmVyZmxvdy1tZW51LS1mbGlwJzogZGlhbG9nQ29uZmlnLmZsaXB9XCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnUtb3B0aW9ucyBieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zLS1vcGVuXCJcblx0XHRcdHJvbGU9XCJtZW51XCJcblx0XHRcdChjbGljayk9XCJvbkNsaWNrKCRldmVudClcIlxuXHRcdFx0I2RpYWxvZ1xuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJkaWFsb2dDb25maWcubWVudUxhYmVsXCI+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiZGlhbG9nQ29uZmlnLmNvbnRlbnRcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie292ZXJmbG93TWVudTogdGhpc31cIj5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51Q3VzdG9tUGFuZSBleHRlbmRzIERpYWxvZyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4bixcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgYW5pbWF0aW9uRnJhbWVTZXJ2aWNlOiBBbmltYXRpb25GcmFtZVNlcnZpY2UgPSBudWxsLFxuXHRcdC8vIG1hcmsgYGVsZW1lbnRTZXJ2aWNlYCBhcyBvcHRpb25hbCBzaW5jZSBtYWtpbmcgaXQgbWFuZGF0b3J5IHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlXG5cdFx0QE9wdGlvbmFsKCkgcHJvdGVjdGVkIGVsZW1lbnRTZXJ2aWNlOiBFbGVtZW50U2VydmljZSA9IG51bGxcblx0KSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZiwgZWxlbWVudFNlcnZpY2UsIGFuaW1hdGlvbkZyYW1lU2VydmljZSk7XG5cdH1cblxuXHRvbkNsaWNrKGV2ZW50KSB7XG5cdFx0dGhpcy5kb0Nsb3NlKHtcblx0XHRcdHJlYXNvbjogQ2xvc2VSZWFzb25zLmludGVyYWN0aW9uLFxuXHRcdFx0dGFyZ2V0OiBldmVudC50YXJnZXRcblx0XHR9KTtcblx0fVxuXG5cdG9uRGlhbG9nSW5pdCgpIHtcblx0XHRjb25zdCBwb3NpdGlvbk92ZXJmbG93TWVudSA9IHBvcyA9PiB7XG5cdFx0XHRsZXQgb2Zmc2V0O1xuXHRcdFx0Lypcblx0XHRcdCogMjAgaXMgaGFsZiB0aGUgd2lkdGggb2YgdGhlIG92ZXJmbG93IG1lbnUgdHJpZ2dlciBlbGVtZW50LlxuXHRcdFx0KiB3ZSBhbHNvIG1vdmUgdGhlIGVsZW1lbnQgYnkgaGFsZiBvZiBpdCdzIG93biB3aWR0aCwgc2luY2Vcblx0XHRcdCogcG9zaXRpb24gc2VydmljZSB3aWxsIHRyeSBhbmQgY2VudGVyIGV2ZXJ5dGhpbmdcblx0XHRcdCovXG5cdFx0XHRjb25zdCBjbG9zZXN0UmVsID0gY2xvc2VzdEF0dHIoXCJwb3NpdGlvblwiLCBbXCJyZWxhdGl2ZVwiLCBcImZpeGVkXCIsIFwiYWJzb2x1dGVcIl0sIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblx0XHRcdGNvbnN0IHRvcEZpeCA9IGNsb3Nlc3RSZWwgPyBjbG9zZXN0UmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAqIC0xIDogMDtcblx0XHRcdGNvbnN0IGxlZnRGaXggPSBjbG9zZXN0UmVsID8gY2xvc2VzdFJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICogLTEgOiAwO1xuXG5cdFx0XHRvZmZzZXQgPSBNYXRoLnJvdW5kKHRoaXMuZGlhbG9nLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLyAyKSAtIDIwO1xuXHRcdFx0aWYgKHRoaXMuZGlhbG9nQ29uZmlnLmZsaXApIHtcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uLmFkZE9mZnNldChwb3MsIHRvcEZpeCwgKC1vZmZzZXQgKyBsZWZ0Rml4KSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcG9zaXRpb24uYWRkT2Zmc2V0KHBvcywgdG9wRml4LCAob2Zmc2V0ICsgbGVmdEZpeCkpO1xuXHRcdH07XG5cblx0XHR0aGlzLmFkZEdhcFtcImJvdHRvbVwiXSA9IHBvc2l0aW9uT3ZlcmZsb3dNZW51O1xuXG5cdFx0dGhpcy5hZGRHYXBbXCJ0b3BcIl0gPSBwb3NpdGlvbk92ZXJmbG93TWVudTtcblxuXHRcdGlmICghdGhpcy5kaWFsb2dDb25maWcubWVudUxhYmVsKSB7XG5cdFx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5tZW51TGFiZWwgPSB0aGlzLmkxOG4uZ2V0KCkuT1ZFUkZMT1dfTUVOVS5PVkVSRkxPVztcblx0XHR9XG5cdH1cbn1cbiJdfQ==