/**
 *
 * carbon-angular v0.0.0 | overflow-menu-custom-pane.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, ElementRef, Optional } from "@angular/core";
import { position } from "@carbon/utils-position";
import { I18n } from "carbon-components-angular/i18n";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { closestAttr } from "carbon-components-angular/utils";
import { CloseReasons } from "../dialog-config.interface";
import { Dialog } from "../dialog.component";
var OverflowMenuCustomPane = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowMenuCustomPane, _super);
    function OverflowMenuCustomPane(elementRef, i18n, animationFrameService, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService) {
        if (animationFrameService === void 0) { animationFrameService = null; }
        if (elementService === void 0) { elementService = null; }
        var _this = _super.call(this, elementRef, elementService, animationFrameService) || this;
        _this.elementRef = elementRef;
        _this.i18n = i18n;
        _this.animationFrameService = animationFrameService;
        _this.elementService = elementService;
        return _this;
    }
    OverflowMenuCustomPane.prototype.onClick = function (event) {
        this.doClose({
            reason: CloseReasons.interaction,
            target: event.target
        });
    };
    OverflowMenuCustomPane.prototype.onDialogInit = function () {
        var _this = this;
        var positionOverflowMenu = function (pos) {
            var offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            var closestRel = closestAttr("position", ["relative", "fixed", "absolute"], _this.elementRef.nativeElement);
            var topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            var leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(_this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (_this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    };
    OverflowMenuCustomPane.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-custom-menu-pane",
                    template: "\n\t\t<div\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--flip': dialogConfig.flip}\"\n\t\t\tclass=\"bx--overflow-menu-options bx--overflow-menu-options--open\"\n\t\t\trole=\"menu\"\n\t\t\t(click)=\"onClick($event)\"\n\t\t\t#dialog\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\">\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t[ngTemplateOutletContext]=\"{overflowMenu: this}\">\n\t\t\t</ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    OverflowMenuCustomPane.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n },
        { type: AnimationFrameService, decorators: [{ type: Optional }] },
        { type: ElementService, decorators: [{ type: Optional }] }
    ]; };
    return OverflowMenuCustomPane;
}(Dialog));
export { OverflowMenuCustomPane };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFN0M7SUFrQjRDLGtEQUFNO0lBQ2pELGdDQUNXLFVBQXNCLEVBQ3RCLElBQVUsRUFDRSxxQkFBbUQ7SUFDekUseUZBQXlGO0lBQ25FLGNBQXFDO1FBRnJDLHNDQUFBLEVBQUEsNEJBQW1EO1FBRW5ELCtCQUFBLEVBQUEscUJBQXFDO1FBTDVELFlBT0Msa0JBQU0sVUFBVSxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsQ0FBQyxTQUN4RDtRQVBVLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFVBQUksR0FBSixJQUFJLENBQU07UUFDRSwyQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBRW5ELG9CQUFjLEdBQWQsY0FBYyxDQUF1Qjs7SUFHNUQsQ0FBQztJQUVELHdDQUFPLEdBQVAsVUFBUSxLQUFLO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNaLE1BQU0sRUFBRSxZQUFZLENBQUMsV0FBVztZQUNoQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELDZDQUFZLEdBQVo7UUFBQSxpQkEwQkM7UUF6QkEsSUFBTSxvQkFBb0IsR0FBRyxVQUFBLEdBQUc7WUFDL0IsSUFBSSxNQUFNLENBQUM7WUFDWDs7OztjQUlFO1lBQ0YsSUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3RyxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFOUUsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRSxJQUFJLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFO2dCQUMzQixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDNUQ7WUFDRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsb0JBQW9CLENBQUM7UUFFN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztRQUUxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1NBQ3JFO0lBQ0YsQ0FBQzs7Z0JBOURELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxRQUFRLEVBQUUsdWZBY1Q7aUJBQ0Q7Ozs7Z0JBekJrQyxVQUFVO2dCQUVwQyxJQUFJO2dCQUNKLHFCQUFxQix1QkEyQjNCLFFBQVE7Z0JBM0JxQixjQUFjLHVCQTZCM0MsUUFBUTs7SUF1Q1gsNkJBQUM7Q0FBQSxBQS9ERCxDQWtCNEMsTUFBTSxHQTZDakQ7U0E3Q1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPcHRpb25hbCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBwb3NpdGlvbiB9IGZyb20gXCJAY2FyYm9uL3V0aWxzLXBvc2l0aW9uXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlLCBFbGVtZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5pbXBvcnQgeyBjbG9zZXN0QXR0ciB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG5pbXBvcnQgeyBDbG9zZVJlYXNvbnMgfSBmcm9tIFwiLi4vZGlhbG9nLWNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gXCIuLi9kaWFsb2cuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tb3ZlcmZsb3ctY3VzdG9tLW1lbnUtcGFuZVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXZcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiZGlhbG9nQ29uZmlnLm1lbnVMYWJlbFwiXG5cdFx0XHRbbmdDbGFzc109XCJ7J2J4LS1vdmVyZmxvdy1tZW51LS1mbGlwJzogZGlhbG9nQ29uZmlnLmZsaXB9XCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnUtb3B0aW9ucyBieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zLS1vcGVuXCJcblx0XHRcdHJvbGU9XCJtZW51XCJcblx0XHRcdChjbGljayk9XCJvbkNsaWNrKCRldmVudClcIlxuXHRcdFx0I2RpYWxvZ1xuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJkaWFsb2dDb25maWcubWVudUxhYmVsXCI+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiZGlhbG9nQ29uZmlnLmNvbnRlbnRcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie292ZXJmbG93TWVudTogdGhpc31cIj5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmZsb3dNZW51Q3VzdG9tUGFuZSBleHRlbmRzIERpYWxvZyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRwcm90ZWN0ZWQgaTE4bjogSTE4bixcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgYW5pbWF0aW9uRnJhbWVTZXJ2aWNlOiBBbmltYXRpb25GcmFtZVNlcnZpY2UgPSBudWxsLFxuXHRcdC8vIG1hcmsgYGVsZW1lbnRTZXJ2aWNlYCBhcyBvcHRpb25hbCBzaW5jZSBtYWtpbmcgaXQgbWFuZGF0b3J5IHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlXG5cdFx0QE9wdGlvbmFsKCkgcHJvdGVjdGVkIGVsZW1lbnRTZXJ2aWNlOiBFbGVtZW50U2VydmljZSA9IG51bGxcblx0KSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZiwgZWxlbWVudFNlcnZpY2UsIGFuaW1hdGlvbkZyYW1lU2VydmljZSk7XG5cdH1cblxuXHRvbkNsaWNrKGV2ZW50KSB7XG5cdFx0dGhpcy5kb0Nsb3NlKHtcblx0XHRcdHJlYXNvbjogQ2xvc2VSZWFzb25zLmludGVyYWN0aW9uLFxuXHRcdFx0dGFyZ2V0OiBldmVudC50YXJnZXRcblx0XHR9KTtcblx0fVxuXG5cdG9uRGlhbG9nSW5pdCgpIHtcblx0XHRjb25zdCBwb3NpdGlvbk92ZXJmbG93TWVudSA9IHBvcyA9PiB7XG5cdFx0XHRsZXQgb2Zmc2V0O1xuXHRcdFx0Lypcblx0XHRcdCogMjAgaXMgaGFsZiB0aGUgd2lkdGggb2YgdGhlIG92ZXJmbG93IG1lbnUgdHJpZ2dlciBlbGVtZW50LlxuXHRcdFx0KiB3ZSBhbHNvIG1vdmUgdGhlIGVsZW1lbnQgYnkgaGFsZiBvZiBpdCdzIG93biB3aWR0aCwgc2luY2Vcblx0XHRcdCogcG9zaXRpb24gc2VydmljZSB3aWxsIHRyeSBhbmQgY2VudGVyIGV2ZXJ5dGhpbmdcblx0XHRcdCovXG5cdFx0XHRjb25zdCBjbG9zZXN0UmVsID0gY2xvc2VzdEF0dHIoXCJwb3NpdGlvblwiLCBbXCJyZWxhdGl2ZVwiLCBcImZpeGVkXCIsIFwiYWJzb2x1dGVcIl0sIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblx0XHRcdGNvbnN0IHRvcEZpeCA9IGNsb3Nlc3RSZWwgPyBjbG9zZXN0UmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAqIC0xIDogMDtcblx0XHRcdGNvbnN0IGxlZnRGaXggPSBjbG9zZXN0UmVsID8gY2xvc2VzdFJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICogLTEgOiAwO1xuXG5cdFx0XHRvZmZzZXQgPSBNYXRoLnJvdW5kKHRoaXMuZGlhbG9nLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLyAyKSAtIDIwO1xuXHRcdFx0aWYgKHRoaXMuZGlhbG9nQ29uZmlnLmZsaXApIHtcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uLmFkZE9mZnNldChwb3MsIHRvcEZpeCwgKC1vZmZzZXQgKyBsZWZ0Rml4KSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcG9zaXRpb24uYWRkT2Zmc2V0KHBvcywgdG9wRml4LCAob2Zmc2V0ICsgbGVmdEZpeCkpO1xuXHRcdH07XG5cblx0XHR0aGlzLmFkZEdhcFtcImJvdHRvbVwiXSA9IHBvc2l0aW9uT3ZlcmZsb3dNZW51O1xuXG5cdFx0dGhpcy5hZGRHYXBbXCJ0b3BcIl0gPSBwb3NpdGlvbk92ZXJmbG93TWVudTtcblxuXHRcdGlmICghdGhpcy5kaWFsb2dDb25maWcubWVudUxhYmVsKSB7XG5cdFx0XHR0aGlzLmRpYWxvZ0NvbmZpZy5tZW51TGFiZWwgPSB0aGlzLmkxOG4uZ2V0KCkuT1ZFUkZMT1dfTUVOVS5PVkVSRkxPVztcblx0XHR9XG5cdH1cbn1cbiJdfQ==