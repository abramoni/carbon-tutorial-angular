/**
 *
 * carbon-angular v0.0.0 | toggle.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Checkbox } from "carbon-components-angular/checkbox";
import { ChangeDetectorRef, EventEmitter, TemplateRef } from "@angular/core";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { Observable } from "rxjs";
/**
 * Defines the set of states for a toggle component.
 */
import * as ɵngcc0 from '@angular/core';
export declare enum ToggleState {
    Init = 0,
    Indeterminate = 1,
    Checked = 2,
    Unchecked = 3
}
/**
 * Used to emit changes performed on toggle components.
 *
 * @deprecated since v4
 */
export declare class ToggleChange {
    /**
     * Contains the `Toggle` that has been changed.
     */
    source: Toggle;
    /**
     * The state of the `Toggle` encompassed in the `ToggleChange` class.
     */
    checked: boolean;
}
/**
 * [See demo](../../?path=/story/components-toggle--basic)
 *
 * ```html
 * <ibm-toggle [(ngModel)]="toggleState">Toggle</ibm-toggle>
 * ```
 *
 * <example-url>../../iframe.html?id=components-toggle--basic</example-url>
 */
export declare class Toggle extends Checkbox {
    protected changeDetectorRef: ChangeDetectorRef;
    protected i18n: I18n;
    /**
     * Variable used for creating unique ids for toggle components.
     */
    static toggleCount: number;
    /**
     * Text that is set on the left side of the toggle.
     */
    offText: string | Observable<string>;
    /**
     * Text that is set on the right side of the toggle.
     */
    onText: string | Observable<string>;
    /**
     * Text that is set as the label of the toggle.
     */
    label: string | TemplateRef<any>;
    /**
     * Size of the toggle component.
     */
    size: "sm" | "md";
    /**
     * Set to `true` for a loading toggle.
     */
    skeleton: boolean;
    /**
     * The unique id allocated to the `Toggle`.
     */
    id: string;
    /**
     * Emits event notifying other classes when a change in state occurs on a toggle after a
     * click.
     *
     * @deprecated since v4
     */
    change: EventEmitter<ToggleChange>;
    protected _offValues: Overridable;
    protected _onValues: Overridable;
    /**
     * Creates an instance of Toggle.
     */
    constructor(changeDetectorRef: ChangeDetectorRef, i18n: I18n);
    /**
     * `ControlValueAccessor` method to programmatically disable the toggle input.
     *
     * ex: `this.formGroup.get("myToggle").disable();`
     *
     * @param isDisabled `true` to disable the input
     */
    setDisabledState(isDisabled: boolean): void;
    getOffText(): Observable<string>;
    getOnText(): Observable<string>;
    /**
     * Creates instance of `ToggleChange` used to propagate the change event.
     */
    emitChangeEvent(): void;
    isTemplate(value: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Toggle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Toggle, "ibm-toggle", never, {
    "size": "size";
    "skeleton": "skeleton";
    "offText": "offText";
    "onText": "onText";
    "label": "label";
}, {
    "change": "change";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0b2dnbGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlGQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHRvZ2dsZS5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jaGVja2JveFwiO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbi8qKlxuICogRGVmaW5lcyB0aGUgc2V0IG9mIHN0YXRlcyBmb3IgYSB0b2dnbGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVjbGFyZSBlbnVtIFRvZ2dsZVN0YXRlIHtcbiAgICBJbml0ID0gMCxcbiAgICBJbmRldGVybWluYXRlID0gMSxcbiAgICBDaGVja2VkID0gMixcbiAgICBVbmNoZWNrZWQgPSAzXG59XG4vKipcbiAqIFVzZWQgdG8gZW1pdCBjaGFuZ2VzIHBlcmZvcm1lZCBvbiB0b2dnbGUgY29tcG9uZW50cy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2NFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb2dnbGVDaGFuZ2Uge1xuICAgIC8qKlxuICAgICAqIENvbnRhaW5zIHRoZSBgVG9nZ2xlYCB0aGF0IGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgICovXG4gICAgc291cmNlOiBUb2dnbGU7XG4gICAgLyoqXG4gICAgICogVGhlIHN0YXRlIG9mIHRoZSBgVG9nZ2xlYCBlbmNvbXBhc3NlZCBpbiB0aGUgYFRvZ2dsZUNoYW5nZWAgY2xhc3MuXG4gICAgICovXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbn1cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy10b2dnbGUtLWJhc2ljKVxuICpcbiAqIGBgYGh0bWxcbiAqIDxpYm0tdG9nZ2xlIFsobmdNb2RlbCldPVwidG9nZ2xlU3RhdGVcIj5Ub2dnbGU8L2libS10b2dnbGU+XG4gKiBgYGBcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy10b2dnbGUtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9nZ2xlIGV4dGVuZHMgQ2hlY2tib3gge1xuICAgIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdXNlZCBmb3IgY3JlYXRpbmcgdW5pcXVlIGlkcyBmb3IgdG9nZ2xlIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgc3RhdGljIHRvZ2dsZUNvdW50OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGV4dCB0aGF0IGlzIHNldCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSB0b2dnbGUuXG4gICAgICovXG4gICAgb2ZmVGV4dDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFRleHQgdGhhdCBpcyBzZXQgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHRvZ2dsZS5cbiAgICAgKi9cbiAgICBvblRleHQ6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBUZXh0IHRoYXQgaXMgc2V0IGFzIHRoZSBsYWJlbCBvZiB0aGUgdG9nZ2xlLlxuICAgICAqL1xuICAgIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIHRvZ2dsZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgc2l6ZTogXCJzbVwiIHwgXCJtZFwiO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgZm9yIGEgbG9hZGluZyB0b2dnbGUuXG4gICAgICovXG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBpZCBhbGxvY2F0ZWQgdG8gdGhlIGBUb2dnbGVgLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRW1pdHMgZXZlbnQgbm90aWZ5aW5nIG90aGVyIGNsYXNzZXMgd2hlbiBhIGNoYW5nZSBpbiBzdGF0ZSBvY2N1cnMgb24gYSB0b2dnbGUgYWZ0ZXIgYVxuICAgICAqIGNsaWNrLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjRcbiAgICAgKi9cbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxUb2dnbGVDaGFuZ2U+O1xuICAgIHByb3RlY3RlZCBfb2ZmVmFsdWVzOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX29uVmFsdWVzOiBPdmVycmlkYWJsZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFRvZ2dsZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGkxOG46IEkxOG4pO1xuICAgIC8qKlxuICAgICAqIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAgbWV0aG9kIHRvIHByb2dyYW1tYXRpY2FsbHkgZGlzYWJsZSB0aGUgdG9nZ2xlIGlucHV0LlxuICAgICAqXG4gICAgICogZXg6IGB0aGlzLmZvcm1Hcm91cC5nZXQoXCJteVRvZ2dsZVwiKS5kaXNhYmxlKCk7YFxuICAgICAqXG4gICAgICogQHBhcmFtIGlzRGlzYWJsZWQgYHRydWVgIHRvIGRpc2FibGUgdGhlIGlucHV0XG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBnZXRPZmZUZXh0KCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBnZXRPblRleHQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgaW5zdGFuY2Ugb2YgYFRvZ2dsZUNoYW5nZWAgdXNlZCB0byBwcm9wYWdhdGUgdGhlIGNoYW5nZSBldmVudC5cbiAgICAgKi9cbiAgICBlbWl0Q2hhbmdlRXZlbnQoKTogdm9pZDtcbiAgICBpc1RlbXBsYXRlKHZhbHVlOiBhbnkpOiBib29sZWFuO1xufVxuIl19