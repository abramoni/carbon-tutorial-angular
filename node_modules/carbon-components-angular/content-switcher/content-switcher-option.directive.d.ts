/**
 *
 * carbon-angular v0.0.0 | content-switcher-option.directive.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare class ContentSwitcherOption {
    /**
     * Used to activate the option. Only one option may be `active` at a time
     */
    active: boolean;
    /**
     * Internal name for the option.
     * Should be something that identifies the option to the application.
     * Accessible from the `ContentSwitcher` `selected` emitter
     */
    name: string;
    /**
     * Emits when the option is selected.
     */
    selected: EventEmitter<boolean>;
    onClick: EventEmitter<MouseEvent>;
    onFocus: EventEmitter<FocusEvent>;
    switcherClass: string;
    selectedClass: boolean;
    role: string;
    ariaSelected: boolean;
    tabindex: string;
    protected _active: boolean;
    hostClick(event: MouseEvent): void;
    doFocus(event: FocusEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContentSwitcherOption>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ContentSwitcherOption, "[ibmContentOption]", never, {
    "name": "name";
    "active": "active";
}, {
    "selected": "selected";
    "onClick": "onClick";
    "onFocus": "onFocus";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvbnRlbnQtc3dpdGNoZXItb3B0aW9uLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgY29udGVudC1zd2l0Y2hlci1vcHRpb24uZGlyZWN0aXZlLmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb250ZW50U3dpdGNoZXJPcHRpb24ge1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gYWN0aXZhdGUgdGhlIG9wdGlvbi4gT25seSBvbmUgb3B0aW9uIG1heSBiZSBgYWN0aXZlYCBhdCBhIHRpbWVcbiAgICAgKi9cbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbmFtZSBmb3IgdGhlIG9wdGlvbi5cbiAgICAgKiBTaG91bGQgYmUgc29tZXRoaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgb3B0aW9uIHRvIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKiBBY2Nlc3NpYmxlIGZyb20gdGhlIGBDb250ZW50U3dpdGNoZXJgIGBzZWxlY3RlZGAgZW1pdHRlclxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD47XG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPEZvY3VzRXZlbnQ+O1xuICAgIHN3aXRjaGVyQ2xhc3M6IHN0cmluZztcbiAgICBzZWxlY3RlZENsYXNzOiBib29sZWFuO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBhcmlhU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgdGFiaW5kZXg6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBob3N0Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIGRvRm9jdXMoZXZlbnQ6IEZvY3VzRXZlbnQpOiB2b2lkO1xufVxuIl19