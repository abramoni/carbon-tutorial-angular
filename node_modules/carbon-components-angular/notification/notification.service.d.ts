/**
 *
 * carbon-angular v0.0.0 | notification.service.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ApplicationRef, ComponentFactoryResolver, ComponentRef, EventEmitter, Injector, OnDestroy, NgZone } from "@angular/core";
import { NotificationContent, ToastContent } from "./notification-content.interface";
import { Notification } from "./notification.component";
import { Toast } from "./toast.component";
/**
 * Provides a way to use the notification component.
 *
 * Notifications are displayed toward the top of the UI and do not interrupt the user’s work.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotificationService implements OnDestroy {
    protected injector: Injector;
    protected componentFactoryResolver: ComponentFactoryResolver;
    protected applicationRef: ApplicationRef;
    protected ngZone: NgZone;
    /**
     * An array containing `ComponentRef`s to all the notifications this service instance
     * is responsible for.
     *
     */
    notificationRefs: ComponentRef<any>[];
    onClose: EventEmitter<any>;
    /**
     * Constructs NotificationService.
     *
     * @param injector
     * @param componentFactoryResolver
     * @param applicationRef
     */
    constructor(injector: Injector, componentFactoryResolver: ComponentFactoryResolver, applicationRef: ApplicationRef, ngZone: NgZone);
    /**
     * Shows the notification based on the `notificationObj`.
     *
     * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.
     *
     * **Members:**
     *
     * * `type` can be one of `"info"`, `"warning"`, `"danger"`, `"success"`
     * * `message` is message for notification to display
     * * `target` is css selector defining an element to append notification to. If not provided,
     * `showNotification()` creates a place for the notification in `body`
     * * `duration` is number of ms to close the notification after. If used in combination with `smart`,
     * it's added to the calculated timeout
     * * `smart`, set to `true` if you want to use smart notification.
     *
     * **Example:**
     * ```typescript
     * // Info notification, saying "Sample message." added to the element with id notification-container
     * // uses smart timeout with added duration of 1 second.
     * {
     *	type: "info",
     *	message: "Sample message.",
     *	target: "#notification-container",
     *	duration: 1000,
     *	smart: true
     * }
     * ```
     *
     * @param [notificationComp=Notification] If provided, used to resolve component factory
     */
    showNotification(notificationObj: NotificationContent | ToastContent, notificationComp?: typeof Notification): Notification;
    showToast(notificationObj: NotificationContent | ToastContent, notificationComp?: typeof Toast): Notification;
    /**
     * Programatically closes notification based on `notificationRef`.
     *
     * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close
     */
    close(notificationRef: any): void;
    /**
     * Calculates the amount of time user needs to read the message in the notification.
     *
     * @param notificationObj Same object used to instantiate notification.
     *
     * In addition to `type` and `message` members, use `duration` member to add
     * some extra time (in ms) to timeout if you need to.
     * @returns calculated timeout (in ms) for smart notification
     */
    getSmartTimeout(notificationObj: any): number;
    /**
     * OnDestroy hook.
     *
     * Destroys all living notifications it is responsible for.
     *
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotificationService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotificationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibm90aWZpY2F0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IG5vdGlmaWNhdGlvbi5zZXJ2aWNlLmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgT25EZXN0cm95LCBOZ1pvbmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29udGVudCwgVG9hc3RDb250ZW50IH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLWNvbnRlbnQuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9ub3RpZmljYXRpb24uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gXCIuL3RvYXN0LmNvbXBvbmVudFwiO1xuLyoqXG4gKiBQcm92aWRlcyBhIHdheSB0byB1c2UgdGhlIG5vdGlmaWNhdGlvbiBjb21wb25lbnQuXG4gKlxuICogTm90aWZpY2F0aW9ucyBhcmUgZGlzcGxheWVkIHRvd2FyZCB0aGUgdG9wIG9mIHRoZSBVSSBhbmQgZG8gbm90IGludGVycnVwdCB0aGUgdXNlcuKAmXMgd29yay5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTm90aWZpY2F0aW9uU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcjtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJvdGVjdGVkIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZjtcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmU7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgY29udGFpbmluZyBgQ29tcG9uZW50UmVmYHMgdG8gYWxsIHRoZSBub3RpZmljYXRpb25zIHRoaXMgc2VydmljZSBpbnN0YW5jZVxuICAgICAqIGlzIHJlc3BvbnNpYmxlIGZvci5cbiAgICAgKlxuICAgICAqL1xuICAgIG5vdGlmaWNhdGlvblJlZnM6IENvbXBvbmVudFJlZjxhbnk+W107XG4gICAgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBOb3RpZmljYXRpb25TZXJ2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluamVjdG9yXG4gICAgICogQHBhcmFtIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICAgICAqIEBwYXJhbSBhcHBsaWNhdGlvblJlZlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvciwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBub3RpZmljYXRpb24gYmFzZWQgb24gdGhlIGBub3RpZmljYXRpb25PYmpgLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvbk9iaiBDYW4gaGF2ZSBgdHlwZWAsIGBtZXNzYWdlYCwgYHRhcmdldGAsIGBkdXJhdGlvbmAgYW5kIGBzbWFydGAgbWVtYmVycy5cbiAgICAgKlxuICAgICAqICoqTWVtYmVyczoqKlxuICAgICAqXG4gICAgICogKiBgdHlwZWAgY2FuIGJlIG9uZSBvZiBgXCJpbmZvXCJgLCBgXCJ3YXJuaW5nXCJgLCBgXCJkYW5nZXJcImAsIGBcInN1Y2Nlc3NcImBcbiAgICAgKiAqIGBtZXNzYWdlYCBpcyBtZXNzYWdlIGZvciBub3RpZmljYXRpb24gdG8gZGlzcGxheVxuICAgICAqICogYHRhcmdldGAgaXMgY3NzIHNlbGVjdG9yIGRlZmluaW5nIGFuIGVsZW1lbnQgdG8gYXBwZW5kIG5vdGlmaWNhdGlvbiB0by4gSWYgbm90IHByb3ZpZGVkLFxuICAgICAqIGBzaG93Tm90aWZpY2F0aW9uKClgIGNyZWF0ZXMgYSBwbGFjZSBmb3IgdGhlIG5vdGlmaWNhdGlvbiBpbiBgYm9keWBcbiAgICAgKiAqIGBkdXJhdGlvbmAgaXMgbnVtYmVyIG9mIG1zIHRvIGNsb3NlIHRoZSBub3RpZmljYXRpb24gYWZ0ZXIuIElmIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgc21hcnRgLFxuICAgICAqIGl0J3MgYWRkZWQgdG8gdGhlIGNhbGN1bGF0ZWQgdGltZW91dFxuICAgICAqICogYHNtYXJ0YCwgc2V0IHRvIGB0cnVlYCBpZiB5b3Ugd2FudCB0byB1c2Ugc21hcnQgbm90aWZpY2F0aW9uLlxuICAgICAqXG4gICAgICogKipFeGFtcGxlOioqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIEluZm8gbm90aWZpY2F0aW9uLCBzYXlpbmcgXCJTYW1wbGUgbWVzc2FnZS5cIiBhZGRlZCB0byB0aGUgZWxlbWVudCB3aXRoIGlkIG5vdGlmaWNhdGlvbi1jb250YWluZXJcbiAgICAgKiAvLyB1c2VzIHNtYXJ0IHRpbWVvdXQgd2l0aCBhZGRlZCBkdXJhdGlvbiBvZiAxIHNlY29uZC5cbiAgICAgKiB7XG4gICAgICpcdHR5cGU6IFwiaW5mb1wiLFxuICAgICAqXHRtZXNzYWdlOiBcIlNhbXBsZSBtZXNzYWdlLlwiLFxuICAgICAqXHR0YXJnZXQ6IFwiI25vdGlmaWNhdGlvbi1jb250YWluZXJcIixcbiAgICAgKlx0ZHVyYXRpb246IDEwMDAsXG4gICAgICpcdHNtYXJ0OiB0cnVlXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIFtub3RpZmljYXRpb25Db21wPU5vdGlmaWNhdGlvbl0gSWYgcHJvdmlkZWQsIHVzZWQgdG8gcmVzb2x2ZSBjb21wb25lbnQgZmFjdG9yeVxuICAgICAqL1xuICAgIHNob3dOb3RpZmljYXRpb24obm90aWZpY2F0aW9uT2JqOiBOb3RpZmljYXRpb25Db250ZW50IHwgVG9hc3RDb250ZW50LCBub3RpZmljYXRpb25Db21wPzogdHlwZW9mIE5vdGlmaWNhdGlvbik6IE5vdGlmaWNhdGlvbjtcbiAgICBzaG93VG9hc3Qobm90aWZpY2F0aW9uT2JqOiBOb3RpZmljYXRpb25Db250ZW50IHwgVG9hc3RDb250ZW50LCBub3RpZmljYXRpb25Db21wPzogdHlwZW9mIFRvYXN0KTogTm90aWZpY2F0aW9uO1xuICAgIC8qKlxuICAgICAqIFByb2dyYW1hdGljYWxseSBjbG9zZXMgbm90aWZpY2F0aW9uIGJhc2VkIG9uIGBub3RpZmljYXRpb25SZWZgLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvblJlZiBgQ29tcG9uZW50UmVmYCBvZiBhIG5vdGlmaWNhdGlvbiBvciBgTm90aWZpY2F0aW9uYCBjb21wb25lbnQgeW91IHdpc2ggdG8gY2xvc2VcbiAgICAgKi9cbiAgICBjbG9zZShub3RpZmljYXRpb25SZWY6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYW1vdW50IG9mIHRpbWUgdXNlciBuZWVkcyB0byByZWFkIHRoZSBtZXNzYWdlIGluIHRoZSBub3RpZmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uT2JqIFNhbWUgb2JqZWN0IHVzZWQgdG8gaW5zdGFudGlhdGUgbm90aWZpY2F0aW9uLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gYHR5cGVgIGFuZCBgbWVzc2FnZWAgbWVtYmVycywgdXNlIGBkdXJhdGlvbmAgbWVtYmVyIHRvIGFkZFxuICAgICAqIHNvbWUgZXh0cmEgdGltZSAoaW4gbXMpIHRvIHRpbWVvdXQgaWYgeW91IG5lZWQgdG8uXG4gICAgICogQHJldHVybnMgY2FsY3VsYXRlZCB0aW1lb3V0IChpbiBtcykgZm9yIHNtYXJ0IG5vdGlmaWNhdGlvblxuICAgICAqL1xuICAgIGdldFNtYXJ0VGltZW91dChub3RpZmljYXRpb25PYmo6IGFueSk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBPbkRlc3Ryb3kgaG9vay5cbiAgICAgKlxuICAgICAqIERlc3Ryb3lzIGFsbCBsaXZpbmcgbm90aWZpY2F0aW9ucyBpdCBpcyByZXNwb25zaWJsZSBmb3IuXG4gICAgICpcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19