/**
 *
 * carbon-angular v0.0.0 | file-uploader.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, TemplateRef } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import { FileItem } from "./file-item.interface";
/**
 * [See demo](../../?path=/story/components-file-uploader--basic)
 *
 * <example-url>../../iframe.html?id=components-file-uploader--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class FileUploader {
    protected i18n: I18n;
    /**
     * Counter used to create unique ids for file-uploader components
     */
    static fileUploaderCount: number;
    /**
     * Accessible text for the button that opens the upload window.
     *
     * Defaults to the `FILE_UPLOADER.OPEN` value from the i18n service
     */
    buttonText: any;
    /**
     * Type set for button
     */
    buttonType: "primary" | "secondary" | "tertiary" | "ghost" | "danger";
    /**
     * Text set to the title
     */
    title: string;
    /**
     * Text set to the description
     */
    description: string;
    /**
     * Specify the types of files that the input should be able to receive
     */
    accept: any[];
    /**
     * Set to `false` to tell the component to only accept a single file on upload.
     *
     * Defaults to `true`. Accepts multiple files.
     */
    multiple: boolean;
    /**
     * Set to `true` for a loading file uploader.
     */
    skeleton: boolean;
    /**
     * Sets the size of the button.
     */
    size: "sm" | "normal";
    /**
     * Set to `true` to enable drag and drop.
     */
    drop: boolean;
    /**
     * Sets the text shown in drag and drop box.
     */
    dropText: string | TemplateRef<any>;
    /**
     * Provides a unique id for the underlying <input> node
     */
    fileUploaderId: string;
    /**
     * Maintains a reference to the view DOM element of the underlying <input> node
     */
    fileInput: any;
    /**
     * The list of files that have been submitted to be uploaded
     */
    files: Set<FileItem>;
    /**
     * Set to `true` to disable upload button
     */
    disabled: boolean;
    filesChange: EventEmitter<any>;
    /**
     * Controls the state of the drag and drop file container
     */
    dragOver: boolean;
    protected onTouchedCallback: () => void;
    protected onChangeCallback: (_: Set<FileItem>) => void;
    constructor(i18n: I18n);
    /**
     * Specifies the property to be used as the return value to `ngModel`
     */
    value: Set<FileItem>;
    onBlur(): void;
    readonly fileList: {}[];
    /**
     * Propagates the injected `value`.
     */
    writeValue(value: Set<FileItem>): void;
    createFileItem(file: any): FileItem;
    onFilesAdded(): void;
    onDragOver(event: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    removeFile(fileItem: any): void;
    isTemplate(value: any): boolean;
    /**
     * Registers the injected function to control the touch use of the `FileUploader`.
     */
    registerOnTouched(fn: any): void;
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileUploader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileUploader, "ibm-file-uploader", never, {
    "buttonText": "buttonText";
    "buttonType": "buttonType";
    "accept": "accept";
    "multiple": "multiple";
    "skeleton": "skeleton";
    "drop": "drop";
    "fileUploaderId": "fileUploaderId";
    "files": "files";
    "disabled": "disabled";
    "title": "title";
    "description": "description";
    "size": "size";
    "dropText": "dropText";
}, {
    "filesChange": "filesChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmlsZS11cGxvYWRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1HQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGZpbGUtdXBsb2FkZXIuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IEZpbGVJdGVtIH0gZnJvbSBcIi4vZmlsZS1pdGVtLmludGVyZmFjZVwiO1xuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLWZpbGUtdXBsb2FkZXItLWJhc2ljKVxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLWZpbGUtdXBsb2FkZXItLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsZVVwbG9hZGVyIHtcbiAgICBwcm90ZWN0ZWQgaTE4bjogSTE4bjtcbiAgICAvKipcbiAgICAgKiBDb3VudGVyIHVzZWQgdG8gY3JlYXRlIHVuaXF1ZSBpZHMgZm9yIGZpbGUtdXBsb2FkZXIgY29tcG9uZW50c1xuICAgICAqL1xuICAgIHN0YXRpYyBmaWxlVXBsb2FkZXJDb3VudDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEFjY2Vzc2libGUgdGV4dCBmb3IgdGhlIGJ1dHRvbiB0aGF0IG9wZW5zIHRoZSB1cGxvYWQgd2luZG93LlxuICAgICAqXG4gICAgICogRGVmYXVsdHMgdG8gdGhlIGBGSUxFX1VQTE9BREVSLk9QRU5gIHZhbHVlIGZyb20gdGhlIGkxOG4gc2VydmljZVxuICAgICAqL1xuICAgIGJ1dHRvblRleHQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBUeXBlIHNldCBmb3IgYnV0dG9uXG4gICAgICovXG4gICAgYnV0dG9uVHlwZTogXCJwcmltYXJ5XCIgfCBcInNlY29uZGFyeVwiIHwgXCJ0ZXJ0aWFyeVwiIHwgXCJnaG9zdFwiIHwgXCJkYW5nZXJcIjtcbiAgICAvKipcbiAgICAgKiBUZXh0IHNldCB0byB0aGUgdGl0bGVcbiAgICAgKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRleHQgc2V0IHRvIHRoZSBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgdHlwZXMgb2YgZmlsZXMgdGhhdCB0aGUgaW5wdXQgc2hvdWxkIGJlIGFibGUgdG8gcmVjZWl2ZVxuICAgICAqL1xuICAgIGFjY2VwdDogYW55W107XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGBmYWxzZWAgdG8gdGVsbCB0aGUgY29tcG9uZW50IHRvIG9ubHkgYWNjZXB0IGEgc2luZ2xlIGZpbGUgb24gdXBsb2FkLlxuICAgICAqXG4gICAgICogRGVmYXVsdHMgdG8gYHRydWVgLiBBY2NlcHRzIG11bHRpcGxlIGZpbGVzLlxuICAgICAqL1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgZm9yIGEgbG9hZGluZyBmaWxlIHVwbG9hZGVyLlxuICAgICAqL1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBzaXplOiBcInNtXCIgfCBcIm5vcm1hbFwiO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZW5hYmxlIGRyYWcgYW5kIGRyb3AuXG4gICAgICovXG4gICAgZHJvcDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IHNob3duIGluIGRyYWcgYW5kIGRyb3AgYm94LlxuICAgICAqL1xuICAgIGRyb3BUZXh0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgdW5pcXVlIGlkIGZvciB0aGUgdW5kZXJseWluZyA8aW5wdXQ+IG5vZGVcbiAgICAgKi9cbiAgICBmaWxlVXBsb2FkZXJJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1haW50YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgdmlldyBET00gZWxlbWVudCBvZiB0aGUgdW5kZXJseWluZyA8aW5wdXQ+IG5vZGVcbiAgICAgKi9cbiAgICBmaWxlSW5wdXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBmaWxlcyB0aGF0IGhhdmUgYmVlbiBzdWJtaXR0ZWQgdG8gYmUgdXBsb2FkZWRcbiAgICAgKi9cbiAgICBmaWxlczogU2V0PEZpbGVJdGVtPjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGRpc2FibGUgdXBsb2FkIGJ1dHRvblxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGZpbGVzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgc3RhdGUgb2YgdGhlIGRyYWcgYW5kIGRyb3AgZmlsZSBjb250YWluZXJcbiAgICAgKi9cbiAgICBkcmFnT3ZlcjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uQ2hhbmdlQ2FsbGJhY2s6IChfOiBTZXQ8RmlsZUl0ZW0+KSA9PiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGkxOG46IEkxOG4pO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcHJvcGVydHkgdG8gYmUgdXNlZCBhcyB0aGUgcmV0dXJuIHZhbHVlIHRvIGBuZ01vZGVsYFxuICAgICAqL1xuICAgIHZhbHVlOiBTZXQ8RmlsZUl0ZW0+O1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIHJlYWRvbmx5IGZpbGVMaXN0OiB7fVtdO1xuICAgIC8qKlxuICAgICAqIFByb3BhZ2F0ZXMgdGhlIGluamVjdGVkIGB2YWx1ZWAuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogU2V0PEZpbGVJdGVtPik6IHZvaWQ7XG4gICAgY3JlYXRlRmlsZUl0ZW0oZmlsZTogYW55KTogRmlsZUl0ZW07XG4gICAgb25GaWxlc0FkZGVkKCk6IHZvaWQ7XG4gICAgb25EcmFnT3ZlcihldmVudDogYW55KTogdm9pZDtcbiAgICBvbkRyYWdMZWF2ZShldmVudDogYW55KTogdm9pZDtcbiAgICBvbkRyb3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcmVtb3ZlRmlsZShmaWxlSXRlbTogYW55KTogdm9pZDtcbiAgICBpc1RlbXBsYXRlKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyB0aGUgaW5qZWN0ZWQgZnVuY3Rpb24gdG8gY29udHJvbCB0aGUgdG91Y2ggdXNlIG9mIHRoZSBgRmlsZVVwbG9hZGVyYC5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbWV0aG9kIGluIG9yZGVyIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIGJhY2sgdG8gdGhlIGZvcm0uXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbn1cbiJdfQ==