/**
 *
 * carbon-angular v0.0.0 | label.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { AfterViewInit, ElementRef, TemplateRef, AfterContentInit } from "@angular/core";
import { TextArea } from "./text-area.directive";
/**
 * [See demo](../../?path=/story/components-input--label)
 *
 * ```html
 * <ibm-label labelState="success">
 * 	<label label>Field with success</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="warning">
 * 	<label label>Field with warning</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 *
 * <ibm-label labelState="error">
 * 	<label label>Field with error</label>
 * 	<input type="text" class="input-field">
 * </ibm-label>
 * ```
 *
 * <example-url>../../iframe.html?id=components-input--label</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Label implements AfterContentInit, AfterViewInit {
    /**
     * Used to build the id of the input item associated with the `Label`.
     */
    static labelCounter: number;
    /**
     * The class of the wrapper
     */
    wrapperClass: string;
    /**
     * The id of the input item associated with the `Label`. This value is also used to associate the `Label` with
     * its input counterpart through the 'for' attribute.
    */
    labelInputID: string;
    /**
     * State of the `Label` will determine the styles applied.
     */
    labelState: "success" | "warning" | "error" | "";
    /**
     * Set to `true` for a loading label.
     */
    skeleton: boolean;
    /**
     * Optional helper text that appears under the label.
     */
    helperText: string | TemplateRef<any>;
    /**
     * Sets the invalid text.
     */
    invalidText: string | TemplateRef<any>;
    /**
     * Set to `true` for an invalid label component.
     */
    invalid: boolean;
    /**
      * Set to `true` to show a warning (contents set by warningText)
      */
    warn: boolean;
    /**
     * Sets the warning text
     */
    warnText: string | TemplateRef<any>;
    /**
     * Set the arialabel for label
     */
    ariaLabel: string;
    wrapper: ElementRef<HTMLDivElement>;
    textArea: TextArea;
    labelClass: boolean;
    /**
     * Creates an instance of Label.
     */
    constructor();
    /**
     * Update wrapper class if a textarea is hosted.
     */
    ngAfterContentInit(): void;
    /**
     * Sets the id on the input item associated with the `Label`.
     */
    ngAfterViewInit(): void;
    isTemplate(value: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Label>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Label, "ibm-label", never, {
    "labelInputID": "labelInputID";
    "labelState": "labelState";
    "skeleton": "skeleton";
    "invalid": "invalid";
    "warn": "warn";
    "helperText": "helperText";
    "invalidText": "invalidText";
    "warnText": "warnText";
    "ariaLabel": "ariaLabel";
}, {}, ["textArea"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImxhYmVsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOERBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgbGFiZWwuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRleHRBcmVhIH0gZnJvbSBcIi4vdGV4dC1hcmVhLmRpcmVjdGl2ZVwiO1xuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLWlucHV0LS1sYWJlbClcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJzdWNjZXNzXCI+XG4gKiBcdDxsYWJlbCBsYWJlbD5GaWVsZCB3aXRoIHN1Y2Nlc3M8L2xhYmVsPlxuICogXHQ8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LWZpZWxkXCI+XG4gKiA8L2libS1sYWJlbD5cbiAqXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJ3YXJuaW5nXCI+XG4gKiBcdDxsYWJlbCBsYWJlbD5GaWVsZCB3aXRoIHdhcm5pbmc8L2xhYmVsPlxuICogXHQ8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LWZpZWxkXCI+XG4gKiA8L2libS1sYWJlbD5cbiAqXG4gKiA8aWJtLWxhYmVsIGxhYmVsU3RhdGU9XCJlcnJvclwiPlxuICogXHQ8bGFiZWwgbGFiZWw+RmllbGQgd2l0aCBlcnJvcjwvbGFiZWw+XG4gKiBcdDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiaW5wdXQtZmllbGRcIj5cbiAqIDwvaWJtLWxhYmVsPlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtaW5wdXQtLWxhYmVsPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGFiZWwgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGJ1aWxkIHRoZSBpZCBvZiB0aGUgaW5wdXQgaXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIGBMYWJlbGAuXG4gICAgICovXG4gICAgc3RhdGljIGxhYmVsQ291bnRlcjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGFzcyBvZiB0aGUgd3JhcHBlclxuICAgICAqL1xuICAgIHdyYXBwZXJDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgaW5wdXQgaXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIGBMYWJlbGAuIFRoaXMgdmFsdWUgaXMgYWxzbyB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgYExhYmVsYCB3aXRoXG4gICAgICogaXRzIGlucHV0IGNvdW50ZXJwYXJ0IHRocm91Z2ggdGhlICdmb3InIGF0dHJpYnV0ZS5cbiAgICAqL1xuICAgIGxhYmVsSW5wdXRJRDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFN0YXRlIG9mIHRoZSBgTGFiZWxgIHdpbGwgZGV0ZXJtaW5lIHRoZSBzdHlsZXMgYXBwbGllZC5cbiAgICAgKi9cbiAgICBsYWJlbFN0YXRlOiBcInN1Y2Nlc3NcIiB8IFwid2FybmluZ1wiIHwgXCJlcnJvclwiIHwgXCJcIjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIGZvciBhIGxvYWRpbmcgbGFiZWwuXG4gICAgICovXG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwgaGVscGVyIHRleHQgdGhhdCBhcHBlYXJzIHVuZGVyIHRoZSBsYWJlbC5cbiAgICAgKi9cbiAgICBoZWxwZXJUZXh0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGludmFsaWQgdGV4dC5cbiAgICAgKi9cbiAgICBpbnZhbGlkVGV4dDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIGZvciBhbiBpbnZhbGlkIGxhYmVsIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBpbnZhbGlkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAgKiBTZXQgdG8gYHRydWVgIHRvIHNob3cgYSB3YXJuaW5nIChjb250ZW50cyBzZXQgYnkgd2FybmluZ1RleHQpXG4gICAgICAqL1xuICAgIHdhcm46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgd2FybmluZyB0ZXh0XG4gICAgICovXG4gICAgd2FyblRleHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhcmlhbGFiZWwgZm9yIGxhYmVsXG4gICAgICovXG4gICAgYXJpYUxhYmVsOiBzdHJpbmc7XG4gICAgd3JhcHBlcjogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG4gICAgdGV4dEFyZWE6IFRleHRBcmVhO1xuICAgIGxhYmVsQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBMYWJlbC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB3cmFwcGVyIGNsYXNzIGlmIGEgdGV4dGFyZWEgaXMgaG9zdGVkLlxuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGlkIG9uIHRoZSBpbnB1dCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgYExhYmVsYC5cbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBpc1RlbXBsYXRlKHZhbHVlOiBhbnkpOiBib29sZWFuO1xufVxuIl19