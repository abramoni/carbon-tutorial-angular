/**
 *
 * carbon-angular v0.0.0 | datepicker-input.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ElementRef, TemplateRef } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInput {
    protected elementRef: ElementRef;
    private static datePickerCount;
    /**
     * Select a calendar type for the `model`.
     * Internal purposes only.
     */
    type: "simple" | "single" | "range";
    id: string;
    hasIcon: boolean;
    label: string | TemplateRef<any>;
    placeholder: string;
    pattern: string;
    valueChange: EventEmitter<string>;
    theme: "light" | "dark";
    disabled: boolean;
    /**
     * Set to `true` for invalid state.
     */
    invalid: boolean;
    /**
     * Value displayed if dropdown is in invalid state.
     */
    invalidText: string | TemplateRef<any>;
    /**
      * Set to `true` to show a warning (contents set by warnText)
      */
    warn: boolean;
    /**
     * Sets the warning text
     */
    warnText: string | TemplateRef<any>;
    skeleton: boolean;
    value: string;
    size: "sm" | "md" | "xl";
    input: ElementRef;
    constructor(elementRef: ElementRef);
    onChange(event: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onTouched: () => any;
    propagateChange: (_: any) => void;
    isTemplate(value: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInput>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInput, "ibm-date-picker-input", never, {
    "type": "type";
    "id": "id";
    "hasIcon": "hasIcon";
    "placeholder": "placeholder";
    "pattern": "pattern";
    "theme": "theme";
    "disabled": "disabled";
    "invalid": "invalid";
    "warn": "warn";
    "skeleton": "skeleton";
    "value": "value";
    "size": "size";
    "label": "label";
    "invalidText": "invalidText";
    "warnText": "warnText";
}, {
    "valueChange": "valueChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnB1dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbnB1dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGRhdGVwaWNrZXItaW5wdXQuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVBpY2tlcklucHV0IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIHN0YXRpYyBkYXRlUGlja2VyQ291bnQ7XG4gICAgLyoqXG4gICAgICogU2VsZWN0IGEgY2FsZW5kYXIgdHlwZSBmb3IgdGhlIGBtb2RlbGAuXG4gICAgICogSW50ZXJuYWwgcHVycG9zZXMgb25seS5cbiAgICAgKi9cbiAgICB0eXBlOiBcInNpbXBsZVwiIHwgXCJzaW5nbGVcIiB8IFwicmFuZ2VcIjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGhhc0ljb246IGJvb2xlYW47XG4gICAgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBwYXR0ZXJuOiBzdHJpbmc7XG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHRoZW1lOiBcImxpZ2h0XCIgfCBcImRhcmtcIjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIGZvciBpbnZhbGlkIHN0YXRlLlxuICAgICAqL1xuICAgIGludmFsaWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVmFsdWUgZGlzcGxheWVkIGlmIGRyb3Bkb3duIGlzIGluIGludmFsaWQgc3RhdGUuXG4gICAgICovXG4gICAgaW52YWxpZFRleHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gc2hvdyBhIHdhcm5pbmcgKGNvbnRlbnRzIHNldCBieSB3YXJuVGV4dClcbiAgICAgICovXG4gICAgd2FybjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB3YXJuaW5nIHRleHRcbiAgICAgKi9cbiAgICB3YXJuVGV4dDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICBza2VsZXRvbjogYm9vbGVhbjtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHNpemU6IFwic21cIiB8IFwibWRcIiB8IFwieGxcIjtcbiAgICBpbnB1dDogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICBvbkNoYW5nZShldmVudDogYW55KTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiBhbnk7XG4gICAgcHJvcGFnYXRlQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkO1xuICAgIGlzVGVtcGxhdGUodmFsdWU6IGFueSk6IGJvb2xlYW47XG59XG4iXX0=