/**
 *
 * carbon-angular v0.0.0 | inline-loading.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare enum InlineLoadingState {
    /** It hides the whole component. */
    Hidden = "hidden",
    /** It shows the `loadingText` but no loading animation. */
    Inactive = "inactive",
    /** It shows the `loadingText` with loading animation. */
    Active = "active",
    /** It shows the `successText` with a success state. */
    Finished = "finished",
    /** It shows the `errorText` with an error state. */
    Error = "error"
}
/**
 * [See demo](../../?path=/story/components-inline-loading--basic)
 *
 * <example-url>../../iframe.html?id=components-inline-loading--basic</example-url>
 */
export declare class InlineLoading {
    InlineLoadingState: typeof InlineLoadingState;
    /**
     * Specify the text description for the loading state.
     */
    state: InlineLoadingState | string;
    /**
     * Specify the text description for the loading state.
     */
    loadingText: string;
    /**
     * Specify the text description for the success state.
     */
    successText: string;
    /**
     * Provide a delay for the `setTimeout` for success.
     */
    successDelay: number;
    /**
     * Specify the text description for the error state.
     */
    errorText: string;
    /**
     * set to `false` to stop the loading animation
     */
    isActive: boolean;
    /**
     * Returns value `true` if the component is in the success state.
     */
    /**
    * Set the component's state to match the parameter and emits onSuccess if it exits.
    */
    success: boolean;
    /**
     * Emits event after the success state is active
     */
    onSuccess: EventEmitter<any>;
    loadingClass: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InlineLoading>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InlineLoading, "ibm-inline-loading", never, {
    "state": "state";
    "successDelay": "successDelay";
    "isActive": "isActive";
    "success": "success";
    "loadingText": "loadingText";
    "successText": "successText";
    "errorText": "errorText";
}, {
    "onSuccess": "onSuccess";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLWxvYWRpbmcuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImlubGluZS1sb2FkaW5nLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdURBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgaW5saW5lLWxvYWRpbmcuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5leHBvcnQgZGVjbGFyZSBlbnVtIElubGluZUxvYWRpbmdTdGF0ZSB7XG4gICAgLyoqIEl0IGhpZGVzIHRoZSB3aG9sZSBjb21wb25lbnQuICovXG4gICAgSGlkZGVuID0gXCJoaWRkZW5cIixcbiAgICAvKiogSXQgc2hvd3MgdGhlIGBsb2FkaW5nVGV4dGAgYnV0IG5vIGxvYWRpbmcgYW5pbWF0aW9uLiAqL1xuICAgIEluYWN0aXZlID0gXCJpbmFjdGl2ZVwiLFxuICAgIC8qKiBJdCBzaG93cyB0aGUgYGxvYWRpbmdUZXh0YCB3aXRoIGxvYWRpbmcgYW5pbWF0aW9uLiAqL1xuICAgIEFjdGl2ZSA9IFwiYWN0aXZlXCIsXG4gICAgLyoqIEl0IHNob3dzIHRoZSBgc3VjY2Vzc1RleHRgIHdpdGggYSBzdWNjZXNzIHN0YXRlLiAqL1xuICAgIEZpbmlzaGVkID0gXCJmaW5pc2hlZFwiLFxuICAgIC8qKiBJdCBzaG93cyB0aGUgYGVycm9yVGV4dGAgd2l0aCBhbiBlcnJvciBzdGF0ZS4gKi9cbiAgICBFcnJvciA9IFwiZXJyb3JcIlxufVxuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLWlubGluZS1sb2FkaW5nLS1iYXNpYylcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy1pbmxpbmUtbG9hZGluZy0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbmxpbmVMb2FkaW5nIHtcbiAgICBJbmxpbmVMb2FkaW5nU3RhdGU6IHR5cGVvZiBJbmxpbmVMb2FkaW5nU3RhdGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgdGV4dCBkZXNjcmlwdGlvbiBmb3IgdGhlIGxvYWRpbmcgc3RhdGUuXG4gICAgICovXG4gICAgc3RhdGU6IElubGluZUxvYWRpbmdTdGF0ZSB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSB0ZXh0IGRlc2NyaXB0aW9uIGZvciB0aGUgbG9hZGluZyBzdGF0ZS5cbiAgICAgKi9cbiAgICBsb2FkaW5nVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBzdWNjZXNzIHN0YXRlLlxuICAgICAqL1xuICAgIHN1Y2Nlc3NUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUHJvdmlkZSBhIGRlbGF5IGZvciB0aGUgYHNldFRpbWVvdXRgIGZvciBzdWNjZXNzLlxuICAgICAqL1xuICAgIHN1Y2Nlc3NEZWxheTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIHRleHQgZGVzY3JpcHRpb24gZm9yIHRoZSBlcnJvciBzdGF0ZS5cbiAgICAgKi9cbiAgICBlcnJvclRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBzZXQgdG8gYGZhbHNlYCB0byBzdG9wIHRoZSBsb2FkaW5nIGFuaW1hdGlvblxuICAgICAqL1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdmFsdWUgYHRydWVgIGlmIHRoZSBjb21wb25lbnQgaXMgaW4gdGhlIHN1Y2Nlc3Mgc3RhdGUuXG4gICAgICovXG4gICAgLyoqXG4gICAgKiBTZXQgdGhlIGNvbXBvbmVudCdzIHN0YXRlIHRvIG1hdGNoIHRoZSBwYXJhbWV0ZXIgYW5kIGVtaXRzIG9uU3VjY2VzcyBpZiBpdCBleGl0cy5cbiAgICAqL1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRW1pdHMgZXZlbnQgYWZ0ZXIgdGhlIHN1Y2Nlc3Mgc3RhdGUgaXMgYWN0aXZlXG4gICAgICovXG4gICAgb25TdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBsb2FkaW5nQ2xhc3M6IGJvb2xlYW47XG59XG4iXX0=