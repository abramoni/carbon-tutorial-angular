/**
 *
 * carbon-angular v0.0.0 | combobox.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { OnChanges, ElementRef, EventEmitter, AfterViewInit, AfterContentInit, TemplateRef, OnDestroy } from "@angular/core";
import { AbstractDropdownView, DropdownService } from "carbon-components-angular/dropdown";
import { ListItem } from "carbon-components-angular/dropdown";
import { DocumentService } from "carbon-components-angular/utils";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { Observable } from "rxjs";
/**
 * ComboBoxes are similar to dropdowns, except a combobox provides an input field for users to search items and (optionally) add their own.
 * Multi-select comboboxes also provide "pills" of selected items.
 *
 * [See demo](../../?path=/story/components-combobox--basic)
 *
 * <example-url>../../iframe.html?id=components-combobox--basic</example-url>
 */
import * as Éµngcc0 from '@angular/core';
export declare class ComboBox implements OnChanges, AfterViewInit, AfterContentInit, OnDestroy {
    protected elementRef: ElementRef;
    protected documentService: DocumentService;
    protected dropdownService: DropdownService;
    protected i18n: I18n;
    /**
     * Text to show when nothing is selected.
     */
    placeholder: string | Observable<string>;
    /**
     * Value to display for accessibility purposes on the combobox control menu when closed
     */
    openMenuAria: string | Observable<string>;
    /**
     * Value to display for accessibility purposes on the combobox control menu when opened
     */
    closeMenuAria: string | Observable<string>;
    /**
     * Value to display on the clear selections icon, when multi is selected
     */
    clearSelectionsTitle: string | Observable<string>;
    /**
     * Value to display for accessibility purposes to clear selections, when multi is selected
     */
    clearSelectionsAria: string | Observable<string>;
    /**
     * Value to display on the clear the selected item icon, when single is selected
     */
    clearSelectionTitle: string | Observable<string>;
    /**
     * Value to display for accessibility purposes on the clear the selected item icon, when single is selected
     */
    clearSelectionAria: string | Observable<string>;
    static comboBoxCount: number;
    id: string;
    /**
     * List of items to fill the content with.
     *
     * **Example:**
     * ```javascript
     * items = [
     *		{
     *			content: "Abacus",
     *			selected: false
     *		},
     *		{
     *			content: "Byte",
     *			selected: false,
     *		},
     *		{
     *			content: "Computer",
     *			selected: false
     *		},
     *		{
     *			content: "Digital",
     *			selected: false
     *		}
     * ];
     * ```
     *
     */
    items: Array<ListItem>;
    /**
     * Combo box type (supporting single or multi selection of items).
     */
    type: "single" | "multi";
    /**
     * Combo box render size.
     *
     * @deprecated since v4
     */
    size: "sm" | "md" | "xl";
    /**
     * Specifies the property to be used as the return value to `ngModel`
     */
    itemValueKey: string;
    /**
     * Label for the combobox.
     */
    label: string | TemplateRef<any>;
    /**
     * Sets the optional helper text.
     */
    helperText: string | TemplateRef<any>;
    /**
     * set to `true` to place the dropdown view inline with the component
     */
    appendInline: boolean;
    /**
     * Set to `true` to show the invalid state.
     */
    invalid: boolean;
    /**
     * Value displayed if combobox is in an invalid state.
     */
    invalidText: string | TemplateRef<any>;
    /**
    * Set to `true` to show a warning (contents set by warnText)
    */
    warn: boolean;
    /**
     * Sets the warning text
     */
    warnText: string | TemplateRef<any>;
    /**
     * Max length value to limit input characters
     */
    maxLength: number;
    /**
     * `light` or `dark` dropdown theme
     */
    theme: "light" | "dark";
    /**
     * Specify feedback (mode) of the selection.
     * `top`: selected item jumps to top
     * `fixed`: selected item stays at its position
     * `top-after-reopen`: selected item jump to top after reopen dropdown
     */
    selectionFeedback: "top" | "fixed" | "top-after-reopen";
    /**
     * Specify aria-autocomplete attribute of text input.
     * "list", is the expected value for a combobox that invokes a drop-down list
     */
    autocomplete: string;
    /**
     * Overrides the automatic dropUp.
     */
    dropUp: boolean;
    /**
     * Set to `true` to disable combobox.
     */
    disabled: boolean;
    /**
     * Emits a ListItem
     *
     * Example:
     * ```javascript
     * {
     * 		content: "one",
     * 		selected: true
     * }
     * ```
     */
    selected: EventEmitter<ListItem | ListItem[]>;
    /**
     * Intended to be used to add items to the list.
     *
     * Emits an event that includes the current item list, the suggested index for the new item, and a simple ListItem
     *
     * Example:
     * ```javascript
     *	{
     *		items: [{content: "one", selected: true}, {content: "two", selected: true}],
     *		index: 1,
     *		value: {
     *			content: "some user string",
     *			selected: false
     *		}
     *	}
     * ```
     *
     *
     * Example:
     * ```javascript
     * {
     *	after: 1,
     *	value: "some user string"
     * }
     * ```
     */
    submit: EventEmitter<{
        items: ListItem[];
        index: number;
        value: {
            content: string;
            selected: boolean;
        };
    }>;
    /** emits an empty event when the menu is closed */
    close: EventEmitter<void>;
    /** emits the search string from the input */
    search: EventEmitter<string>;
    /** ContentChild reference to the instantiated dropdown list */
    view: AbstractDropdownView;
    dropdownMenu: any;
    input: ElementRef;
    listbox: ElementRef;
    hostClass: boolean;
    display: string;
    open: boolean;
    showClearButton: boolean;
    /** Selected items for multi-select combo-boxes. */
    pills: any[];
    /** used to update the displayValue */
    selectedValue: string;
    keyboardNav: any;
    /**
     * controls whether the `drop-up` class is applied
     */
    _dropUp: boolean;
    protected noop: any;
    protected onTouchedCallback: () => void;
    protected propagateChangeCallback: (_: any) => void;
    protected _placeholder: Overridable;
    protected _closeMenuAria: Overridable;
    protected _openMenuAria: Overridable;
    protected _clearSelectionsTitle: Overridable;
    protected _clearSelectionsAria: Overridable;
    protected _clearSelectionTitle: Overridable;
    protected _clearSelectionAria: Overridable;
    /**
     * Creates an instance of ComboBox.
     */
    constructor(elementRef: ElementRef, documentService: DocumentService, dropdownService: DropdownService, i18n: I18n);
    /**
     * Lifecycle hook.
     * Updates pills if necessary.
     *
     */
    ngOnChanges(changes: any): void;
    /**
     * Sets initial state that depends on child components
     * Subscribes to select events and handles focus/filtering/initial list updates
     */
    ngAfterContentInit(): void;
    /**
     * Binds event handlers against the rendered view
     */
    ngAfterViewInit(): void;
    /**
     * Removing the `Dropdown` from the body if it is appended to the body.
     */
    ngOnDestroy(): void;
    /**
     * Handles `Escape/Tab` key closing the dropdown, and arrow up/down focus to/from the dropdown list.
     */
    hostkeys(ev: KeyboardEvent): void;
    _noop(): void;
    writeValue(value: any): void;
    onBlur(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /**
     * `ControlValueAccessor` method to programmatically disable the combobox.
     *
     * ex: `this.formGroup.get("myCoolCombobox").disable();`
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Called by `n-pill-input` when the selected pills have changed.
     */
    updatePills(): void;
    clearSelected(): void;
    /**
     * Closes the dropdown and emits the close event.
     */
    closeDropdown(): void;
    /**
     * Opens the dropdown.
     */
    openDropdown(): void;
    /**
     * Toggles the dropdown.
     */
    toggleDropdown(): void;
    /**
     * Sets the list group filter, and manages single select item selection.
     */
    onSearch(searchString: any, shouldEmitSearch?: boolean): void;
    /**
     * Intended to be used to add items to the list.
     */
    onSubmit(event: KeyboardEvent): void;
    clearInput(event: any): void;
    isTemplate(value: any): boolean;
    /**
     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.
     */
    _keyboardNav(event: KeyboardEvent): void;
    /**
     * Creates the `Dropdown` list as an element that is appended to the DOM body.
     */
    _appendToBody(): void;
    /**
     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.
     */
    _appendToDropdown(): void;
    /**
     * Detects whether or not the `Dropdown` list is visible within all scrollable parents.
     * This can be overridden by passing in a value to the `dropUp` input.
     */
    _shouldDropUp(): boolean;
    protected updateSelected(): void;
    protected checkForReorder(): void;
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<ComboBox>;
    static Éµcmp: Éµngcc0.ÉµÉµComponentDefWithMeta<ComboBox, "ibm-combo-box", never, {
    "id": "id";
    "items": "items";
    "type": "type";
    "size": "size";
    "appendInline": "appendInline";
    "invalid": "invalid";
    "warn": "warn";
    "maxLength": "maxLength";
    "theme": "theme";
    "selectionFeedback": "selectionFeedback";
    "autocomplete": "autocomplete";
    "disabled": "disabled";
    "placeholder": "placeholder";
    "openMenuAria": "openMenuAria";
    "closeMenuAria": "closeMenuAria";
    "clearSelectionsTitle": "clearSelectionsTitle";
    "clearSelectionsAria": "clearSelectionsAria";
    "clearSelectionTitle": "clearSelectionTitle";
    "clearSelectionAria": "clearSelectionAria";
    "itemValueKey": "itemValueKey";
    "label": "label";
    "helperText": "helperText";
    "invalidText": "invalidText";
    "warnText": "warnText";
    "dropUp": "dropUp";
}, {
    "selected": "selected";
    "submit": "submit";
    "close": "close";
    "search": "search";
}, ["view"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9ib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbWJvYm94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc1NBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgY29tYm9ib3guY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IE9uQ2hhbmdlcywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBUZW1wbGF0ZVJlZiwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEFic3RyYWN0RHJvcGRvd25WaWV3LCBEcm9wZG93blNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9kcm9wZG93blwiO1xuaW1wb3J0IHsgTGlzdEl0ZW0gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9kcm9wZG93blwiO1xuaW1wb3J0IHsgRG9jdW1lbnRTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IEkxOG4sIE92ZXJyaWRhYmxlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG4vKipcbiAqIENvbWJvQm94ZXMgYXJlIHNpbWlsYXIgdG8gZHJvcGRvd25zLCBleGNlcHQgYSBjb21ib2JveCBwcm92aWRlcyBhbiBpbnB1dCBmaWVsZCBmb3IgdXNlcnMgdG8gc2VhcmNoIGl0ZW1zIGFuZCAob3B0aW9uYWxseSkgYWRkIHRoZWlyIG93bi5cbiAqIE11bHRpLXNlbGVjdCBjb21ib2JveGVzIGFsc28gcHJvdmlkZSBcInBpbGxzXCIgb2Ygc2VsZWN0ZWQgaXRlbXMuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1jb21ib2JveC0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtY29tYm9ib3gtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29tYm9Cb3ggaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGRvY3VtZW50U2VydmljZTogRG9jdW1lbnRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBkcm9wZG93blNlcnZpY2U6IERyb3Bkb3duU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgaTE4bjogSTE4bjtcbiAgICAvKipcbiAgICAgKiBUZXh0IHRvIHNob3cgd2hlbiBub3RoaW5nIGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gZGlzcGxheSBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3NlcyBvbiB0aGUgY29tYm9ib3ggY29udHJvbCBtZW51IHdoZW4gY2xvc2VkXG4gICAgICovXG4gICAgb3Blbk1lbnVBcmlhOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gZGlzcGxheSBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3NlcyBvbiB0aGUgY29tYm9ib3ggY29udHJvbCBtZW51IHdoZW4gb3BlbmVkXG4gICAgICovXG4gICAgY2xvc2VNZW51QXJpYTogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFZhbHVlIHRvIGRpc3BsYXkgb24gdGhlIGNsZWFyIHNlbGVjdGlvbnMgaWNvbiwgd2hlbiBtdWx0aSBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGNsZWFyU2VsZWN0aW9uc1RpdGxlOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gZGlzcGxheSBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3NlcyB0byBjbGVhciBzZWxlY3Rpb25zLCB3aGVuIG11bHRpIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgY2xlYXJTZWxlY3Rpb25zQXJpYTogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFZhbHVlIHRvIGRpc3BsYXkgb24gdGhlIGNsZWFyIHRoZSBzZWxlY3RlZCBpdGVtIGljb24sIHdoZW4gc2luZ2xlIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgY2xlYXJTZWxlY3Rpb25UaXRsZTogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFZhbHVlIHRvIGRpc3BsYXkgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMgb24gdGhlIGNsZWFyIHRoZSBzZWxlY3RlZCBpdGVtIGljb24sIHdoZW4gc2luZ2xlIGlzIHNlbGVjdGVkXG4gICAgICovXG4gICAgY2xlYXJTZWxlY3Rpb25BcmlhOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgc3RhdGljIGNvbWJvQm94Q291bnQ6IG51bWJlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgaXRlbXMgdG8gZmlsbCB0aGUgY29udGVudCB3aXRoLlxuICAgICAqXG4gICAgICogKipFeGFtcGxlOioqXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIGl0ZW1zID0gW1xuICAgICAqXHRcdHtcbiAgICAgKlx0XHRcdGNvbnRlbnQ6IFwiQWJhY3VzXCIsXG4gICAgICpcdFx0XHRzZWxlY3RlZDogZmFsc2VcbiAgICAgKlx0XHR9LFxuICAgICAqXHRcdHtcbiAgICAgKlx0XHRcdGNvbnRlbnQ6IFwiQnl0ZVwiLFxuICAgICAqXHRcdFx0c2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAqXHRcdH0sXG4gICAgICpcdFx0e1xuICAgICAqXHRcdFx0Y29udGVudDogXCJDb21wdXRlclwiLFxuICAgICAqXHRcdFx0c2VsZWN0ZWQ6IGZhbHNlXG4gICAgICpcdFx0fSxcbiAgICAgKlx0XHR7XG4gICAgICpcdFx0XHRjb250ZW50OiBcIkRpZ2l0YWxcIixcbiAgICAgKlx0XHRcdHNlbGVjdGVkOiBmYWxzZVxuICAgICAqXHRcdH1cbiAgICAgKiBdO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgaXRlbXM6IEFycmF5PExpc3RJdGVtPjtcbiAgICAvKipcbiAgICAgKiBDb21ibyBib3ggdHlwZSAoc3VwcG9ydGluZyBzaW5nbGUgb3IgbXVsdGkgc2VsZWN0aW9uIG9mIGl0ZW1zKS5cbiAgICAgKi9cbiAgICB0eXBlOiBcInNpbmdsZVwiIHwgXCJtdWx0aVwiO1xuICAgIC8qKlxuICAgICAqIENvbWJvIGJveCByZW5kZXIgc2l6ZS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHY0XG4gICAgICovXG4gICAgc2l6ZTogXCJzbVwiIHwgXCJtZFwiIHwgXCJ4bFwiO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcHJvcGVydHkgdG8gYmUgdXNlZCBhcyB0aGUgcmV0dXJuIHZhbHVlIHRvIGBuZ01vZGVsYFxuICAgICAqL1xuICAgIGl0ZW1WYWx1ZUtleTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExhYmVsIGZvciB0aGUgY29tYm9ib3guXG4gICAgICovXG4gICAgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgb3B0aW9uYWwgaGVscGVyIHRleHQuXG4gICAgICovXG4gICAgaGVscGVyVGV4dDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBzZXQgdG8gYHRydWVgIHRvIHBsYWNlIHRoZSBkcm9wZG93biB2aWV3IGlubGluZSB3aXRoIHRoZSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBhcHBlbmRJbmxpbmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCB0byBzaG93IHRoZSBpbnZhbGlkIHN0YXRlLlxuICAgICAqL1xuICAgIGludmFsaWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVmFsdWUgZGlzcGxheWVkIGlmIGNvbWJvYm94IGlzIGluIGFuIGludmFsaWQgc3RhdGUuXG4gICAgICovXG4gICAgaW52YWxpZFRleHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgKiBTZXQgdG8gYHRydWVgIHRvIHNob3cgYSB3YXJuaW5nIChjb250ZW50cyBzZXQgYnkgd2FyblRleHQpXG4gICAgKi9cbiAgICB3YXJuOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdhcm5pbmcgdGV4dFxuICAgICAqL1xuICAgIHdhcm5UZXh0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIE1heCBsZW5ndGggdmFsdWUgdG8gbGltaXQgaW5wdXQgY2hhcmFjdGVyc1xuICAgICAqL1xuICAgIG1heExlbmd0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIGBsaWdodGAgb3IgYGRhcmtgIGRyb3Bkb3duIHRoZW1lXG4gICAgICovXG4gICAgdGhlbWU6IFwibGlnaHRcIiB8IFwiZGFya1wiO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgZmVlZGJhY2sgKG1vZGUpIG9mIHRoZSBzZWxlY3Rpb24uXG4gICAgICogYHRvcGA6IHNlbGVjdGVkIGl0ZW0ganVtcHMgdG8gdG9wXG4gICAgICogYGZpeGVkYDogc2VsZWN0ZWQgaXRlbSBzdGF5cyBhdCBpdHMgcG9zaXRpb25cbiAgICAgKiBgdG9wLWFmdGVyLXJlb3BlbmA6IHNlbGVjdGVkIGl0ZW0ganVtcCB0byB0b3AgYWZ0ZXIgcmVvcGVuIGRyb3Bkb3duXG4gICAgICovXG4gICAgc2VsZWN0aW9uRmVlZGJhY2s6IFwidG9wXCIgfCBcImZpeGVkXCIgfCBcInRvcC1hZnRlci1yZW9wZW5cIjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFyaWEtYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBvZiB0ZXh0IGlucHV0LlxuICAgICAqIFwibGlzdFwiLCBpcyB0aGUgZXhwZWN0ZWQgdmFsdWUgZm9yIGEgY29tYm9ib3ggdGhhdCBpbnZva2VzIGEgZHJvcC1kb3duIGxpc3RcbiAgICAgKi9cbiAgICBhdXRvY29tcGxldGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGF1dG9tYXRpYyBkcm9wVXAuXG4gICAgICovXG4gICAgZHJvcFVwOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZGlzYWJsZSBjb21ib2JveC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBhIExpc3RJdGVtXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiB7XG4gICAgICogXHRcdGNvbnRlbnQ6IFwib25lXCIsXG4gICAgICogXHRcdHNlbGVjdGVkOiB0cnVlXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8TGlzdEl0ZW0gfCBMaXN0SXRlbVtdPjtcbiAgICAvKipcbiAgICAgKiBJbnRlbmRlZCB0byBiZSB1c2VkIHRvIGFkZCBpdGVtcyB0byB0aGUgbGlzdC5cbiAgICAgKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IHRoYXQgaW5jbHVkZXMgdGhlIGN1cnJlbnQgaXRlbSBsaXN0LCB0aGUgc3VnZ2VzdGVkIGluZGV4IGZvciB0aGUgbmV3IGl0ZW0sIGFuZCBhIHNpbXBsZSBMaXN0SXRlbVxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICpcdHtcbiAgICAgKlx0XHRpdGVtczogW3tjb250ZW50OiBcIm9uZVwiLCBzZWxlY3RlZDogdHJ1ZX0sIHtjb250ZW50OiBcInR3b1wiLCBzZWxlY3RlZDogdHJ1ZX1dLFxuICAgICAqXHRcdGluZGV4OiAxLFxuICAgICAqXHRcdHZhbHVlOiB7XG4gICAgICpcdFx0XHRjb250ZW50OiBcInNvbWUgdXNlciBzdHJpbmdcIixcbiAgICAgKlx0XHRcdHNlbGVjdGVkOiBmYWxzZVxuICAgICAqXHRcdH1cbiAgICAgKlx0fVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiB7XG4gICAgICpcdGFmdGVyOiAxLFxuICAgICAqXHR2YWx1ZTogXCJzb21lIHVzZXIgc3RyaW5nXCJcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3VibWl0OiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBpdGVtczogTGlzdEl0ZW1bXTtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgICAgICB9O1xuICAgIH0+O1xuICAgIC8qKiBlbWl0cyBhbiBlbXB0eSBldmVudCB3aGVuIHRoZSBtZW51IGlzIGNsb3NlZCAqL1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqIGVtaXRzIHRoZSBzZWFyY2ggc3RyaW5nIGZyb20gdGhlIGlucHV0ICovXG4gICAgc2VhcmNoOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKiogQ29udGVudENoaWxkIHJlZmVyZW5jZSB0byB0aGUgaW5zdGFudGlhdGVkIGRyb3Bkb3duIGxpc3QgKi9cbiAgICB2aWV3OiBBYnN0cmFjdERyb3Bkb3duVmlldztcbiAgICBkcm9wZG93bk1lbnU6IGFueTtcbiAgICBpbnB1dDogRWxlbWVudFJlZjtcbiAgICBsaXN0Ym94OiBFbGVtZW50UmVmO1xuICAgIGhvc3RDbGFzczogYm9vbGVhbjtcbiAgICBkaXNwbGF5OiBzdHJpbmc7XG4gICAgb3BlbjogYm9vbGVhbjtcbiAgICBzaG93Q2xlYXJCdXR0b246IGJvb2xlYW47XG4gICAgLyoqIFNlbGVjdGVkIGl0ZW1zIGZvciBtdWx0aS1zZWxlY3QgY29tYm8tYm94ZXMuICovXG4gICAgcGlsbHM6IGFueVtdO1xuICAgIC8qKiB1c2VkIHRvIHVwZGF0ZSB0aGUgZGlzcGxheVZhbHVlICovXG4gICAgc2VsZWN0ZWRWYWx1ZTogc3RyaW5nO1xuICAgIGtleWJvYXJkTmF2OiBhbnk7XG4gICAgLyoqXG4gICAgICogY29udHJvbHMgd2hldGhlciB0aGUgYGRyb3AtdXBgIGNsYXNzIGlzIGFwcGxpZWRcbiAgICAgKi9cbiAgICBfZHJvcFVwOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBub29wOiBhbnk7XG4gICAgcHJvdGVjdGVkIG9uVG91Y2hlZENhbGxiYWNrOiAoKSA9PiB2b2lkO1xuICAgIHByb3RlY3RlZCBwcm9wYWdhdGVDaGFuZ2VDYWxsYmFjazogKF86IGFueSkgPT4gdm9pZDtcbiAgICBwcm90ZWN0ZWQgX3BsYWNlaG9sZGVyOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX2Nsb3NlTWVudUFyaWE6IE92ZXJyaWRhYmxlO1xuICAgIHByb3RlY3RlZCBfb3Blbk1lbnVBcmlhOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX2NsZWFyU2VsZWN0aW9uc1RpdGxlOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX2NsZWFyU2VsZWN0aW9uc0FyaWE6IE92ZXJyaWRhYmxlO1xuICAgIHByb3RlY3RlZCBfY2xlYXJTZWxlY3Rpb25UaXRsZTogT3ZlcnJpZGFibGU7XG4gICAgcHJvdGVjdGVkIF9jbGVhclNlbGVjdGlvbkFyaWE6IE92ZXJyaWRhYmxlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29tYm9Cb3guXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZG9jdW1lbnRTZXJ2aWNlOiBEb2N1bWVudFNlcnZpY2UsIGRyb3Bkb3duU2VydmljZTogRHJvcGRvd25TZXJ2aWNlLCBpMThuOiBJMThuKTtcbiAgICAvKipcbiAgICAgKiBMaWZlY3ljbGUgaG9vay5cbiAgICAgKiBVcGRhdGVzIHBpbGxzIGlmIG5lY2Vzc2FyeS5cbiAgICAgKlxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBpbml0aWFsIHN0YXRlIHRoYXQgZGVwZW5kcyBvbiBjaGlsZCBjb21wb25lbnRzXG4gICAgICogU3Vic2NyaWJlcyB0byBzZWxlY3QgZXZlbnRzIGFuZCBoYW5kbGVzIGZvY3VzL2ZpbHRlcmluZy9pbml0aWFsIGxpc3QgdXBkYXRlc1xuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJpbmRzIGV2ZW50IGhhbmRsZXJzIGFnYWluc3QgdGhlIHJlbmRlcmVkIHZpZXdcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmluZyB0aGUgYERyb3Bkb3duYCBmcm9tIHRoZSBib2R5IGlmIGl0IGlzIGFwcGVuZGVkIHRvIHRoZSBib2R5LlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBgRXNjYXBlL1RhYmAga2V5IGNsb3NpbmcgdGhlIGRyb3Bkb3duLCBhbmQgYXJyb3cgdXAvZG93biBmb2N1cyB0by9mcm9tIHRoZSBkcm9wZG93biBsaXN0LlxuICAgICAqL1xuICAgIGhvc3RrZXlzKGV2OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBfbm9vcCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBgQ29udHJvbFZhbHVlQWNjZXNzb3JgIG1ldGhvZCB0byBwcm9ncmFtbWF0aWNhbGx5IGRpc2FibGUgdGhlIGNvbWJvYm94LlxuICAgICAqXG4gICAgICogZXg6IGB0aGlzLmZvcm1Hcm91cC5nZXQoXCJteUNvb2xDb21ib2JveFwiKS5kaXNhYmxlKCk7YFxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGJ5IGBuLXBpbGwtaW5wdXRgIHdoZW4gdGhlIHNlbGVjdGVkIHBpbGxzIGhhdmUgY2hhbmdlZC5cbiAgICAgKi9cbiAgICB1cGRhdGVQaWxscygpOiB2b2lkO1xuICAgIGNsZWFyU2VsZWN0ZWQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGRyb3Bkb3duIGFuZCBlbWl0cyB0aGUgY2xvc2UgZXZlbnQuXG4gICAgICovXG4gICAgY2xvc2VEcm9wZG93bigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBkcm9wZG93bi5cbiAgICAgKi9cbiAgICBvcGVuRHJvcGRvd24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93bi5cbiAgICAgKi9cbiAgICB0b2dnbGVEcm9wZG93bigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgZ3JvdXAgZmlsdGVyLCBhbmQgbWFuYWdlcyBzaW5nbGUgc2VsZWN0IGl0ZW0gc2VsZWN0aW9uLlxuICAgICAqL1xuICAgIG9uU2VhcmNoKHNlYXJjaFN0cmluZzogYW55LCBzaG91bGRFbWl0U2VhcmNoPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW50ZW5kZWQgdG8gYmUgdXNlZCB0byBhZGQgaXRlbXMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgb25TdWJtaXQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGNsZWFySW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaXNUZW1wbGF0ZSh2YWx1ZTogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGtleWJvYXJkIGV2ZW50cyBzbyB1c2VycyBhcmUgY29udHJvbGxpbmcgdGhlIGBEcm9wZG93bmAgaW5zdGVhZCBvZiB1bmludGVudGlvbmFsbHkgY29udHJvbGxpbmcgb3V0c2lkZSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBfa2V5Ym9hcmROYXYoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGBEcm9wZG93bmAgbGlzdCBhcyBhbiBlbGVtZW50IHRoYXQgaXMgYXBwZW5kZWQgdG8gdGhlIERPTSBib2R5LlxuICAgICAqL1xuICAgIF9hcHBlbmRUb0JvZHkoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBgRHJvcGRvd25gIGxpc3QgYXBwZW5kaW5nIGl0IHRvIHRoZSBkcm9wZG93biBwYXJlbnQgb2JqZWN0IGluc3RlYWQgb2YgdGhlIGJvZHkuXG4gICAgICovXG4gICAgX2FwcGVuZFRvRHJvcGRvd24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIHdoZXRoZXIgb3Igbm90IHRoZSBgRHJvcGRvd25gIGxpc3QgaXMgdmlzaWJsZSB3aXRoaW4gYWxsIHNjcm9sbGFibGUgcGFyZW50cy5cbiAgICAgKiBUaGlzIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHBhc3NpbmcgaW4gYSB2YWx1ZSB0byB0aGUgYGRyb3BVcGAgaW5wdXQuXG4gICAgICovXG4gICAgX3Nob3VsZERyb3BVcCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCB1cGRhdGVTZWxlY3RlZCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjaGVja0ZvclJlb3JkZXIoKTogdm9pZDtcbn1cbiJdfQ==