/**
 *
 * carbon-angular v0.0.0 | tag-filter.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { Tag } from "./tag.component";
import * as ɵngcc0 from '@angular/core';
export declare class TagFilter extends Tag {
    closeButtonLabel: string;
    disabled: boolean;
    title: string;
    /**
     * Function for close/delete the tag
     */
    close: EventEmitter<any>;
    /**
     * We need to stop the immedate propagation of click on the close button
     * to prevent undesired effects when used within dialogs.
     *
     * We need to emit a click event on close to allow for clicks to be listened
     * to on the immediate close button element. `action` distinguishes between clicks on
     * the tag vs. clicks on the close button.
     */
    click: EventEmitter<{
        action: "click" | "close";
    }>;
    onClick(event: any): void;
    onClose(event: any): void;
    readonly attrClass: string;
    readonly attrAriaLabel: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagFilter>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagFilter, "ibm-tag-filter", never, {
    "closeButtonLabel": "closeButtonLabel";
    "disabled": "disabled";
    "title": "title";
}, {
    "close": "close";
    "click": "click";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWZpbHRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFnLWZpbHRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgdGFnLWZpbHRlci5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhZyB9IGZyb20gXCIuL3RhZy5jb21wb25lbnRcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhZ0ZpbHRlciBleHRlbmRzIFRhZyB7XG4gICAgY2xvc2VCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gZm9yIGNsb3NlL2RlbGV0ZSB0aGUgdGFnXG4gICAgICovXG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gc3RvcCB0aGUgaW1tZWRhdGUgcHJvcGFnYXRpb24gb2YgY2xpY2sgb24gdGhlIGNsb3NlIGJ1dHRvblxuICAgICAqIHRvIHByZXZlbnQgdW5kZXNpcmVkIGVmZmVjdHMgd2hlbiB1c2VkIHdpdGhpbiBkaWFsb2dzLlxuICAgICAqXG4gICAgICogV2UgbmVlZCB0byBlbWl0IGEgY2xpY2sgZXZlbnQgb24gY2xvc2UgdG8gYWxsb3cgZm9yIGNsaWNrcyB0byBiZSBsaXN0ZW5lZFxuICAgICAqIHRvIG9uIHRoZSBpbW1lZGlhdGUgY2xvc2UgYnV0dG9uIGVsZW1lbnQuIGBhY3Rpb25gIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiBjbGlja3Mgb25cbiAgICAgKiB0aGUgdGFnIHZzLiBjbGlja3Mgb24gdGhlIGNsb3NlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjbGljazogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgYWN0aW9uOiBcImNsaWNrXCIgfCBcImNsb3NlXCI7XG4gICAgfT47XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkNsb3NlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHJlYWRvbmx5IGF0dHJDbGFzczogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGF0dHJBcmlhTGFiZWw6IHN0cmluZztcbn1cbiJdfQ==