/**
 *
 * carbon-angular v0.0.0 | search.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ElementRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { I18n } from "carbon-components-angular/i18n";
/**
 * [See demo](../../?path=/story/components-search--basic)
 *
 * <example-url>../../iframe.html?id=components-search--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Search implements ControlValueAccessor {
    protected elementRef: ElementRef;
    protected i18n: I18n;
    /**
     * Variable used for creating unique ids for search components.
     */
    static searchCount: number;
    readonly containerClass: boolean;
    /**
     * `light` or `dark` search theme.
     */
    theme: "light" | "dark";
    /**
     * Size of the search field.
     */
    size: "sm" | "md" | "xl";
    /**
     * Set to `true` for a disabled search input.
     */
    disabled: boolean;
    /**
     * Set to `true` for a toolbar search component.
     */
    toolbar: boolean;
    /**
     * Set to `true` to make the search component expandable.
     * `expandable` would override `toolbar` property behaviours.
     */
    expandable: boolean;
    /**
     * Set to `true` for a loading search component.
     */
    skeleton: boolean;
    /**
     * Set to `true` to expand the toolbar search component.
     */
    active: boolean;
    /**
     * Specifies whether the search component is used in the table toolbar.
     */
    tableSearch: boolean;
    /**
     * Sets the name attribute on the `input` element.
     */
    name: string;
    /**
     * The unique id for the search component.
     */
    id: string;
    /**
     * Reflects the required attribute of the `input` element.
     */
    required: boolean;
    /**
     * Sets the value attribute on the `input` element.
     */
    value: string;
    /**
     * Sets the autocomplete attribute on the `input` element.
     * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values
     */
    autocomplete: string;
    /**
     * Sets the text inside the `label` tag.
     */
    label: any;
    /**
     * Sets the placeholder attribute on the `input` element.
     */
    placeholder: any;
    /**
     * Used to set the `title` attribute of the clear button.
     */
    clearButtonTitle: any;
    /**
     * Title for the search trigger
     */
    searchTitle: string;
    /**
     * Sets the aria label on the `div` element with the `search` role.
     */
    ariaLabel: string;
    /**
     * Emits an event when value is changed.
     */
    valueChange: EventEmitter<string>;
    open: EventEmitter<boolean>;
    /**
     * Emits an event when the clear button is clicked.
     */
    clear: EventEmitter<{}>;
    /**
     * Emits an event on enter.
     */
    search: EventEmitter<string>;
    inputRef: ElementRef;
    /**
     * Sets `true` when composing text via IME.
     */
    protected isComposing: boolean;
    protected _size: "sm" | "md" | "xl";
    /**
     * Creates an instance of `Search`.
     * @param i18n The i18n translations.
     */
    constructor(elementRef: ElementRef, i18n: I18n);
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    writeValue(value: any): void;
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn: any): void;
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the search input is touched.
     */
    registerOnTouched(fn: any): void;
    /**
     * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.
     */
    onTouched: () => any;
    /**
     * Method set in `registerOnChange` to propagate changes back to the form.
     */
    propagateChange: (_: any) => void;
    /**
     * Called when text is written in the input.
     * @param search The input text.
     */
    onSearch(search: string): void;
    /**
     * Called on enter.
     */
    onEnter(): void;
    /**
     * Called when clear button is clicked.
     */
    clearSearch(): void;
    doValueChange(): void;
    openSearch(): void;
    keyDown(event: KeyboardEvent): void;
    focusOut(event: any): void;
    /**
     * Called when using IME composition.
     */
    compositionStart(event: any): void;
    /**
     * Called when IME composition finishes.
     */
    compositionEnd(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Search>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Search, "ibm-search", never, {
    "theme": "theme";
    "disabled": "disabled";
    "toolbar": "toolbar";
    "expandable": "expandable";
    "skeleton": "skeleton";
    "active": "active";
    "tableSearch": "tableSearch";
    "id": "id";
    "value": "value";
    "autocomplete": "autocomplete";
    "label": "label";
    "placeholder": "placeholder";
    "clearButtonTitle": "clearButtonTitle";
    "searchTitle": "searchTitle";
    "size": "size";
    "name": "name";
    "required": "required";
    "ariaLabel": "ariaLabel";
}, {
    "valueChange": "valueChange";
    "open": "open";
    "clear": "clear";
    "search": "search";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzZWFyY2guY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlKQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHNlYXJjaC5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXNlYXJjaC0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtc2VhcmNoLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlYXJjaCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgaTE4bjogSTE4bjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB1c2VkIGZvciBjcmVhdGluZyB1bmlxdWUgaWRzIGZvciBzZWFyY2ggY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2VhcmNoQ291bnQ6IG51bWJlcjtcbiAgICByZWFkb25seSBjb250YWluZXJDbGFzczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBgbGlnaHRgIG9yIGBkYXJrYCBzZWFyY2ggdGhlbWUuXG4gICAgICovXG4gICAgdGhlbWU6IFwibGlnaHRcIiB8IFwiZGFya1wiO1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIHNlYXJjaCBmaWVsZC5cbiAgICAgKi9cbiAgICBzaXplOiBcInNtXCIgfCBcIm1kXCIgfCBcInhsXCI7XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBmb3IgYSBkaXNhYmxlZCBzZWFyY2ggaW5wdXQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBmb3IgYSB0b29sYmFyIHNlYXJjaCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdG9vbGJhcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIG1ha2UgdGhlIHNlYXJjaCBjb21wb25lbnQgZXhwYW5kYWJsZS5cbiAgICAgKiBgZXhwYW5kYWJsZWAgd291bGQgb3ZlcnJpZGUgYHRvb2xiYXJgIHByb3BlcnR5IGJlaGF2aW91cnMuXG4gICAgICovXG4gICAgZXhwYW5kYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIGZvciBhIGxvYWRpbmcgc2VhcmNoIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBza2VsZXRvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGV4cGFuZCB0aGUgdG9vbGJhciBzZWFyY2ggY29tcG9uZW50LlxuICAgICAqL1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgc2VhcmNoIGNvbXBvbmVudCBpcyB1c2VkIGluIHRoZSB0YWJsZSB0b29sYmFyLlxuICAgICAqL1xuICAgIHRhYmxlU2VhcmNoOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG5hbWUgYXR0cmlidXRlIG9uIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgaWQgZm9yIHRoZSBzZWFyY2ggY29tcG9uZW50LlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmVmbGVjdHMgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgICAqL1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0dHJpYnV0ZSBvbiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXV0b2NvbXBsZXRlIGF0dHJpYnV0ZSBvbiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgICAqIEZvciByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQXR0cmlidXRlcy9hdXRvY29tcGxldGUjVmFsdWVzXG4gICAgICovXG4gICAgYXV0b2NvbXBsZXRlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBpbnNpZGUgdGhlIGBsYWJlbGAgdGFnLlxuICAgICAqL1xuICAgIGxhYmVsOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGxhY2Vob2xkZXIgYXR0cmlidXRlIG9uIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IGFueTtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHNldCB0aGUgYHRpdGxlYCBhdHRyaWJ1dGUgb2YgdGhlIGNsZWFyIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjbGVhckJ1dHRvblRpdGxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGl0bGUgZm9yIHRoZSBzZWFyY2ggdHJpZ2dlclxuICAgICAqL1xuICAgIHNlYXJjaFRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXJpYSBsYWJlbCBvbiB0aGUgYGRpdmAgZWxlbWVudCB3aXRoIHRoZSBgc2VhcmNoYCByb2xlLlxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdmFsdWUgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgb3BlbjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIGNsZWFyIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgICAqL1xuICAgIGNsZWFyOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IG9uIGVudGVyLlxuICAgICAqL1xuICAgIHNlYXJjaDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgaW5wdXRSZWY6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogU2V0cyBgdHJ1ZWAgd2hlbiBjb21wb3NpbmcgdGV4dCB2aWEgSU1FLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc0NvbXBvc2luZzogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3NpemU6IFwic21cIiB8IFwibWRcIiB8IFwieGxcIjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBTZWFyY2hgLlxuICAgICAqIEBwYXJhbSBpMThuIFRoZSBpMThuIHRyYW5zbGF0aW9ucy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBpMThuOiBJMThuKTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBpbml0aWFsIHZhbHVlIHNldCB0byB0aGUgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgYSBtZXRob2QgaW4gb3JkZXIgdG8gcHJvcGFnYXRlIGNoYW5nZXMgYmFjayB0byB0aGUgZm9ybS5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSBjb250cm9sIGhhcyBiZWVuIHRvdWNoZWQuXG4gICAgICogQHBhcmFtIGZuIENhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaXMgdG91Y2hlZC5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBzZWFyY2ggaW5wdXQgaXMgYmx1cnJlZC4gTmVlZGVkIHRvIHByb3Blcmx5IGltcGxlbWVudCBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLlxuICAgICAqL1xuICAgIG9uVG91Y2hlZDogKCkgPT4gYW55O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBzZXQgaW4gYHJlZ2lzdGVyT25DaGFuZ2VgIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIGJhY2sgdG8gdGhlIGZvcm0uXG4gICAgICovXG4gICAgcHJvcGFnYXRlQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRleHQgaXMgd3JpdHRlbiBpbiB0aGUgaW5wdXQuXG4gICAgICogQHBhcmFtIHNlYXJjaCBUaGUgaW5wdXQgdGV4dC5cbiAgICAgKi9cbiAgICBvblNlYXJjaChzZWFyY2g6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIG9uIGVudGVyLlxuICAgICAqL1xuICAgIG9uRW50ZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBjbGVhciBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBjbGVhclNlYXJjaCgpOiB2b2lkO1xuICAgIGRvVmFsdWVDaGFuZ2UoKTogdm9pZDtcbiAgICBvcGVuU2VhcmNoKCk6IHZvaWQ7XG4gICAga2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgZm9jdXNPdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdXNpbmcgSU1FIGNvbXBvc2l0aW9uLlxuICAgICAqL1xuICAgIGNvbXBvc2l0aW9uU3RhcnQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gSU1FIGNvbXBvc2l0aW9uIGZpbmlzaGVzLlxuICAgICAqL1xuICAgIGNvbXBvc2l0aW9uRW5kKGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19