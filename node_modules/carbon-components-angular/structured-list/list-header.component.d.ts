/**
 *
 * carbon-angular v0.0.0 | list-header.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit } from "@angular/core";
import { ListColumn } from "./list-column.component";
/**
 * `ListHeader` provides a container for the `ListColumn`s that make up the header of a structured list.
 *
 * Example:
 * ```html
 * 	<ibm-list-header>
 *		<ibm-list-column nowrap="true">Column 1</ibm-list-column>
 *		<ibm-list-column nowrap="true">Column 2</ibm-list-column>
 *		<ibm-list-column>Column 3</ibm-list-column>
 *	</ibm-list-header>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ListHeader implements AfterContentInit {
    wrapper: boolean;
    skeleton: any;
    columns: QueryList<ListColumn>;
    /**
     * Set by the containing `StructuredList`. Adds a dummy header for the selection column when set to true.
     */
    selection: boolean;
    protected _skeleton: boolean;
    ngAfterContentInit(): void;
    protected updateChildren(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ListHeader, "ibm-list-header", never, {
    "skeleton": "skeleton";
}, {}, ["columns"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1oZWFkZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImxpc3QtaGVhZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7Ozs7Ozs7Ozs7Ozs7O0FBV0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBsaXN0LWhlYWRlci5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IExpc3RDb2x1bW4gfSBmcm9tIFwiLi9saXN0LWNvbHVtbi5jb21wb25lbnRcIjtcbi8qKlxuICogYExpc3RIZWFkZXJgIHByb3ZpZGVzIGEgY29udGFpbmVyIGZvciB0aGUgYExpc3RDb2x1bW5gcyB0aGF0IG1ha2UgdXAgdGhlIGhlYWRlciBvZiBhIHN0cnVjdHVyZWQgbGlzdC5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgaHRtbFxuICogXHQ8aWJtLWxpc3QtaGVhZGVyPlxuICpcdFx0PGlibS1saXN0LWNvbHVtbiBub3dyYXA9XCJ0cnVlXCI+Q29sdW1uIDE8L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdDxpYm0tbGlzdC1jb2x1bW4gbm93cmFwPVwidHJ1ZVwiPkNvbHVtbiAyPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHQ8aWJtLWxpc3QtY29sdW1uPkNvbHVtbiAzPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0PC9pYm0tbGlzdC1oZWFkZXI+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGlzdEhlYWRlciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIHdyYXBwZXI6IGJvb2xlYW47XG4gICAgc2tlbGV0b246IGFueTtcbiAgICBjb2x1bW5zOiBRdWVyeUxpc3Q8TGlzdENvbHVtbj47XG4gICAgLyoqXG4gICAgICogU2V0IGJ5IHRoZSBjb250YWluaW5nIGBTdHJ1Y3R1cmVkTGlzdGAuIEFkZHMgYSBkdW1teSBoZWFkZXIgZm9yIHRoZSBzZWxlY3Rpb24gY29sdW1uIHdoZW4gc2V0IHRvIHRydWUuXG4gICAgICovXG4gICAgc2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfc2tlbGV0b246IGJvb2xlYW47XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUNoaWxkcmVuKCk6IHZvaWQ7XG59XG4iXX0=