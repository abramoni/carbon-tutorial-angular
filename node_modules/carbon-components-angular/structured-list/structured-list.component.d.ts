/**
 *
 * carbon-angular v0.0.0 | structured-list.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, EventEmitter } from "@angular/core";
import { ListRow } from "./list-row.component";
import { ListHeader } from "./list-header.component";
import { ControlValueAccessor } from "@angular/forms";
/**
 * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.
 *
 * [See demo](../../?path=/story/components-structured-list--basic)
 *
 * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.
 *
 * A basic structued list looks something like:
 * ```html
 *	<ibm-structured-list>
 *		<ibm-list-header>
 *			<ibm-list-column nowrap="true">Column 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Column 2</ibm-list-column>
 *			<ibm-list-column>Column 3</ibm-list-column>
 *		</ibm-list-header>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 1</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row One</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *		<ibm-list-row>
 *			<ibm-list-column>Row 2</ibm-list-column>
 *			<ibm-list-column nowrap="true">Row Two</ibm-list-column>
 *			<ibm-list-column>
 *				Lorem ipsum dolor sit amet,
 *				consectetur adipiscing elit. Nunc dui magna,
 *				finibus id tortor sed, aliquet bibendum augue.
 *				Aenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.
 *				Pellentesque vulputate nisl a porttitor interdum.
 *			</ibm-list-column>
 *		</ibm-list-row>
 *	</ibm-structured-list>
 * ```
 *
 * <example-url>../../iframe.html?id=components-structured-list--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class StructuredList implements AfterContentInit, ControlValueAccessor {
    /**
     * A counter to provide unique default values.
     */
    static listCount: number;
    /**
     * Set to `true` to enable radio like selection of the rows.
     */
    selection: boolean;
    /**
     * Set to `true` to apply a border and white background.
     */
    border: boolean;
    /**
     * Set to `true` to apply a condensed style to the headers and rows.
     */
    condensed: boolean;
    /**
     * Set to `true` to apply `white-space: nowrap` on _all_ conent.
     */
    nowrap: boolean;
    /**
     * Used when `selection = true` as the row radio group `name`
     */
    name: string;
    /**
     * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.
     */
    /**
    * Returns the skeleton value in the `StructuredList` if there is one.
    */
    skeleton: any;
    /**
     * Emits an event when the row selection changes.
     *
     * Emits an object that looks like:
     * ```javascript
     * {
     * 	value: "something",
     * 	selected: true,
     * 	name: "structured-list-1"
     * }
     * ```
     */
    selected: EventEmitter<{
        value: string;
        selected: boolean;
        name: string;
    }>;
    rows: QueryList<ListRow>;
    headers: QueryList<ListHeader>;
    protected _skeleton: boolean;
    onChange: (_: any) => void;
    onTouched: () => void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    protected updateChildren(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StructuredList>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StructuredList, "ibm-structured-list", never, {
    "selection": "selection";
    "border": "border";
    "condensed": "condensed";
    "nowrap": "nowrap";
    "name": "name";
    "skeleton": "skeleton";
}, {
    "selected": "selected";
}, ["rows", "headers"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlZC1saXN0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzdHJ1Y3R1cmVkLWxpc3QuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyREEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBzdHJ1Y3R1cmVkLWxpc3QuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IExpc3RSb3cgfSBmcm9tIFwiLi9saXN0LXJvdy5jb21wb25lbnRcIjtcbmltcG9ydCB7IExpc3RIZWFkZXIgfSBmcm9tIFwiLi9saXN0LWhlYWRlci5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG4vKipcbiAqIFN0cnVjdHVyZWQgTGlzdHMgcmVwcmVzZW50IHJlbGF0ZWQgdGFidWxhciBkYXRhLiBGb3IgbGFyZ2VyIGRhdGFzZXRzIGNvbnNpZGVyIGEgZnVsbCBgVGFibGVgLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtc3RydWN0dXJlZC1saXN0LS1iYXNpYylcbiAqXG4gKiBTZWUgW3N0cnVjdHVyZWQtbGlzdC91c2FnZV0oaHR0cHM6Ly93d3cuY2FyYm9uZGVzaWduc3lzdGVtLmNvbS9jb21wb25lbnRzL3N0cnVjdHVyZWQtbGlzdC91c2FnZSkgZm9yIHVzYWdlIGd1aWRhbmNlLlxuICpcbiAqIEEgYmFzaWMgc3RydWN0dWVkIGxpc3QgbG9va3Mgc29tZXRoaW5nIGxpa2U6XG4gKiBgYGBodG1sXG4gKlx0PGlibS1zdHJ1Y3R1cmVkLWxpc3Q+XG4gKlx0XHQ8aWJtLWxpc3QtaGVhZGVyPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uIG5vd3JhcD1cInRydWVcIj5Db2x1bW4gMTwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uIG5vd3JhcD1cInRydWVcIj5Db2x1bW4gMjwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uPkNvbHVtbiAzPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHQ8L2libS1saXN0LWhlYWRlcj5cbiAqXHRcdDxpYm0tbGlzdC1yb3c+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4+Um93IDE8L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdFx0PGlibS1saXN0LWNvbHVtbiBub3dyYXA9XCJ0cnVlXCI+Um93IE9uZTwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uPlxuICpcdFx0XHRcdExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LFxuICpcdFx0XHRcdGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTnVuYyBkdWkgbWFnbmEsXG4gKlx0XHRcdFx0ZmluaWJ1cyBpZCB0b3J0b3Igc2VkLCBhbGlxdWV0IGJpYmVuZHVtIGF1Z3VlLlxuICpcdFx0XHRcdEFlbmVhbiBwb3N1ZXJlIHNlbSB2ZWwgZXVpc21vZCBkaWduaXNzaW0uIE51bGxhIHV0IGN1cnN1cyBkb2xvci5cbiAqXHRcdFx0XHRQZWxsZW50ZXNxdWUgdnVscHV0YXRlIG5pc2wgYSBwb3J0dGl0b3IgaW50ZXJkdW0uXG4gKlx0XHRcdDwvaWJtLWxpc3QtY29sdW1uPlxuICpcdFx0PC9pYm0tbGlzdC1yb3c+XG4gKlx0XHQ8aWJtLWxpc3Qtcm93PlxuICpcdFx0XHQ8aWJtLWxpc3QtY29sdW1uPlJvdyAyPC9pYm0tbGlzdC1jb2x1bW4+XG4gKlx0XHRcdDxpYm0tbGlzdC1jb2x1bW4gbm93cmFwPVwidHJ1ZVwiPlJvdyBUd288L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdFx0PGlibS1saXN0LWNvbHVtbj5cbiAqXHRcdFx0XHRMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCxcbiAqXHRcdFx0XHRjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIE51bmMgZHVpIG1hZ25hLFxuICpcdFx0XHRcdGZpbmlidXMgaWQgdG9ydG9yIHNlZCwgYWxpcXVldCBiaWJlbmR1bSBhdWd1ZS5cbiAqXHRcdFx0XHRBZW5lYW4gcG9zdWVyZSBzZW0gdmVsIGV1aXNtb2QgZGlnbmlzc2ltLiBOdWxsYSB1dCBjdXJzdXMgZG9sb3IuXG4gKlx0XHRcdFx0UGVsbGVudGVzcXVlIHZ1bHB1dGF0ZSBuaXNsIGEgcG9ydHRpdG9yIGludGVyZHVtLlxuICpcdFx0XHQ8L2libS1saXN0LWNvbHVtbj5cbiAqXHRcdDwvaWJtLWxpc3Qtcm93PlxuICpcdDwvaWJtLXN0cnVjdHVyZWQtbGlzdD5cbiAqIGBgYFxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLXN0cnVjdHVyZWQtbGlzdC0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdHJ1Y3R1cmVkTGlzdCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBBIGNvdW50ZXIgdG8gcHJvdmlkZSB1bmlxdWUgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICovXG4gICAgc3RhdGljIGxpc3RDb3VudDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZW5hYmxlIHJhZGlvIGxpa2Ugc2VsZWN0aW9uIG9mIHRoZSByb3dzLlxuICAgICAqL1xuICAgIHNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGEgYm9yZGVyIGFuZCB3aGl0ZSBiYWNrZ3JvdW5kLlxuICAgICAqL1xuICAgIGJvcmRlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGEgY29uZGVuc2VkIHN0eWxlIHRvIHRoZSBoZWFkZXJzIGFuZCByb3dzLlxuICAgICAqL1xuICAgIGNvbmRlbnNlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGFwcGx5IGB3aGl0ZS1zcGFjZTogbm93cmFwYCBvbiBfYWxsXyBjb25lbnQuXG4gICAgICovXG4gICAgbm93cmFwOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFVzZWQgd2hlbiBgc2VsZWN0aW9uID0gdHJ1ZWAgYXMgdGhlIHJvdyByYWRpbyBncm91cCBgbmFtZWBcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2tlbGV0b24gdmFsdWUgZm9yIGFsbCBgTGlzdEhlYWRlcmAgdG8gdGhlIHNrZWxldG9uIHZhbHVlIG9mIGBTdHJ1Y3R1cmVkTGlzdGAuXG4gICAgICovXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBza2VsZXRvbiB2YWx1ZSBpbiB0aGUgYFN0cnVjdHVyZWRMaXN0YCBpZiB0aGVyZSBpcyBvbmUuXG4gICAgKi9cbiAgICBza2VsZXRvbjogYW55O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIHJvdyBzZWxlY3Rpb24gY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEVtaXRzIGFuIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIHtcbiAgICAgKiBcdHZhbHVlOiBcInNvbWV0aGluZ1wiLFxuICAgICAqIFx0c2VsZWN0ZWQ6IHRydWUsXG4gICAgICogXHRuYW1lOiBcInN0cnVjdHVyZWQtbGlzdC0xXCJcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcm93czogUXVlcnlMaXN0PExpc3RSb3c+O1xuICAgIGhlYWRlcnM6IFF1ZXJ5TGlzdDxMaXN0SGVhZGVyPjtcbiAgICBwcm90ZWN0ZWQgX3NrZWxldG9uOiBib29sZWFuO1xuICAgIG9uQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkO1xuICAgIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUNoaWxkcmVuKCk6IHZvaWQ7XG59XG4iXX0=