/**
 *
 * carbon-angular v0.0.0 | button.directive.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { OnInit } from "@angular/core";
import { ButtonSize, ButtonType } from "./button.types";
/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/components-button--basic)
 *
 * Example:
 *
 * ```html
 * <button ibmButton>A button</button>
 * <button ibmButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 *
 * <example-url>../../iframe.html?id=components-button--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Button implements OnInit {
    /**
     * sets the button type
     */
    ibmButton: ButtonType;
    /**
     * Specify the size of the button
     */
    size: ButtonSize;
    /**
     * If assistive text is used, this specifies the placement.
     * Possible placements are `top`, `bottom`, `left`, `right`.
     * If assistive text is not used, this can be left undefined.
     */
    assistiveTextPlacement: "top" | "bottom" | "left" | "right";
    /**
     * If assistive text is used, this specifies the alignment.
     * Possible alignments are `center`, `start`, `end`.
     * If assistive text is not used, this can be left undefined.
     */
    assistiveTextAlignment: "center" | "start" | "end";
    /**
     * Set to `true` for a skeleton state button
     */
    skeleton: boolean;
    /**
     * Set to `true` if the button contains only an icon, and a span with `.bx--assistive-text` containing the content
     * For example:
     *
     * <button ibmButton="primary" [iconOnly]="true" [hasAssistiveText]="true">
     *    <svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
     *    <span class="bx--assistive-text">Icon description</span>
     * </button>
     */
    iconOnly: boolean;
    /**
     * Set to `true` for a "expressive" style button
     */
    isExpressive: boolean;
    readonly baseClass: boolean;
    readonly primaryButton: boolean;
    readonly secondaryButton: boolean;
    readonly tertiaryButton: boolean;
    readonly ghostButton: boolean;
    readonly dangerButton: boolean;
    readonly dangerTertiary: boolean;
    readonly dangerGhost: boolean;
    readonly smallSize: boolean;
    readonly largeSize: boolean;
    readonly extraLargeSize: boolean;
    readonly fieldSize: boolean;
    toolbarAction: boolean;
    overflowMenu: boolean;
    /**
     * `hasAssistiveText` input specifies whether the button contains assistive text or not.
     * Assistive text can be utilized as follows:
     * ```typescript
     *	<button
     *		ibmButton="tertiary"
     *		[iconOnly]="true"
     *		[hasAssistiveText]="true"
     *		assistiveTextPlacement="top"
     *		assistiveTextAlignment="center">
     *		<svg class="bx--btn__icon" ibmIcon="copy" size="20"></svg>
     *		<span class="bx--assistive-text">Icon description</span>
     *	</button>
     * ```
     */
    hasAssistiveText: boolean;
    readonly isAssistiveTextCenterAligned: boolean;
    readonly isAssistiveTextStartAligned: boolean;
    readonly isAssistiveTextEndAligned: boolean;
    readonly isAssistiveTextTopPositioned: boolean;
    readonly isAssistiveTextBottomPositioned: boolean;
    readonly isAssistiveTextLeftPositioned: boolean;
    readonly isAssistiveTextRightPositioned: boolean;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Button>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Button, "[ibmButton]", never, {
    "ibmButton": "ibmButton";
    "assistiveTextPlacement": "assistiveTextPlacement";
    "assistiveTextAlignment": "assistiveTextAlignment";
    "skeleton": "skeleton";
    "iconOnly": "iconOnly";
    "isExpressive": "isExpressive";
    "hasAssistiveText": "hasAssistiveText";
    "size": "size";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJidXR0b24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGJ1dHRvbi5kaXJlY3RpdmUuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJ1dHRvblNpemUsIEJ1dHRvblR5cGUgfSBmcm9tIFwiLi9idXR0b24udHlwZXNcIjtcbi8qKlxuICogQSBjb252ZW5pZW5jZSBkaXJlY3RpdmUgZm9yIGFwcGx5aW5nIHN0eWxpbmcgdG8gYSBidXR0b24uXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1idXR0b24tLWJhc2ljKVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPGJ1dHRvbiBpYm1CdXR0b24+QSBidXR0b248L2J1dHRvbj5cbiAqIDxidXR0b24gaWJtQnV0dG9uPVwic2Vjb25kYXJ5XCI+QSBzZWNvbmRhcnkgYnV0dG9uPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIFt2YW5pbGxhIGNhcmJvbiBkb2NzXShodHRwOi8vd3d3LmNhcmJvbmRlc2lnbnN5c3RlbS5jb20vY29tcG9uZW50cy9idXR0b24vY29kZSkgZm9yIG1vcmUgZGV0YWlsLlxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLWJ1dHRvbi0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCdXR0b24gaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIGJ1dHRvbiB0eXBlXG4gICAgICovXG4gICAgaWJtQnV0dG9uOiBCdXR0b25UeXBlO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIHNpemUgb2YgdGhlIGJ1dHRvblxuICAgICAqL1xuICAgIHNpemU6IEJ1dHRvblNpemU7XG4gICAgLyoqXG4gICAgICogSWYgYXNzaXN0aXZlIHRleHQgaXMgdXNlZCwgdGhpcyBzcGVjaWZpZXMgdGhlIHBsYWNlbWVudC5cbiAgICAgKiBQb3NzaWJsZSBwbGFjZW1lbnRzIGFyZSBgdG9wYCwgYGJvdHRvbWAsIGBsZWZ0YCwgYHJpZ2h0YC5cbiAgICAgKiBJZiBhc3Npc3RpdmUgdGV4dCBpcyBub3QgdXNlZCwgdGhpcyBjYW4gYmUgbGVmdCB1bmRlZmluZWQuXG4gICAgICovXG4gICAgYXNzaXN0aXZlVGV4dFBsYWNlbWVudDogXCJ0b3BcIiB8IFwiYm90dG9tXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIjtcbiAgICAvKipcbiAgICAgKiBJZiBhc3Npc3RpdmUgdGV4dCBpcyB1c2VkLCB0aGlzIHNwZWNpZmllcyB0aGUgYWxpZ25tZW50LlxuICAgICAqIFBvc3NpYmxlIGFsaWdubWVudHMgYXJlIGBjZW50ZXJgLCBgc3RhcnRgLCBgZW5kYC5cbiAgICAgKiBJZiBhc3Npc3RpdmUgdGV4dCBpcyBub3QgdXNlZCwgdGhpcyBjYW4gYmUgbGVmdCB1bmRlZmluZWQuXG4gICAgICovXG4gICAgYXNzaXN0aXZlVGV4dEFsaWdubWVudDogXCJjZW50ZXJcIiB8IFwic3RhcnRcIiB8IFwiZW5kXCI7XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBmb3IgYSBza2VsZXRvbiBzdGF0ZSBidXR0b25cbiAgICAgKi9cbiAgICBza2VsZXRvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIGlmIHRoZSBidXR0b24gY29udGFpbnMgb25seSBhbiBpY29uLCBhbmQgYSBzcGFuIHdpdGggYC5ieC0tYXNzaXN0aXZlLXRleHRgIGNvbnRhaW5pbmcgdGhlIGNvbnRlbnRcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIDxidXR0b24gaWJtQnV0dG9uPVwicHJpbWFyeVwiIFtpY29uT25seV09XCJ0cnVlXCIgW2hhc0Fzc2lzdGl2ZVRleHRdPVwidHJ1ZVwiPlxuICAgICAqICAgIDxzdmcgY2xhc3M9XCJieC0tYnRuX19pY29uXCIgaWJtSWNvbkNvcHkgc2l6ZT1cIjIwXCI+PC9zdmc+XG4gICAgICogICAgPHNwYW4gY2xhc3M9XCJieC0tYXNzaXN0aXZlLXRleHRcIj5JY29uIGRlc2NyaXB0aW9uPC9zcGFuPlxuICAgICAqIDwvYnV0dG9uPlxuICAgICAqL1xuICAgIGljb25Pbmx5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgZm9yIGEgXCJleHByZXNzaXZlXCIgc3R5bGUgYnV0dG9uXG4gICAgICovXG4gICAgaXNFeHByZXNzaXZlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGJhc2VDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBwcmltYXJ5QnV0dG9uOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNlY29uZGFyeUJ1dHRvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSB0ZXJ0aWFyeUJ1dHRvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBnaG9zdEJ1dHRvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBkYW5nZXJCdXR0b246IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGFuZ2VyVGVydGlhcnk6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGFuZ2VyR2hvc3Q6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc21hbGxTaXplOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGxhcmdlU2l6ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBleHRyYUxhcmdlU2l6ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBmaWVsZFNpemU6IGJvb2xlYW47XG4gICAgdG9vbGJhckFjdGlvbjogYm9vbGVhbjtcbiAgICBvdmVyZmxvd01lbnU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogYGhhc0Fzc2lzdGl2ZVRleHRgIGlucHV0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBidXR0b24gY29udGFpbnMgYXNzaXN0aXZlIHRleHQgb3Igbm90LlxuICAgICAqIEFzc2lzdGl2ZSB0ZXh0IGNhbiBiZSB1dGlsaXplZCBhcyBmb2xsb3dzOlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKlx0PGJ1dHRvblxuICAgICAqXHRcdGlibUJ1dHRvbj1cInRlcnRpYXJ5XCJcbiAgICAgKlx0XHRbaWNvbk9ubHldPVwidHJ1ZVwiXG4gICAgICpcdFx0W2hhc0Fzc2lzdGl2ZVRleHRdPVwidHJ1ZVwiXG4gICAgICpcdFx0YXNzaXN0aXZlVGV4dFBsYWNlbWVudD1cInRvcFwiXG4gICAgICpcdFx0YXNzaXN0aXZlVGV4dEFsaWdubWVudD1cImNlbnRlclwiPlxuICAgICAqXHRcdDxzdmcgY2xhc3M9XCJieC0tYnRuX19pY29uXCIgaWJtSWNvbj1cImNvcHlcIiBzaXplPVwiMjBcIj48L3N2Zz5cbiAgICAgKlx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1hc3Npc3RpdmUtdGV4dFwiPkljb24gZGVzY3JpcHRpb248L3NwYW4+XG4gICAgICpcdDwvYnV0dG9uPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGhhc0Fzc2lzdGl2ZVRleHQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNBc3Npc3RpdmVUZXh0Q2VudGVyQWxpZ25lZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0Fzc2lzdGl2ZVRleHRTdGFydEFsaWduZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNBc3Npc3RpdmVUZXh0RW5kQWxpZ25lZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0Fzc2lzdGl2ZVRleHRUb3BQb3NpdGlvbmVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzQXNzaXN0aXZlVGV4dEJvdHRvbVBvc2l0aW9uZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNBc3Npc3RpdmVUZXh0TGVmdFBvc2l0aW9uZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNBc3Npc3RpdmVUZXh0UmlnaHRQb3NpdGlvbmVkOiBib29sZWFuO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG59XG4iXX0=