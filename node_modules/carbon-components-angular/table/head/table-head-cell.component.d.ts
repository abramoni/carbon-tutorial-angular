/**
 *
 * carbon-angular v0.0.0 | table-head-cell.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, OnChanges } from "@angular/core";
import { Observable, OperatorFunction } from "rxjs";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { TableHeaderItem } from "../table-header-item.class";
import * as ɵngcc0 from '@angular/core';
export declare class TableHeadCell implements OnChanges {
    protected i18n: I18n;
    column: TableHeaderItem;
    skeleton: boolean;
    sortable: boolean;
    sortDescendingLabel: string | Observable<string>;
    sortAscendingLabel: string | Observable<string>;
    filterTitle: string | Observable<string>;
    /**
     * Notifies that the column should be sorted
     */
    sort: EventEmitter<{}>;
    theadAction: boolean;
    protected _sortDescendingLabel: Overridable;
    protected _sortAscendingLabel: Overridable;
    protected _filterTitle: Overridable;
    constructor(i18n: I18n);
    ngOnChanges(): void;
    getSortDescendingLabel(): Observable<string>;
    getSortAscendingLabel(): Observable<string>;
    getFilterTitle(): Observable<string>;
    onClick(): void;
    protected sortLabelMap(): OperatorFunction<string, string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableHeadCell>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableHeadCell, "[ibmTableHeadCell]", never, {
    "skeleton": "skeleton";
    "sortable": "sortable";
    "sortDescendingLabel": "sortDescendingLabel";
    "sortAscendingLabel": "sortAscendingLabel";
    "filterTitle": "filterTitle";
    "column": "column";
}, {
    "sort": "sort";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVhZC1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWJsZS1oZWFkLWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCB0YWJsZS1oZWFkLWNlbGwuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIE9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBUYWJsZUhlYWRlckl0ZW0gfSBmcm9tIFwiLi4vdGFibGUtaGVhZGVyLWl0ZW0uY2xhc3NcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYmxlSGVhZENlbGwgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByb3RlY3RlZCBpMThuOiBJMThuO1xuICAgIGNvbHVtbjogVGFibGVIZWFkZXJJdGVtO1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIHNvcnRhYmxlOiBib29sZWFuO1xuICAgIHNvcnREZXNjZW5kaW5nTGFiZWw6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBzb3J0QXNjZW5kaW5nTGFiZWw6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBmaWx0ZXJUaXRsZTogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoYXQgdGhlIGNvbHVtbiBzaG91bGQgYmUgc29ydGVkXG4gICAgICovXG4gICAgc29ydDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICB0aGVhZEFjdGlvbjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3NvcnREZXNjZW5kaW5nTGFiZWw6IE92ZXJyaWRhYmxlO1xuICAgIHByb3RlY3RlZCBfc29ydEFzY2VuZGluZ0xhYmVsOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX2ZpbHRlclRpdGxlOiBPdmVycmlkYWJsZTtcbiAgICBjb25zdHJ1Y3RvcihpMThuOiBJMThuKTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIGdldFNvcnREZXNjZW5kaW5nTGFiZWwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGdldFNvcnRBc2NlbmRpbmdMYWJlbCgpOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgZ2V0RmlsdGVyVGl0bGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc29ydExhYmVsTWFwKCk6IE9wZXJhdG9yRnVuY3Rpb248c3RyaW5nLCBzdHJpbmc+O1xufVxuIl19