/**
 *
 * carbon-angular v0.0.0 | table-head.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, AfterViewInit } from "@angular/core";
import { TableModel } from "../table-model.class";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { Observable } from "rxjs";
import { TableRowSize } from "../table.types";
/**
 * A subcomponent that creates the thead of the table
 *
 * ## Basic usage
 *
 * ```html
 * 	<thead ibmTableHead [model]="model"></thead>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class TableHead implements AfterViewInit {
    protected i18n: I18n;
    model: TableModel;
    showSelectionColumn: boolean;
    enableSingleSelect: boolean;
    selectAllCheckboxSomeSelected: boolean;
    selectAllCheckbox: boolean;
    skeleton: boolean;
    stickyHeader: boolean;
    /**
     * Setting sortable to false will disable all headers including headers which are sortable. Is is
     * possible to set the sortable state on the header item to disable/enable sorting for only some headers.
     */
    sortable: boolean;
    /**
     * Size of the table rows.
     */
    size: TableRowSize;
    checkboxHeaderLabel: string | Observable<string>;
    sortDescendingLabel: string | Observable<string>;
    sortAscendingLabel: string | Observable<string>;
    filterTitle: string | Observable<string>;
    /**
     * Emits an index of the column that wants to be sorted.
     */
    sort: EventEmitter<number>;
    /**
     * Emits if all rows are selected.
     *
     * @param model
     */
    selectAll: EventEmitter<TableModel>;
    /**
     * Emits if all rows are deselected.
     *
     * @param model
     */
    deselectAll: EventEmitter<TableModel>;
    scrollbarWidth: number;
    protected _checkboxHeaderLabel: Overridable;
    protected _sortDescendingLabel: Overridable;
    protected _sortAscendingLabel: Overridable;
    protected _filterTitle: Overridable;
    constructor(i18n: I18n);
    ngAfterViewInit(): void;
    onSelectAllCheckboxChange(): void;
    getCheckboxHeaderLabel(): Observable<string>;
    getSortDescendingLabel(): Observable<string>;
    getSortAscendingLabel(): Observable<string>;
    getFilterTitle(): Observable<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableHead>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableHead, "[ibmTableHead]", never, {
    "showSelectionColumn": "showSelectionColumn";
    "enableSingleSelect": "enableSingleSelect";
    "selectAllCheckboxSomeSelected": "selectAllCheckboxSomeSelected";
    "selectAllCheckbox": "selectAllCheckbox";
    "skeleton": "skeleton";
    "stickyHeader": "stickyHeader";
    "sortable": "sortable";
    "size": "size";
    "checkboxHeaderLabel": "checkboxHeaderLabel";
    "sortDescendingLabel": "sortDescendingLabel";
    "sortAscendingLabel": "sortAscendingLabel";
    "filterTitle": "filterTitle";
    "model": "model";
}, {
    "sort": "sort";
    "selectAll": "selectAll";
    "deselectAll": "deselectAll";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVhZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFibGUtaGVhZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrREEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCB0YWJsZS1oZWFkLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgVGFibGVNb2RlbCB9IGZyb20gXCIuLi90YWJsZS1tb2RlbC5jbGFzc1wiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IFRhYmxlUm93U2l6ZSB9IGZyb20gXCIuLi90YWJsZS50eXBlc1wiO1xuLyoqXG4gKiBBIHN1YmNvbXBvbmVudCB0aGF0IGNyZWF0ZXMgdGhlIHRoZWFkIG9mIHRoZSB0YWJsZVxuICpcbiAqICMjIEJhc2ljIHVzYWdlXG4gKlxuICogYGBgaHRtbFxuICogXHQ8dGhlYWQgaWJtVGFibGVIZWFkIFttb2RlbF09XCJtb2RlbFwiPjwvdGhlYWQ+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFibGVIZWFkIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgbW9kZWw6IFRhYmxlTW9kZWw7XG4gICAgc2hvd1NlbGVjdGlvbkNvbHVtbjogYm9vbGVhbjtcbiAgICBlbmFibGVTaW5nbGVTZWxlY3Q6IGJvb2xlYW47XG4gICAgc2VsZWN0QWxsQ2hlY2tib3hTb21lU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgc2VsZWN0QWxsQ2hlY2tib3g6IGJvb2xlYW47XG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgc3RpY2t5SGVhZGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHRpbmcgc29ydGFibGUgdG8gZmFsc2Ugd2lsbCBkaXNhYmxlIGFsbCBoZWFkZXJzIGluY2x1ZGluZyBoZWFkZXJzIHdoaWNoIGFyZSBzb3J0YWJsZS4gSXMgaXNcbiAgICAgKiBwb3NzaWJsZSB0byBzZXQgdGhlIHNvcnRhYmxlIHN0YXRlIG9uIHRoZSBoZWFkZXIgaXRlbSB0byBkaXNhYmxlL2VuYWJsZSBzb3J0aW5nIGZvciBvbmx5IHNvbWUgaGVhZGVycy5cbiAgICAgKi9cbiAgICBzb3J0YWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSB0YWJsZSByb3dzLlxuICAgICAqL1xuICAgIHNpemU6IFRhYmxlUm93U2l6ZTtcbiAgICBjaGVja2JveEhlYWRlckxhYmVsOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgc29ydERlc2NlbmRpbmdMYWJlbDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIHNvcnRBc2NlbmRpbmdMYWJlbDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGZpbHRlclRpdGxlOiBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gaW5kZXggb2YgdGhlIGNvbHVtbiB0aGF0IHdhbnRzIHRvIGJlIHNvcnRlZC5cbiAgICAgKi9cbiAgICBzb3J0OiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBpZiBhbGwgcm93cyBhcmUgc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZWxcbiAgICAgKi9cbiAgICBzZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxUYWJsZU1vZGVsPjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBpZiBhbGwgcm93cyBhcmUgZGVzZWxlY3RlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbFxuICAgICAqL1xuICAgIGRlc2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8VGFibGVNb2RlbD47XG4gICAgc2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgX2NoZWNrYm94SGVhZGVyTGFiZWw6IE92ZXJyaWRhYmxlO1xuICAgIHByb3RlY3RlZCBfc29ydERlc2NlbmRpbmdMYWJlbDogT3ZlcnJpZGFibGU7XG4gICAgcHJvdGVjdGVkIF9zb3J0QXNjZW5kaW5nTGFiZWw6IE92ZXJyaWRhYmxlO1xuICAgIHByb3RlY3RlZCBfZmlsdGVyVGl0bGU6IE92ZXJyaWRhYmxlO1xuICAgIGNvbnN0cnVjdG9yKGkxOG46IEkxOG4pO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG9uU2VsZWN0QWxsQ2hlY2tib3hDaGFuZ2UoKTogdm9pZDtcbiAgICBnZXRDaGVja2JveEhlYWRlckxhYmVsKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBnZXRTb3J0RGVzY2VuZGluZ0xhYmVsKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBnZXRTb3J0QXNjZW5kaW5nTGFiZWwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGdldEZpbHRlclRpdGxlKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbn1cbiJdfQ==