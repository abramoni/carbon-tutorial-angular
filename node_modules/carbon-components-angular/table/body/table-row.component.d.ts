/**
 *
 * carbon-angular v0.0.0 | table-row.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { TableModel } from "../table-model.class";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { TableItem } from "../table-item.class";
import { Observable } from "rxjs";
import { TableRowSize } from "../table.types";
import * as ɵngcc0 from '@angular/core';
export declare class TableRowComponent {
    protected i18n: I18n;
    /**
     * `TableModel` with data the table is to display.
     */
    model: TableModel;
    row: TableItem[];
    expanded: boolean;
    expandable: boolean;
    selected: boolean;
    /**
     * Size of the table rows.
     */
    size: TableRowSize;
    /**
     * Controls whether to enable multiple or single row selection.
     */
    enableSingleSelect: boolean;
    expandButtonAriaLabel: string | Observable<string>;
    checkboxLabel: string | Observable<string>;
    /**
     * Controls whether to show the selection checkboxes column or not.
     */
    showSelectionColumn: boolean;
    /**
     * Shows or hide the checkbox in the selection column when `showSelectionColumn`
     * is set to true
     */
    showSelectionColumnCheckbox: boolean;
    /**
     * Used to populate the row selection checkbox label with a useful value if set.
     *
     * Example:
     * ```
     * <ibm-table [selectionLabelColumn]="0"></ibm-table>
     * <!-- results in aria-label="Select first column value"
     * (where "first column value" is the value of the first column in the row -->
     * ```
     */
    selectionLabelColumn: number;
    skeleton: boolean;
    /**
     * Emits when the row is selected.
     */
    selectRow: EventEmitter<{}>;
    /**
     * Emits when the row is deselected.
     */
    deselectRow: EventEmitter<{}>;
    /**
     * Emits when the row is expanded
     */
    expandRow: EventEmitter<{}>;
    /**
     * Emits when a row is clicked regardless of `enableSingleSelect` or `showSelectionColumn`.
     * Should only get emitted when a row item is selected excluding expand buttons,
     * checkboxes, or radios.
     */
    rowClick: EventEmitter<{}>;
    readonly selectedClass: boolean;
    readonly parentRowClass: boolean;
    readonly expandableRowClass: boolean;
    readonly selectableClass: boolean;
    readonly isParentRow: boolean;
    readonly isAccessible: number;
    protected _checkboxLabel: Overridable;
    protected _expandButtonAriaLabel: Overridable;
    constructor(i18n: I18n);
    onHostClick(): void;
    onRowClick(): void;
    onSelectionChange(): void;
    getCheckboxLabel(): Observable<string>;
    getExpandButtonAriaLabel(): Observable<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableRowComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableRowComponent, "[ibmTableRow]", never, {
    "expanded": "expanded";
    "expandable": "expandable";
    "selected": "selected";
    "size": "size";
    "enableSingleSelect": "enableSingleSelect";
    "showSelectionColumn": "showSelectionColumn";
    "showSelectionColumnCheckbox": "showSelectionColumnCheckbox";
    "skeleton": "skeleton";
    "expandButtonAriaLabel": "expandButtonAriaLabel";
    "checkboxLabel": "checkboxLabel";
    "model": "model";
    "row": "row";
    "selectionLabelColumn": "selectionLabelColumn";
}, {
    "selectRow": "selectRow";
    "deselectRow": "deselectRow";
    "expandRow": "expandRow";
    "rowClick": "rowClick";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWJsZS1yb3cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHRhYmxlLXJvdy5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhYmxlTW9kZWwgfSBmcm9tIFwiLi4vdGFibGUtbW9kZWwuY2xhc3NcIjtcbmltcG9ydCB7IEkxOG4sIE92ZXJyaWRhYmxlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgVGFibGVJdGVtIH0gZnJvbSBcIi4uL3RhYmxlLWl0ZW0uY2xhc3NcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgVGFibGVSb3dTaXplIH0gZnJvbSBcIi4uL3RhYmxlLnR5cGVzXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWJsZVJvd0NvbXBvbmVudCB7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgLyoqXG4gICAgICogYFRhYmxlTW9kZWxgIHdpdGggZGF0YSB0aGUgdGFibGUgaXMgdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBtb2RlbDogVGFibGVNb2RlbDtcbiAgICByb3c6IFRhYmxlSXRlbVtdO1xuICAgIGV4cGFuZGVkOiBib29sZWFuO1xuICAgIGV4cGFuZGFibGU6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2l6ZSBvZiB0aGUgdGFibGUgcm93cy5cbiAgICAgKi9cbiAgICBzaXplOiBUYWJsZVJvd1NpemU7XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgd2hldGhlciB0byBlbmFibGUgbXVsdGlwbGUgb3Igc2luZ2xlIHJvdyBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgZW5hYmxlU2luZ2xlU2VsZWN0OiBib29sZWFuO1xuICAgIGV4cGFuZEJ1dHRvbkFyaWFMYWJlbDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGNoZWNrYm94TGFiZWw6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB3aGV0aGVyIHRvIHNob3cgdGhlIHNlbGVjdGlvbiBjaGVja2JveGVzIGNvbHVtbiBvciBub3QuXG4gICAgICovXG4gICAgc2hvd1NlbGVjdGlvbkNvbHVtbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaG93cyBvciBoaWRlIHRoZSBjaGVja2JveCBpbiB0aGUgc2VsZWN0aW9uIGNvbHVtbiB3aGVuIGBzaG93U2VsZWN0aW9uQ29sdW1uYFxuICAgICAqIGlzIHNldCB0byB0cnVlXG4gICAgICovXG4gICAgc2hvd1NlbGVjdGlvbkNvbHVtbkNoZWNrYm94OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcG9wdWxhdGUgdGhlIHJvdyBzZWxlY3Rpb24gY2hlY2tib3ggbGFiZWwgd2l0aCBhIHVzZWZ1bCB2YWx1ZSBpZiBzZXQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIDxpYm0tdGFibGUgW3NlbGVjdGlvbkxhYmVsQ29sdW1uXT1cIjBcIj48L2libS10YWJsZT5cbiAgICAgKiA8IS0tIHJlc3VsdHMgaW4gYXJpYS1sYWJlbD1cIlNlbGVjdCBmaXJzdCBjb2x1bW4gdmFsdWVcIlxuICAgICAqICh3aGVyZSBcImZpcnN0IGNvbHVtbiB2YWx1ZVwiIGlzIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgY29sdW1uIGluIHRoZSByb3cgLS0+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2VsZWN0aW9uTGFiZWxDb2x1bW46IG51bWJlcjtcbiAgICBza2VsZXRvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSByb3cgaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgc2VsZWN0Um93OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gdGhlIHJvdyBpcyBkZXNlbGVjdGVkLlxuICAgICAqL1xuICAgIGRlc2VsZWN0Um93OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gdGhlIHJvdyBpcyBleHBhbmRlZFxuICAgICAqL1xuICAgIGV4cGFuZFJvdzogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIGEgcm93IGlzIGNsaWNrZWQgcmVnYXJkbGVzcyBvZiBgZW5hYmxlU2luZ2xlU2VsZWN0YCBvciBgc2hvd1NlbGVjdGlvbkNvbHVtbmAuXG4gICAgICogU2hvdWxkIG9ubHkgZ2V0IGVtaXR0ZWQgd2hlbiBhIHJvdyBpdGVtIGlzIHNlbGVjdGVkIGV4Y2x1ZGluZyBleHBhbmQgYnV0dG9ucyxcbiAgICAgKiBjaGVja2JveGVzLCBvciByYWRpb3MuXG4gICAgICovXG4gICAgcm93Q2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcmVhZG9ubHkgc2VsZWN0ZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBwYXJlbnRSb3dDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBleHBhbmRhYmxlUm93Q2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc2VsZWN0YWJsZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzUGFyZW50Um93OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzQWNjZXNzaWJsZTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBfY2hlY2tib3hMYWJlbDogT3ZlcnJpZGFibGU7XG4gICAgcHJvdGVjdGVkIF9leHBhbmRCdXR0b25BcmlhTGFiZWw6IE92ZXJyaWRhYmxlO1xuICAgIGNvbnN0cnVjdG9yKGkxOG46IEkxOG4pO1xuICAgIG9uSG9zdENsaWNrKCk6IHZvaWQ7XG4gICAgb25Sb3dDbGljaygpOiB2b2lkO1xuICAgIG9uU2VsZWN0aW9uQ2hhbmdlKCk6IHZvaWQ7XG4gICAgZ2V0Q2hlY2tib3hMYWJlbCgpOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgZ2V0RXhwYW5kQnV0dG9uQXJpYUxhYmVsKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbn1cbiJdfQ==