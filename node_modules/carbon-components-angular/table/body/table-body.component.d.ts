/**
 *
 * carbon-angular v0.0.0 | table-body.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { TableModel } from "../table-model.class";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { Observable } from "rxjs";
import { TableRowSize } from "../table.types";
import * as ɵngcc0 from '@angular/core';
export declare class TableBody {
    protected i18n: I18n;
    model: TableModel;
    /**
     * Controls whether to enable multiple or single row selection.
     */
    enableSingleSelect: boolean;
    expandButtonAriaLabel: string | Observable<string>;
    checkboxRowLabel: string | Observable<string>;
    /**
     * Controls whether to show the selection checkboxes column or not.
     */
    showSelectionColumn: boolean;
    /**
     * Size of the table rows.
     */
    size: TableRowSize;
    /**
     * Used to populate the row selection checkbox label with a useful value if set.
     *
     * Example:
     * ```
     * <ibm-table [selectionLabelColumn]="0"></ibm-table>
     * <!-- results in aria-label="Select first column value"
     * (where "first column value" is the value of the first column in the row -->
     * ```
     */
    selectionLabelColumn: number;
    skeleton: boolean;
    /**
     * Emits if a single row is selected.
     *
     * @param ({model: this.model, selectedRowIndex: index})
     */
    selectRow: EventEmitter<Object>;
    /**
     * Emits if a single row is deselected.
     *
     * @param ({model: this.model, deselectedRowIndex: index})
     */
    deselectRow: EventEmitter<Object>;
    /**
     * Emits if a row item excluding expandButtons, checkboxes, or radios is clicked.
     */
    rowClick: EventEmitter<number>;
    protected _checkboxRowLabel: Overridable;
    protected _expandButtonAriaLabel: Overridable;
    constructor(i18n: I18n);
    /**
     * Triggered when a single row is clicked.
     * Updates the header checkbox state.
     * Emits the `selectRow` or `deselectRow` event.
     */
    onRowCheckboxChange(index: number): void;
    onRowClick(index: number): void;
    getCheckboxRowLabel(): Observable<string>;
    getExpandButtonAriaLabel(): Observable<string>;
    firstExpandedDataInRow(row: any): any;
    shouldExpandAsTable(row: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableBody>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableBody, "[ibmTableBody]", never, {
    "enableSingleSelect": "enableSingleSelect";
    "showSelectionColumn": "showSelectionColumn";
    "size": "size";
    "skeleton": "skeleton";
    "expandButtonAriaLabel": "expandButtonAriaLabel";
    "checkboxRowLabel": "checkboxRowLabel";
    "model": "model";
    "selectionLabelColumn": "selectionLabelColumn";
}, {
    "selectRow": "selectRow";
    "deselectRow": "deselectRow";
    "rowClick": "rowClick";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYm9keS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFibGUtYm9keS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkRBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgdGFibGUtYm9keS5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhYmxlTW9kZWwgfSBmcm9tIFwiLi4vdGFibGUtbW9kZWwuY2xhc3NcIjtcbmltcG9ydCB7IEkxOG4sIE92ZXJyaWRhYmxlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBUYWJsZVJvd1NpemUgfSBmcm9tIFwiLi4vdGFibGUudHlwZXNcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYmxlQm9keSB7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgbW9kZWw6IFRhYmxlTW9kZWw7XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgd2hldGhlciB0byBlbmFibGUgbXVsdGlwbGUgb3Igc2luZ2xlIHJvdyBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgZW5hYmxlU2luZ2xlU2VsZWN0OiBib29sZWFuO1xuICAgIGV4cGFuZEJ1dHRvbkFyaWFMYWJlbDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGNoZWNrYm94Um93TGFiZWw6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB3aGV0aGVyIHRvIHNob3cgdGhlIHNlbGVjdGlvbiBjaGVja2JveGVzIGNvbHVtbiBvciBub3QuXG4gICAgICovXG4gICAgc2hvd1NlbGVjdGlvbkNvbHVtbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSB0YWJsZSByb3dzLlxuICAgICAqL1xuICAgIHNpemU6IFRhYmxlUm93U2l6ZTtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHBvcHVsYXRlIHRoZSByb3cgc2VsZWN0aW9uIGNoZWNrYm94IGxhYmVsIHdpdGggYSB1c2VmdWwgdmFsdWUgaWYgc2V0LlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBcbiAgICAgKiA8aWJtLXRhYmxlIFtzZWxlY3Rpb25MYWJlbENvbHVtbl09XCIwXCI+PC9pYm0tdGFibGU+XG4gICAgICogPCEtLSByZXN1bHRzIGluIGFyaWEtbGFiZWw9XCJTZWxlY3QgZmlyc3QgY29sdW1uIHZhbHVlXCJcbiAgICAgKiAod2hlcmUgXCJmaXJzdCBjb2x1bW4gdmFsdWVcIiBpcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNvbHVtbiBpbiB0aGUgcm93IC0tPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkxhYmVsQ29sdW1uOiBudW1iZXI7XG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRW1pdHMgaWYgYSBzaW5nbGUgcm93IGlzIHNlbGVjdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtICh7bW9kZWw6IHRoaXMubW9kZWwsIHNlbGVjdGVkUm93SW5kZXg6IGluZGV4fSlcbiAgICAgKi9cbiAgICBzZWxlY3RSb3c6IEV2ZW50RW1pdHRlcjxPYmplY3Q+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGlmIGEgc2luZ2xlIHJvdyBpcyBkZXNlbGVjdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtICh7bW9kZWw6IHRoaXMubW9kZWwsIGRlc2VsZWN0ZWRSb3dJbmRleDogaW5kZXh9KVxuICAgICAqL1xuICAgIGRlc2VsZWN0Um93OiBFdmVudEVtaXR0ZXI8T2JqZWN0PjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBpZiBhIHJvdyBpdGVtIGV4Y2x1ZGluZyBleHBhbmRCdXR0b25zLCBjaGVja2JveGVzLCBvciByYWRpb3MgaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICByb3dDbGljazogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgcHJvdGVjdGVkIF9jaGVja2JveFJvd0xhYmVsOiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX2V4cGFuZEJ1dHRvbkFyaWFMYWJlbDogT3ZlcnJpZGFibGU7XG4gICAgY29uc3RydWN0b3IoaTE4bjogSTE4bik7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYSBzaW5nbGUgcm93IGlzIGNsaWNrZWQuXG4gICAgICogVXBkYXRlcyB0aGUgaGVhZGVyIGNoZWNrYm94IHN0YXRlLlxuICAgICAqIEVtaXRzIHRoZSBgc2VsZWN0Um93YCBvciBgZGVzZWxlY3RSb3dgIGV2ZW50LlxuICAgICAqL1xuICAgIG9uUm93Q2hlY2tib3hDaGFuZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25Sb3dDbGljayhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRDaGVja2JveFJvd0xhYmVsKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBnZXRFeHBhbmRCdXR0b25BcmlhTGFiZWwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIGZpcnN0RXhwYW5kZWREYXRhSW5Sb3cocm93OiBhbnkpOiBhbnk7XG4gICAgc2hvdWxkRXhwYW5kQXNUYWJsZShyb3c6IGFueSk6IGFueTtcbn1cbiJdfQ==