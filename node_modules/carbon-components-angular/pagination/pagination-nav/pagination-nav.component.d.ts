/**
 *
 * carbon-angular v0.0.0 | pagination-nav.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { PaginationModel } from "../pagination-model.class";
import { EventEmitter } from "@angular/core";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { ExperimentalService } from "carbon-components-angular/experimental";
import * as ɵngcc0 from '@angular/core';
export interface PaginationNavTranslations {
    NEXT: string;
    PREVIOUS: string;
}
/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/components-pagination-nav--basic)
 *
 * ```html
 * <ibm-pagination-nav [model]="model" (selectPage)="selectPage($event)"></ibm-pagination-nav>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=components-pagination-nav--basic</example-url>
 */
export declare class PaginationNav {
    protected i18n: I18n;
    protected experimental: ExperimentalService;
    static paginationCounter: number;
    /**
     * `PaginationNavModel` with the information about pages you're controlling.
     */
    model: PaginationModel;
    /**
     * Set to `true` to disable the backward/forward buttons.
     */
    disabled: boolean;
    /**
     * Number of items to show in pagination. Minimum is 4.
     */
    numOfItemsToShow: number;
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"NEXT": "Next",
     *		"PREVIOUS": "Previous",
     * }
     * ```
     */
    translations: PaginationNavTranslations;
    /**
     * Emits the new page number.
     *
     * You should tie into this and update `model.currentPage` once the fresh
     * data is finally loaded.
     */
    selectPage: EventEmitter<number>;
    readonly totalNumbersArray: number[];
    currentPage: number;
    readonly totalDataLength: number;
    readonly startOffset: 1 | 0;
    readonly frontCuts: number;
    readonly backCuts: number;
    readonly leftArrowDisabled: boolean;
    readonly rightArrowDisabled: boolean;
    nextItemText: Overridable;
    previousItemText: Overridable;
    constructor(i18n: I18n, experimental: ExperimentalService);
    handleOverflowSelection(page: any): void;
    jumpToNext(): void;
    jumpToPrevious(): void;
    getPages(): number[];
    private getCuts;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationNav>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PaginationNav, "ibm-pagination-nav", never, {
    "disabled": "disabled";
    "numOfItemsToShow": "numOfItemsToShow";
    "translations": "translations";
    "model": "model";
}, {
    "selectPage": "selectPage";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1uYXYuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBhZ2luYXRpb24tbmF2LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHBhZ2luYXRpb24tbmF2LmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi1tb2RlbC5jbGFzc1wiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEkxOG4sIE92ZXJyaWRhYmxlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgRXhwZXJpbWVudGFsU2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2V4cGVyaW1lbnRhbFwiO1xuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uTmF2VHJhbnNsYXRpb25zIHtcbiAgICBORVhUOiBzdHJpbmc7XG4gICAgUFJFVklPVVM6IHN0cmluZztcbn1cbi8qKlxuICogVXNlIHBhZ2luYXRpb24gd2hlbiB5b3UgaGF2ZSBtdWx0aXBsZSBwYWdlcyBvZiBkYXRhIHRvIGhhbmRsZS5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXBhZ2luYXRpb24tbmF2LS1iYXNpYylcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLXBhZ2luYXRpb24tbmF2IFttb2RlbF09XCJtb2RlbFwiIChzZWxlY3RQYWdlKT1cInNlbGVjdFBhZ2UoJGV2ZW50KVwiPjwvaWJtLXBhZ2luYXRpb24tbmF2PlxuICogYGBgXG4gKlxuICogSW4geW91ciBgc2VsZWN0UGFnZSgpYCBtZXRob2Qgc2V0IHRoZSBgbW9kZWwuY3VycmVudFBhZ2VgIHRvIHNlbGVjdGVkIHBhZ2UsIF9hZnRlcl9cbiAqIHlvdSBsb2FkIHRoZSBwYWdlLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHNlbGVjdFBhZ2UocGFnZSkge1xuICogXHQvLyAuLi4geW91ciBjb2RlIHRvIGxvYWQgdGhlIHBhZ2UgZ29lcyBoZXJlXG4gKlxuICogXHR0aGlzLm1vZGVsLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAqXG4gKiBcdC8vIC4uLiBhbnl0aGluZyB5b3Ugd2FudCB0byBkbyBhZnRlciBwYWdlIHNlbGVjdGlvbiBjaGFuZ2VzIGdvZXMgaGVyZVxuICogfVxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtcGFnaW5hdGlvbi1uYXYtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGFnaW5hdGlvbk5hdiB7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgcHJvdGVjdGVkIGV4cGVyaW1lbnRhbDogRXhwZXJpbWVudGFsU2VydmljZTtcbiAgICBzdGF0aWMgcGFnaW5hdGlvbkNvdW50ZXI6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBgUGFnaW5hdGlvbk5hdk1vZGVsYCB3aXRoIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBwYWdlcyB5b3UncmUgY29udHJvbGxpbmcuXG4gICAgICovXG4gICAgbW9kZWw6IFBhZ2luYXRpb25Nb2RlbDtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gYHRydWVgIHRvIGRpc2FibGUgdGhlIGJhY2t3YXJkL2ZvcndhcmQgYnV0dG9ucy5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgaXRlbXMgdG8gc2hvdyBpbiBwYWdpbmF0aW9uLiBNaW5pbXVtIGlzIDQuXG4gICAgICovXG4gICAgbnVtT2ZJdGVtc1RvU2hvdzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEV4cGVjdHMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc29tZSBvciBhbGwgb2Y6XG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqXHRcdFwiTkVYVFwiOiBcIk5leHRcIixcbiAgICAgKlx0XHRcIlBSRVZJT1VTXCI6IFwiUHJldmlvdXNcIixcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdHJhbnNsYXRpb25zOiBQYWdpbmF0aW9uTmF2VHJhbnNsYXRpb25zO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHRoZSBuZXcgcGFnZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBZb3Ugc2hvdWxkIHRpZSBpbnRvIHRoaXMgYW5kIHVwZGF0ZSBgbW9kZWwuY3VycmVudFBhZ2VgIG9uY2UgdGhlIGZyZXNoXG4gICAgICogZGF0YSBpcyBmaW5hbGx5IGxvYWRlZC5cbiAgICAgKi9cbiAgICBzZWxlY3RQYWdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICByZWFkb25seSB0b3RhbE51bWJlcnNBcnJheTogbnVtYmVyW107XG4gICAgY3VycmVudFBhZ2U6IG51bWJlcjtcbiAgICByZWFkb25seSB0b3RhbERhdGFMZW5ndGg6IG51bWJlcjtcbiAgICByZWFkb25seSBzdGFydE9mZnNldDogMSB8IDA7XG4gICAgcmVhZG9ubHkgZnJvbnRDdXRzOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgYmFja0N1dHM6IG51bWJlcjtcbiAgICByZWFkb25seSBsZWZ0QXJyb3dEaXNhYmxlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSByaWdodEFycm93RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbmV4dEl0ZW1UZXh0OiBPdmVycmlkYWJsZTtcbiAgICBwcmV2aW91c0l0ZW1UZXh0OiBPdmVycmlkYWJsZTtcbiAgICBjb25zdHJ1Y3RvcihpMThuOiBJMThuLCBleHBlcmltZW50YWw6IEV4cGVyaW1lbnRhbFNlcnZpY2UpO1xuICAgIGhhbmRsZU92ZXJmbG93U2VsZWN0aW9uKHBhZ2U6IGFueSk6IHZvaWQ7XG4gICAganVtcFRvTmV4dCgpOiB2b2lkO1xuICAgIGp1bXBUb1ByZXZpb3VzKCk6IHZvaWQ7XG4gICAgZ2V0UGFnZXMoKTogbnVtYmVyW107XG4gICAgcHJpdmF0ZSBnZXRDdXRzO1xufVxuIl19