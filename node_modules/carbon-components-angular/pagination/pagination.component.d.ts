/**
 *
 * carbon-angular v0.0.0 | pagination.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { PaginationModel } from "./pagination-model.class";
import { EventEmitter } from "@angular/core";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import { ExperimentalService } from "carbon-components-angular/experimental";
import * as ɵngcc0 from '@angular/core';
export interface PaginationTranslations {
    ITEMS_PER_PAGE: string;
    OPEN_LIST_OF_OPTIONS: string;
    BACKWARD: string;
    FORWARD: string;
    TOTAL_ITEMS_UNKNOWN: string;
    TOTAL_ITEMS: string;
    TOTAL_ITEM: string;
    OF_LAST_PAGES: string;
    OF_LAST_PAGE: string;
}
/**
 * Use pagination when you have multiple pages of data to handle.
 *
 * [See demo](../../?path=/story/components-pagination--basic)
 *
 * ```html
 * <ibm-pagination [model]="model" (selectPage)="selectPage($event)"></ibm-pagination>
 * ```
 *
 * In your `selectPage()` method set the `model.currentPage` to selected page, _after_
 * you load the page.
 *
 * ```typescript
 * selectPage(page) {
 * 	// ... your code to load the page goes here
 *
 * 	this.model.currentPage = page;
 *
 * 	// ... anything you want to do after page selection changes goes here
 * }
 * ```
 *
 * <example-url>../../iframe.html?id=components-pagination--basic</example-url>
 */
export declare class Pagination {
    protected i18n: I18n;
    protected experimental: ExperimentalService;
    static paginationCounter: number;
    /**
     * Set to `true` for a loading pagination component.
     */
    skeleton: boolean;
    /**
     * `PaginationModel` with the information about pages you're controlling.
     */
    model: PaginationModel;
    /**
     * Set to `true` to disable the backward/forward buttons.
     */
    disabled: boolean;
    /**
     * Set to `true` to disable the select box that changes the page.
     */
    pageInputDisabled: boolean;
    /**
     * Controls wether or not to show the page selects
     */
    showPageInput: boolean;
    /**
     * Set to `true` if the total number of items is unknown.
     */
    pagesUnknown: boolean;
    pageSelectThreshold: number;
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"ITEMS_PER_PAGE": "Items per page:",
     *		"OPEN_LIST_OF_OPTIONS": "Open list of options",
     *		"BACKWARD": "Backward",
     *		"FORWARD": "Forward",
     *		"TOTAL_ITEMS_UNKNOWN": "{{start}}-{{end}} items",
     *		"TOTAL_ITEMS": "{{start}}-{{end}} of {{total}} items",
     *		"TOTAL_ITEM": "{{start}}-{{end}} of {{total}} item",
     *		"OF_LAST_PAGES": "of {{last}} pages",
     *		"OF_LAST_PAGE": "of {{last}} page"
     * }
     * ```
     */
    translations: PaginationTranslations;
    /**
     * Options for items per page select
     *
     * A default array of options will be defined: [10, 20, 30, 40, 50]
     */
    itemsPerPageOptions: number[];
    /**
     * Emits the new page number.
     *
     * You should tie into this and update `model.currentPage` once the fresh
     * data is finally loaded.
     */
    selectPage: EventEmitter<number>;
    itemsPerPage: number;
    currentPage: number;
    readonly totalDataLength: number;
    /**
     * The last page number to display in the pagination view.
     */
    readonly lastPage: number;
    readonly startItemIndex: number;
    readonly endItemIndex: number;
    /**
     * The previous page number to navigate to, from the current page.
     */
    readonly previousPage: number;
    /**
     * The next page number to navigate to, from the current page.
     */
    readonly nextPage: number;
    readonly pageOptions: any[];
    itemsPerPageSelectId: string;
    currentPageSelectId: string;
    itemsPerPageText: Overridable;
    optionsListText: Overridable;
    backwardText: Overridable;
    forwardText: Overridable;
    totalItemsText: Overridable;
    totalItemText: Overridable;
    totalItemsUnknownText: Overridable;
    pageText: Overridable;
    ofLastPagesText: Overridable;
    ofLastPageText: Overridable;
    protected _pageOptions: any[];
    constructor(i18n: I18n, experimental: ExperimentalService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Pagination>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Pagination, "ibm-pagination", never, {
    "skeleton": "skeleton";
    "disabled": "disabled";
    "pageInputDisabled": "pageInputDisabled";
    "showPageInput": "showPageInput";
    "pagesUnknown": "pagesUnknown";
    "pageSelectThreshold": "pageSelectThreshold";
    "itemsPerPageOptions": "itemsPerPageOptions";
    "translations": "translations";
    "model": "model";
}, {
    "selectPage": "selectPage";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4SEEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBwYWdpbmF0aW9uLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tIFwiLi9wYWdpbmF0aW9uLW1vZGVsLmNsYXNzXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBFeHBlcmltZW50YWxTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvZXhwZXJpbWVudGFsXCI7XG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb25UcmFuc2xhdGlvbnMge1xuICAgIElURU1TX1BFUl9QQUdFOiBzdHJpbmc7XG4gICAgT1BFTl9MSVNUX09GX09QVElPTlM6IHN0cmluZztcbiAgICBCQUNLV0FSRDogc3RyaW5nO1xuICAgIEZPUldBUkQ6IHN0cmluZztcbiAgICBUT1RBTF9JVEVNU19VTktOT1dOOiBzdHJpbmc7XG4gICAgVE9UQUxfSVRFTVM6IHN0cmluZztcbiAgICBUT1RBTF9JVEVNOiBzdHJpbmc7XG4gICAgT0ZfTEFTVF9QQUdFUzogc3RyaW5nO1xuICAgIE9GX0xBU1RfUEFHRTogc3RyaW5nO1xufVxuLyoqXG4gKiBVc2UgcGFnaW5hdGlvbiB3aGVuIHlvdSBoYXZlIG11bHRpcGxlIHBhZ2VzIG9mIGRhdGEgdG8gaGFuZGxlLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtcGFnaW5hdGlvbi0tYmFzaWMpXG4gKlxuICogYGBgaHRtbFxuICogPGlibS1wYWdpbmF0aW9uIFttb2RlbF09XCJtb2RlbFwiIChzZWxlY3RQYWdlKT1cInNlbGVjdFBhZ2UoJGV2ZW50KVwiPjwvaWJtLXBhZ2luYXRpb24+XG4gKiBgYGBcbiAqXG4gKiBJbiB5b3VyIGBzZWxlY3RQYWdlKClgIG1ldGhvZCBzZXQgdGhlIGBtb2RlbC5jdXJyZW50UGFnZWAgdG8gc2VsZWN0ZWQgcGFnZSwgX2FmdGVyX1xuICogeW91IGxvYWQgdGhlIHBhZ2UuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogc2VsZWN0UGFnZShwYWdlKSB7XG4gKiBcdC8vIC4uLiB5b3VyIGNvZGUgdG8gbG9hZCB0aGUgcGFnZSBnb2VzIGhlcmVcbiAqXG4gKiBcdHRoaXMubW9kZWwuY3VycmVudFBhZ2UgPSBwYWdlO1xuICpcbiAqIFx0Ly8gLi4uIGFueXRoaW5nIHlvdSB3YW50IHRvIGRvIGFmdGVyIHBhZ2Ugc2VsZWN0aW9uIGNoYW5nZXMgZ29lcyBoZXJlXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy1wYWdpbmF0aW9uLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhZ2luYXRpb24ge1xuICAgIHByb3RlY3RlZCBpMThuOiBJMThuO1xuICAgIHByb3RlY3RlZCBleHBlcmltZW50YWw6IEV4cGVyaW1lbnRhbFNlcnZpY2U7XG4gICAgc3RhdGljIHBhZ2luYXRpb25Db3VudGVyOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBmb3IgYSBsb2FkaW5nIHBhZ2luYXRpb24gY29tcG9uZW50LlxuICAgICAqL1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIGBQYWdpbmF0aW9uTW9kZWxgIHdpdGggdGhlIGluZm9ybWF0aW9uIGFib3V0IHBhZ2VzIHlvdSdyZSBjb250cm9sbGluZy5cbiAgICAgKi9cbiAgICBtb2RlbDogUGFnaW5hdGlvbk1vZGVsO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZGlzYWJsZSB0aGUgYmFja3dhcmQvZm9yd2FyZCBidXR0b25zLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZGlzYWJsZSB0aGUgc2VsZWN0IGJveCB0aGF0IGNoYW5nZXMgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgcGFnZUlucHV0RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgd2V0aGVyIG9yIG5vdCB0byBzaG93IHRoZSBwYWdlIHNlbGVjdHNcbiAgICAgKi9cbiAgICBzaG93UGFnZUlucHV0OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgaWYgdGhlIHRvdGFsIG51bWJlciBvZiBpdGVtcyBpcyB1bmtub3duLlxuICAgICAqL1xuICAgIHBhZ2VzVW5rbm93bjogYm9vbGVhbjtcbiAgICBwYWdlU2VsZWN0VGhyZXNob2xkOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRXhwZWN0cyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBzb21lIG9yIGFsbCBvZjpcbiAgICAgKiBgYGBcbiAgICAgKiB7XG4gICAgICpcdFx0XCJJVEVNU19QRVJfUEFHRVwiOiBcIkl0ZW1zIHBlciBwYWdlOlwiLFxuICAgICAqXHRcdFwiT1BFTl9MSVNUX09GX09QVElPTlNcIjogXCJPcGVuIGxpc3Qgb2Ygb3B0aW9uc1wiLFxuICAgICAqXHRcdFwiQkFDS1dBUkRcIjogXCJCYWNrd2FyZFwiLFxuICAgICAqXHRcdFwiRk9SV0FSRFwiOiBcIkZvcndhcmRcIixcbiAgICAgKlx0XHRcIlRPVEFMX0lURU1TX1VOS05PV05cIjogXCJ7e3N0YXJ0fX0te3tlbmR9fSBpdGVtc1wiLFxuICAgICAqXHRcdFwiVE9UQUxfSVRFTVNcIjogXCJ7e3N0YXJ0fX0te3tlbmR9fSBvZiB7e3RvdGFsfX0gaXRlbXNcIixcbiAgICAgKlx0XHRcIlRPVEFMX0lURU1cIjogXCJ7e3N0YXJ0fX0te3tlbmR9fSBvZiB7e3RvdGFsfX0gaXRlbVwiLFxuICAgICAqXHRcdFwiT0ZfTEFTVF9QQUdFU1wiOiBcIm9mIHt7bGFzdH19IHBhZ2VzXCIsXG4gICAgICpcdFx0XCJPRl9MQVNUX1BBR0VcIjogXCJvZiB7e2xhc3R9fSBwYWdlXCJcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdHJhbnNsYXRpb25zOiBQYWdpbmF0aW9uVHJhbnNsYXRpb25zO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZm9yIGl0ZW1zIHBlciBwYWdlIHNlbGVjdFxuICAgICAqXG4gICAgICogQSBkZWZhdWx0IGFycmF5IG9mIG9wdGlvbnMgd2lsbCBiZSBkZWZpbmVkOiBbMTAsIDIwLCAzMCwgNDAsIDUwXVxuICAgICAqL1xuICAgIGl0ZW1zUGVyUGFnZU9wdGlvbnM6IG51bWJlcltdO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHRoZSBuZXcgcGFnZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBZb3Ugc2hvdWxkIHRpZSBpbnRvIHRoaXMgYW5kIHVwZGF0ZSBgbW9kZWwuY3VycmVudFBhZ2VgIG9uY2UgdGhlIGZyZXNoXG4gICAgICogZGF0YSBpcyBmaW5hbGx5IGxvYWRlZC5cbiAgICAgKi9cbiAgICBzZWxlY3RQYWdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBpdGVtc1BlclBhZ2U6IG51bWJlcjtcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHRvdGFsRGF0YUxlbmd0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBsYXN0IHBhZ2UgbnVtYmVyIHRvIGRpc3BsYXkgaW4gdGhlIHBhZ2luYXRpb24gdmlldy5cbiAgICAgKi9cbiAgICByZWFkb25seSBsYXN0UGFnZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHN0YXJ0SXRlbUluZGV4OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgZW5kSXRlbUluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHByZXZpb3VzIHBhZ2UgbnVtYmVyIHRvIG5hdmlnYXRlIHRvLCBmcm9tIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJldmlvdXNQYWdlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG5leHQgcGFnZSBudW1iZXIgdG8gbmF2aWdhdGUgdG8sIGZyb20gdGhlIGN1cnJlbnQgcGFnZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXh0UGFnZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHBhZ2VPcHRpb25zOiBhbnlbXTtcbiAgICBpdGVtc1BlclBhZ2VTZWxlY3RJZDogc3RyaW5nO1xuICAgIGN1cnJlbnRQYWdlU2VsZWN0SWQ6IHN0cmluZztcbiAgICBpdGVtc1BlclBhZ2VUZXh0OiBPdmVycmlkYWJsZTtcbiAgICBvcHRpb25zTGlzdFRleHQ6IE92ZXJyaWRhYmxlO1xuICAgIGJhY2t3YXJkVGV4dDogT3ZlcnJpZGFibGU7XG4gICAgZm9yd2FyZFRleHQ6IE92ZXJyaWRhYmxlO1xuICAgIHRvdGFsSXRlbXNUZXh0OiBPdmVycmlkYWJsZTtcbiAgICB0b3RhbEl0ZW1UZXh0OiBPdmVycmlkYWJsZTtcbiAgICB0b3RhbEl0ZW1zVW5rbm93blRleHQ6IE92ZXJyaWRhYmxlO1xuICAgIHBhZ2VUZXh0OiBPdmVycmlkYWJsZTtcbiAgICBvZkxhc3RQYWdlc1RleHQ6IE92ZXJyaWRhYmxlO1xuICAgIG9mTGFzdFBhZ2VUZXh0OiBPdmVycmlkYWJsZTtcbiAgICBwcm90ZWN0ZWQgX3BhZ2VPcHRpb25zOiBhbnlbXTtcbiAgICBjb25zdHJ1Y3RvcihpMThuOiBJMThuLCBleHBlcmltZW50YWw6IEV4cGVyaW1lbnRhbFNlcnZpY2UpO1xufVxuIl19