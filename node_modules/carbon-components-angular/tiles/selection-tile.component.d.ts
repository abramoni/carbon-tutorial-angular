/**
 *
 * carbon-angular v0.0.0 | selection-tile.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, AfterViewInit } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import * as ɵngcc0 from '@angular/core';
export declare class SelectionTile implements AfterViewInit {
    i18n: I18n;
    static tileCount: number;
    /**
     * The unique id for the input.
     */
    id: string;
    /**
     * Updating the state of the input to match the state of the parameter passed in.
     * Set to `true` if this tile should be selected.
     */
    selected: boolean;
    /**
     * The value for the tile. Returned via `ngModel` or `selected` event on the containing `TileGroup`.
     */
    value: string;
    /**
     * Internal event used to notify the containing `TileGroup` of changes.
     */
    change: EventEmitter<Event>;
    /**
     * Set by the containing `TileGroup`. Used for the `name` property on the input.
     */
    name: string;
    /**
     * Defines whether or not the `SelectionTile` supports selecting multiple tiles as opposed to single
     * tile selection.
     */
    multiple: boolean;
    input: any;
    protected _selected: any;
    constructor(i18n: I18n);
    ngAfterViewInit(): void;
    keyboardInput(event: any): void;
    onChange(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectionTile>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SelectionTile, "ibm-selection-tile", never, {
    "id": "id";
    "selected": "selected";
    "value": "value";
}, {
    "change": "change";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLXRpbGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNlbGVjdGlvbi10aWxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1DQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHNlbGVjdGlvbi10aWxlLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdGlvblRpbGUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBpMThuOiBJMThuO1xuICAgIHN0YXRpYyB0aWxlQ291bnQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIGlkIGZvciB0aGUgaW5wdXQuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBVcGRhdGluZyB0aGUgc3RhdGUgb2YgdGhlIGlucHV0IHRvIG1hdGNoIHRoZSBzdGF0ZSBvZiB0aGUgcGFyYW1ldGVyIHBhc3NlZCBpbi5cbiAgICAgKiBTZXQgdG8gYHRydWVgIGlmIHRoaXMgdGlsZSBzaG91bGQgYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGZvciB0aGUgdGlsZS4gUmV0dXJuZWQgdmlhIGBuZ01vZGVsYCBvciBgc2VsZWN0ZWRgIGV2ZW50IG9uIHRoZSBjb250YWluaW5nIGBUaWxlR3JvdXBgLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZXZlbnQgdXNlZCB0byBub3RpZnkgdGhlIGNvbnRhaW5pbmcgYFRpbGVHcm91cGAgb2YgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxFdmVudD47XG4gICAgLyoqXG4gICAgICogU2V0IGJ5IHRoZSBjb250YWluaW5nIGBUaWxlR3JvdXBgLiBVc2VkIGZvciB0aGUgYG5hbWVgIHByb3BlcnR5IG9uIHRoZSBpbnB1dC5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGUgYFNlbGVjdGlvblRpbGVgIHN1cHBvcnRzIHNlbGVjdGluZyBtdWx0aXBsZSB0aWxlcyBhcyBvcHBvc2VkIHRvIHNpbmdsZVxuICAgICAqIHRpbGUgc2VsZWN0aW9uLlxuICAgICAqL1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIGlucHV0OiBhbnk7XG4gICAgcHJvdGVjdGVkIF9zZWxlY3RlZDogYW55O1xuICAgIGNvbnN0cnVjdG9yKGkxOG46IEkxOG4pO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIGtleWJvYXJkSW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25DaGFuZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG59XG4iXX0=