/**
 *
 * carbon-angular v0.0.0 | expandable-tile.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, AfterContentInit } from "@angular/core";
import { I18n, Overridable } from "carbon-components-angular/i18n";
import * as ɵngcc0 from '@angular/core';
export interface ExpandableTileTranslations {
    EXPAND: string;
    COLLAPSE: string;
}
export declare class ExpandableTile implements AfterContentInit {
    protected i18n: I18n;
    protected elementRef: ElementRef;
    expanded: boolean;
    /**
     * Expects an object that contains some or all of:
     * ```
     * {
     *		"EXPAND": "Expand",
     *		"COLLAPSE": "Collapse",
     * }
     * ```
     */
    translations: ExpandableTileTranslations;
    tileMaxHeight: number;
    currentExpandedHeight: number;
    element: any;
    expand: Overridable;
    collapse: Overridable;
    constructor(i18n: I18n, elementRef: ElementRef);
    ngAfterContentInit(): void;
    readonly expandedHeight: number;
    updateMaxHeight(): void;
    onClick(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExpandableTile>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExpandableTile, "ibm-expandable-tile", never, {
    "expanded": "expanded";
    "translations": "translations";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10aWxlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleHBhbmRhYmxlLXRpbGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBleHBhbmRhYmxlLXRpbGUuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biwgT3ZlcnJpZGFibGUgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5leHBvcnQgaW50ZXJmYWNlIEV4cGFuZGFibGVUaWxlVHJhbnNsYXRpb25zIHtcbiAgICBFWFBBTkQ6IHN0cmluZztcbiAgICBDT0xMQVBTRTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhwYW5kYWJsZVRpbGUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwcm90ZWN0ZWQgaTE4bjogSTE4bjtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBleHBhbmRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFeHBlY3RzIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNvbWUgb3IgYWxsIG9mOlxuICAgICAqIGBgYFxuICAgICAqIHtcbiAgICAgKlx0XHRcIkVYUEFORFwiOiBcIkV4cGFuZFwiLFxuICAgICAqXHRcdFwiQ09MTEFQU0VcIjogXCJDb2xsYXBzZVwiLFxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0cmFuc2xhdGlvbnM6IEV4cGFuZGFibGVUaWxlVHJhbnNsYXRpb25zO1xuICAgIHRpbGVNYXhIZWlnaHQ6IG51bWJlcjtcbiAgICBjdXJyZW50RXhwYW5kZWRIZWlnaHQ6IG51bWJlcjtcbiAgICBlbGVtZW50OiBhbnk7XG4gICAgZXhwYW5kOiBPdmVycmlkYWJsZTtcbiAgICBjb2xsYXBzZTogT3ZlcnJpZGFibGU7XG4gICAgY29uc3RydWN0b3IoaTE4bjogSTE4biwgZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgZXhwYW5kZWRIZWlnaHQ6IG51bWJlcjtcbiAgICB1cGRhdGVNYXhIZWlnaHQoKTogdm9pZDtcbiAgICBvbkNsaWNrKCk6IHZvaWQ7XG59XG4iXX0=