/**
 *
 * carbon-angular v0.0.0 | tile-group.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { AfterContentInit, EventEmitter, QueryList, OnDestroy } from "@angular/core";
import { SelectionTile } from "./selection-tile.component";
import { TileSelection } from "./tile-selection.interface";
import { Subject } from "rxjs";
import * as ɵngcc0 from '@angular/core';
export declare class TileGroup implements AfterContentInit, OnDestroy {
    static tileGroupCount: number;
    /**
     * The tile group `name`
     */
    name: string;
    /**
     * Set to `true` to support multiple tile selection
     */
    multiple: boolean;
    /**
     * Emits an event when the tile selection changes.
     *
     * Emits an object that looks like:
     * ```javascript
     * {
     * 	value: "something",
     * 	selected: true,
     * 	name: "tile-group-1"
     * }
     * ```
     */
    selected: EventEmitter<TileSelection>;
    tileGroupClass: boolean;
    selectionTiles: QueryList<SelectionTile>;
    protected unsubscribe$: Subject<void>;
    protected unsubscribeTiles$: Subject<void>;
    constructor();
    onChange: (_: any) => void;
    onTouched: () => void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TileGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TileGroup, "ibm-tile-group", never, {
    "name": "name";
    "multiple": "multiple";
}, {
    "selected": "selected";
}, ["selectionTiles"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1ncm91cC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGlsZS1ncm91cC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgdGlsZS1ncm91cC5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIE9uRGVzdHJveSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTZWxlY3Rpb25UaWxlIH0gZnJvbSBcIi4vc2VsZWN0aW9uLXRpbGUuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBUaWxlU2VsZWN0aW9uIH0gZnJvbSBcIi4vdGlsZS1zZWxlY3Rpb24uaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRpbGVHcm91cCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgc3RhdGljIHRpbGVHcm91cENvdW50OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHRpbGUgZ3JvdXAgYG5hbWVgXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gc3VwcG9ydCBtdWx0aXBsZSB0aWxlIHNlbGVjdGlvblxuICAgICAqL1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIHRpbGUgc2VsZWN0aW9uIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBFbWl0cyBhbiBvYmplY3QgdGhhdCBsb29rcyBsaWtlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiB7XG4gICAgICogXHR2YWx1ZTogXCJzb21ldGhpbmdcIixcbiAgICAgKiBcdHNlbGVjdGVkOiB0cnVlLFxuICAgICAqIFx0bmFtZTogXCJ0aWxlLWdyb3VwLTFcIlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPFRpbGVTZWxlY3Rpb24+O1xuICAgIHRpbGVHcm91cENsYXNzOiBib29sZWFuO1xuICAgIHNlbGVjdGlvblRpbGVzOiBRdWVyeUxpc3Q8U2VsZWN0aW9uVGlsZT47XG4gICAgcHJvdGVjdGVkIHVuc3Vic2NyaWJlJDogU3ViamVjdDx2b2lkPjtcbiAgICBwcm90ZWN0ZWQgdW5zdWJzY3JpYmVUaWxlcyQ6IFN1YmplY3Q8dm9pZD47XG4gICAgY29uc3RydWN0b3IoKTtcbiAgICBvbkNoYW5nZTogKF86IGFueSkgPT4gdm9pZDtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG59XG4iXX0=