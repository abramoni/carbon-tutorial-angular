/**
 *
 * carbon-angular v0.0.0 | tab-header-group.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, ElementRef, TemplateRef, OnChanges, SimpleChanges, ChangeDetectorRef, OnInit } from "@angular/core";
import { Subscription } from "rxjs";
import { EventService } from "carbon-components-angular/utils";
import { TabHeader } from "./tab-header.component";
import * as ɵngcc0 from '@angular/core';
export declare class TabHeaderGroup implements AfterContentInit, OnChanges, OnInit {
    protected elementRef: ElementRef;
    protected changeDetectorRef: ChangeDetectorRef;
    protected eventService: EventService;
    /**
     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
     */
    followFocus: boolean;
    /**
     * Set to `true` to put tabs in a loading state.
     */
    skeleton: boolean;
    /**
     * Sets the aria label on the nav element.
     */
    ariaLabel: string;
    /**
     * Sets the aria labelledby on the nav element.
     */
    ariaLabelledby: string;
    contentAfter: TemplateRef<any>;
    contentBefore: TemplateRef<any>;
    /**
     * Set to 'true' to have all pane references associated with each tab header
     * in the tab header group cached and not reloaded on tab switching.
     */
    cacheActive: boolean;
    isNavigation: boolean;
    type: "default" | "container";
    /**
     * ContentChildren of all the tabHeaders.
     */
    tabHeaderQuery: QueryList<TabHeader>;
    headerContainer: any;
    rightOverflowNavButton: any;
    leftOverflowNavButton: any;
    /**
     * Keeps track of all the subscriptions to the tab header selection events.
     */
    selectedSubscriptionTracker: Subscription;
    /**
     * Controls the manual focusing done by tabbing through headings.
     */
    currentSelectedIndex: number;
    readonly hasHorizontalOverflow: boolean;
    readonly leftOverflowNavButtonHidden: boolean;
    readonly rightOverflowNavButtonHidden: boolean;
    OVERFLOW_BUTTON_OFFSET: number;
    private _cacheActive;
    private overflowNavInterval;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, eventService: EventService);
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    keyboardInput(event: any): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getSelectedTab(): any;
    handleScroll(): void;
    handleOverflowNavClick(direction: number, multiplier?: number): void;
    handleOverflowNavMouseDown(direction: number): void;
    handleOverflowNavMouseUp(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabHeaderGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabHeaderGroup, "ibm-tab-header-group", never, {
    "skeleton": "skeleton";
    "cacheActive": "cacheActive";
    "isNavigation": "isNavigation";
    "type": "type";
    "followFocus": "followFocus";
    "ariaLabel": "ariaLabel";
    "ariaLabelledby": "ariaLabelledby";
    "contentAfter": "contentAfter";
    "contentBefore": "contentBefore";
}, {}, ["tabHeaderQuery"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci1ncm91cC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFiLWhlYWRlci1ncm91cC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0RBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgdGFiLWhlYWRlci1ncm91cC5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuaW1wb3J0IHsgVGFiSGVhZGVyIH0gZnJvbSBcIi4vdGFiLWhlYWRlci5jb21wb25lbnRcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYkhlYWRlckdyb3VwIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGV2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIFNldCB0byAndHJ1ZScgdG8gaGF2ZSB0YWJzIGF1dG9tYXRpY2FsbHkgYWN0aXZhdGVkIGFuZCBoYXZlIHRoZWlyIGNvbnRlbnQgZGlzcGxheWVkIHdoZW4gdGhleSByZWNlaXZlIGZvY3VzLlxuICAgICAqL1xuICAgIGZvbGxvd0ZvY3VzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gcHV0IHRhYnMgaW4gYSBsb2FkaW5nIHN0YXRlLlxuICAgICAqL1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb24gdGhlIG5hdiBlbGVtZW50LlxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWxsZWRieSBvbiB0aGUgbmF2IGVsZW1lbnQuXG4gICAgICovXG4gICAgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgICBjb250ZW50QWZ0ZXI6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29udGVudEJlZm9yZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gJ3RydWUnIHRvIGhhdmUgYWxsIHBhbmUgcmVmZXJlbmNlcyBhc3NvY2lhdGVkIHdpdGggZWFjaCB0YWIgaGVhZGVyXG4gICAgICogaW4gdGhlIHRhYiBoZWFkZXIgZ3JvdXAgY2FjaGVkIGFuZCBub3QgcmVsb2FkZWQgb24gdGFiIHN3aXRjaGluZy5cbiAgICAgKi9cbiAgICBjYWNoZUFjdGl2ZTogYm9vbGVhbjtcbiAgICBpc05hdmlnYXRpb246IGJvb2xlYW47XG4gICAgdHlwZTogXCJkZWZhdWx0XCIgfCBcImNvbnRhaW5lclwiO1xuICAgIC8qKlxuICAgICAqIENvbnRlbnRDaGlsZHJlbiBvZiBhbGwgdGhlIHRhYkhlYWRlcnMuXG4gICAgICovXG4gICAgdGFiSGVhZGVyUXVlcnk6IFF1ZXJ5TGlzdDxUYWJIZWFkZXI+O1xuICAgIGhlYWRlckNvbnRhaW5lcjogYW55O1xuICAgIHJpZ2h0T3ZlcmZsb3dOYXZCdXR0b246IGFueTtcbiAgICBsZWZ0T3ZlcmZsb3dOYXZCdXR0b246IGFueTtcbiAgICAvKipcbiAgICAgKiBLZWVwcyB0cmFjayBvZiBhbGwgdGhlIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHRhYiBoZWFkZXIgc2VsZWN0aW9uIGV2ZW50cy5cbiAgICAgKi9cbiAgICBzZWxlY3RlZFN1YnNjcmlwdGlvblRyYWNrZXI6IFN1YnNjcmlwdGlvbjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgbWFudWFsIGZvY3VzaW5nIGRvbmUgYnkgdGFiYmluZyB0aHJvdWdoIGhlYWRpbmdzLlxuICAgICAqL1xuICAgIGN1cnJlbnRTZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaGFzSG9yaXpvbnRhbE92ZXJmbG93OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGxlZnRPdmVyZmxvd05hdkJ1dHRvbkhpZGRlbjogYm9vbGVhbjtcbiAgICByZWFkb25seSByaWdodE92ZXJmbG93TmF2QnV0dG9uSGlkZGVuOiBib29sZWFuO1xuICAgIE9WRVJGTE9XX0JVVFRPTl9PRkZTRVQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9jYWNoZUFjdGl2ZTtcbiAgICBwcml2YXRlIG92ZXJmbG93TmF2SW50ZXJ2YWw7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGtleWRvd24gZXZlbnRzIHVzZWQgZm9yIHRhYmJpbmcgdGhyb3VnaCB0aGUgaGVhZGluZ3MuXG4gICAgICovXG4gICAga2V5Ym9hcmRJbnB1dChldmVudDogYW55KTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGdldFNlbGVjdGVkVGFiKCk6IGFueTtcbiAgICBoYW5kbGVTY3JvbGwoKTogdm9pZDtcbiAgICBoYW5kbGVPdmVyZmxvd05hdkNsaWNrKGRpcmVjdGlvbjogbnVtYmVyLCBtdWx0aXBsaWVyPzogbnVtYmVyKTogdm9pZDtcbiAgICBoYW5kbGVPdmVyZmxvd05hdk1vdXNlRG93bihkaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XG4gICAgaGFuZGxlT3ZlcmZsb3dOYXZNb3VzZVVwKCk6IHZvaWQ7XG59XG4iXX0=