/**
 *
 * carbon-angular v0.0.0 | tab-headers.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, ElementRef, TemplateRef, OnChanges, SimpleChanges, OnInit, ChangeDetectorRef } from "@angular/core";
import { EventService } from "carbon-components-angular/utils";
import { Tab } from "./tab.component";
/**
 * The `TabHeaders` component contains the `Tab` items and controls scroll functionality
 * if content has overflow.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TabHeaders implements AfterContentInit, OnChanges, OnInit {
    protected elementRef: ElementRef;
    protected changeDetectorRef: ChangeDetectorRef;
    protected eventService: EventService;
    /**
     * List of `Tab` components.
     */
    tabInput: QueryList<Tab>;
    /**
     * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
     * Duplicate from `n-tabs` to support standalone headers
     */
    cacheActive: boolean;
    /**
     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
     */
    followFocus: boolean;
    /**
     * Set to `true` to put tabs in a loading state.
     */
    skeleton: boolean;
    /**
     * Sets the aria label on the nav element.
     */
    ariaLabel: string;
    /**
     * Sets the aria labelledby on the nav element.
     */
    ariaLabelledby: string;
    contentBefore: TemplateRef<any>;
    contentAfter: TemplateRef<any>;
    type: "default" | "container";
    /**
     * Gets the Unordered List element that holds the `Tab` headings from the view DOM.
     */
    headerContainer: any;
    rightOverflowNavButton: any;
    leftOverflowNavButton: any;
    /**
     * ContentChild of all the n-tabs
     */
    tabQuery: QueryList<Tab>;
    /**
     * set to tabQuery if tabInput is empty
     */
    tabs: QueryList<Tab>;
    /**
     * The index of the first visible tab.
     */
    firstVisibleTab: number;
    /**
     * The DOM element containing the `Tab` headings displayed.
     */
    allTabHeaders: QueryList<ElementRef>;
    /**
     * Controls the manual focusing done by tabbing through headings.
     */
    currentSelectedTab: number;
    readonly hasHorizontalOverflow: boolean;
    readonly leftOverflowNavButtonHidden: boolean;
    readonly rightOverflowNavButtonHidden: boolean;
    OVERFLOW_BUTTON_OFFSET: number;
    private overflowNavInterval;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, eventService: EventService);
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    keyboardInput(event: any): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Controls manually focusing tabs.
     */
    onTabFocus(ref: HTMLElement, index: number): void;
    getSelectedTab(): any;
    /**
     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.
     */
    selectTab(ref: HTMLElement, tab: Tab, tabIndex: number): void;
    handleScroll(): void;
    handleOverflowNavClick(direction: number, multiplier?: number): void;
    handleOverflowNavMouseDown(direction: number): void;
    handleOverflowNavMouseUp(): void;
    /**
     * Determines which `Tab` is initially selected.
     */
    protected setFirstTab(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabHeaders>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabHeaders, "ibm-tab-headers", never, {
    "cacheActive": "cacheActive";
    "skeleton": "skeleton";
    "type": "type";
    "tabInput": "tabs";
    "followFocus": "followFocus";
    "ariaLabel": "ariaLabel";
    "ariaLabelledby": "ariaLabelledby";
    "contentBefore": "contentBefore";
    "contentAfter": "contentAfter";
}, {}, ["tabQuery"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlcnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYi1oZWFkZXJzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0ZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgdGFiLWhlYWRlcnMuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT25Jbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiLmNvbXBvbmVudFwiO1xuLyoqXG4gKiBUaGUgYFRhYkhlYWRlcnNgIGNvbXBvbmVudCBjb250YWlucyB0aGUgYFRhYmAgaXRlbXMgYW5kIGNvbnRyb2xzIHNjcm9sbCBmdW5jdGlvbmFsaXR5XG4gKiBpZiBjb250ZW50IGhhcyBvdmVyZmxvdy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFiSGVhZGVycyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByb3RlY3RlZCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZTtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGBUYWJgIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdGFiSW5wdXQ6IFF1ZXJ5TGlzdDxUYWI+O1xuICAgIC8qKlxuICAgICAqIFNldCB0byAndHJ1ZScgdG8gaGF2ZSBgVGFiYCBpdGVtcyBjYWNoZWQgYW5kIG5vdCByZWxvYWRlZCBvbiB0YWIgc3dpdGNoaW5nLlxuICAgICAqIER1cGxpY2F0ZSBmcm9tIGBuLXRhYnNgIHRvIHN1cHBvcnQgc3RhbmRhbG9uZSBoZWFkZXJzXG4gICAgICovXG4gICAgY2FjaGVBY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHRhYnMgYXV0b21hdGljYWxseSBhY3RpdmF0ZWQgYW5kIGhhdmUgdGhlaXIgY29udGVudCBkaXNwbGF5ZWQgd2hlbiB0aGV5IHJlY2VpdmUgZm9jdXMuXG4gICAgICovXG4gICAgZm9sbG93Rm9jdXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCB0byBwdXQgdGFicyBpbiBhIGxvYWRpbmcgc3RhdGUuXG4gICAgICovXG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXJpYSBsYWJlbCBvbiB0aGUgbmF2IGVsZW1lbnQuXG4gICAgICovXG4gICAgYXJpYUxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXJpYSBsYWJlbGxlZGJ5IG9uIHRoZSBuYXYgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuICAgIGNvbnRlbnRCZWZvcmU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29udGVudEFmdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHR5cGU6IFwiZGVmYXVsdFwiIHwgXCJjb250YWluZXJcIjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBVbm9yZGVyZWQgTGlzdCBlbGVtZW50IHRoYXQgaG9sZHMgdGhlIGBUYWJgIGhlYWRpbmdzIGZyb20gdGhlIHZpZXcgRE9NLlxuICAgICAqL1xuICAgIGhlYWRlckNvbnRhaW5lcjogYW55O1xuICAgIHJpZ2h0T3ZlcmZsb3dOYXZCdXR0b246IGFueTtcbiAgICBsZWZ0T3ZlcmZsb3dOYXZCdXR0b246IGFueTtcbiAgICAvKipcbiAgICAgKiBDb250ZW50Q2hpbGQgb2YgYWxsIHRoZSBuLXRhYnNcbiAgICAgKi9cbiAgICB0YWJRdWVyeTogUXVlcnlMaXN0PFRhYj47XG4gICAgLyoqXG4gICAgICogc2V0IHRvIHRhYlF1ZXJ5IGlmIHRhYklucHV0IGlzIGVtcHR5XG4gICAgICovXG4gICAgdGFiczogUXVlcnlMaXN0PFRhYj47XG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBmaXJzdCB2aXNpYmxlIHRhYi5cbiAgICAgKi9cbiAgICBmaXJzdFZpc2libGVUYWI6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgRE9NIGVsZW1lbnQgY29udGFpbmluZyB0aGUgYFRhYmAgaGVhZGluZ3MgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGFsbFRhYkhlYWRlcnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgbWFudWFsIGZvY3VzaW5nIGRvbmUgYnkgdGFiYmluZyB0aHJvdWdoIGhlYWRpbmdzLlxuICAgICAqL1xuICAgIGN1cnJlbnRTZWxlY3RlZFRhYjogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGhhc0hvcml6b250YWxPdmVyZmxvdzogYm9vbGVhbjtcbiAgICByZWFkb25seSBsZWZ0T3ZlcmZsb3dOYXZCdXR0b25IaWRkZW46IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgcmlnaHRPdmVyZmxvd05hdkJ1dHRvbkhpZGRlbjogYm9vbGVhbjtcbiAgICBPVkVSRkxPV19CVVRUT05fT0ZGU0VUOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBvdmVyZmxvd05hdkludGVydmFsO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBrZXlkb3duIGV2ZW50cyB1c2VkIGZvciB0YWJiaW5nIHRocm91Z2ggdGhlIGhlYWRpbmdzLlxuICAgICAqL1xuICAgIGtleWJvYXJkSW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyBtYW51YWxseSBmb2N1c2luZyB0YWJzLlxuICAgICAqL1xuICAgIG9uVGFiRm9jdXMocmVmOiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0U2VsZWN0ZWRUYWIoKTogYW55O1xuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgYFRhYmAgJ3RhYicgYW5kIG1vdmVzIGl0IGludG8gdmlldyBvbiB0aGUgdmlldyBET00gaWYgaXQgaXMgbm90IGFscmVhZHkuXG4gICAgICovXG4gICAgc2VsZWN0VGFiKHJlZjogSFRNTEVsZW1lbnQsIHRhYjogVGFiLCB0YWJJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBoYW5kbGVTY3JvbGwoKTogdm9pZDtcbiAgICBoYW5kbGVPdmVyZmxvd05hdkNsaWNrKGRpcmVjdGlvbjogbnVtYmVyLCBtdWx0aXBsaWVyPzogbnVtYmVyKTogdm9pZDtcbiAgICBoYW5kbGVPdmVyZmxvd05hdk1vdXNlRG93bihkaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XG4gICAgaGFuZGxlT3ZlcmZsb3dOYXZNb3VzZVVwKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGljaCBgVGFiYCBpcyBpbml0aWFsbHkgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHNldEZpcnN0VGFiKCk6IHZvaWQ7XG59XG4iXX0=