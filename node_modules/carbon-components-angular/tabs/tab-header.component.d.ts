/**
 *
 * carbon-angular v0.0.0 | tab-header.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, AfterViewInit } from "@angular/core";
import { Tab } from "./tab.component";
import { EventEmitter } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare class TabHeader implements AfterViewInit {
    /**
     * Indicates whether the `Tab` is active/selected.
     * Determines whether it's `TabPanel` is rendered.
     */
    active: boolean;
    /**
     * Indicates whether or not the `Tab` item is disabled.
     */
    disabled: boolean;
    /**
     * Reference to the corresponsing tab pane.
     */
    paneReference: Tab;
    title: any;
    /**
     * Set to 'true' to have pane reference cached and not reloaded on tab switching.
     */
    cacheActive: boolean;
    paneTabIndex: number | null;
    /**
     * Value 'selected' to be emitted after a new `Tab` is selected.
     */
    selected: EventEmitter<any>;
    tabItem: ElementRef;
    protected _cacheActive: boolean;
    ngAfterViewInit(): void;
    selectTab(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabHeader, "ibm-tab-header", never, {
    "active": "active";
    "disabled": "disabled";
    "cacheActive": "cacheActive";
    "paneTabIndex": "paneTabIndex";
    "title": "title";
    "paneReference": "paneReference";
}, {
    "selected": "selected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFiLWhlYWRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCB0YWItaGVhZGVyLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhYiB9IGZyb20gXCIuL3RhYi5jb21wb25lbnRcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWJIZWFkZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYFRhYmAgaXMgYWN0aXZlL3NlbGVjdGVkLlxuICAgICAqIERldGVybWluZXMgd2hldGhlciBpdCdzIGBUYWJQYW5lbGAgaXMgcmVuZGVyZWQuXG4gICAgICovXG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgYFRhYmAgaXRlbSBpcyBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcnJlc3BvbnNpbmcgdGFiIHBhbmUuXG4gICAgICovXG4gICAgcGFuZVJlZmVyZW5jZTogVGFiO1xuICAgIHRpdGxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHBhbmUgcmVmZXJlbmNlIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG4gICAgICovXG4gICAgY2FjaGVBY3RpdmU6IGJvb2xlYW47XG4gICAgcGFuZVRhYkluZGV4OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFZhbHVlICdzZWxlY3RlZCcgdG8gYmUgZW1pdHRlZCBhZnRlciBhIG5ldyBgVGFiYCBpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdGFiSXRlbTogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX2NhY2hlQWN0aXZlOiBib29sZWFuO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHNlbGVjdFRhYigpOiB2b2lkO1xufVxuIl19