/**
 *
 * carbon-angular v0.0.0 | tabs.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, OnChanges, SimpleChanges } from "@angular/core";
import { Tab } from "./tab.component";
/**
 * Build out your application's tabs using this component.
 * This is the parent of the `Tab` and `TabHeader` components.
 *
 * [See demo](../../?path=/story/components-tabs--basic)
 *
 * `Tabs` expects a set of `n-tab` elements
 *
 * ```html
 * <ibm-tabs>
 * 	<ibm-tab heading='tab1'>
 * 		tab 1 content
 * 	</ibm-tab>
 * 	<ibm-tab heading='tab1'>
 * 		tab 2 content
 * 	</ibm-tab>
 * 	<!-- ... -->
 * 	<ibm-tab heading='tab1'>
 * 		tab n content
 * 	</ibm-tab>
 * </ibm-tabs>
 * ```
 *
 * <example-url>../../iframe.html?id=components-tabs--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Tabs implements AfterContentInit, OnChanges {
    /**
     * Takes either the string value 'top' or 'bottom' to place TabHeader
     * relative to the `TabPanel`s.
     */
    position: "top" | "bottom";
    /**
     * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
     */
    cacheActive: boolean;
    /**
     * Set to 'true' to have tabs automatically activated and have their content displayed when they receive focus.
     */
    followFocus: boolean;
    /**
     * Set to `true` to put tabs in a loading state.
     */
    skeleton: boolean;
    /**
     * Set to `true` to have the tabIndex of the all tabpanels be -1.
     */
    isNavigation: boolean;
    /**
     * Sets the aria label on the `TabHeader`s nav element.
     */
    ariaLabel: string;
    /**
     * Sets the aria labelledby on the `TabHeader`s nav element.
     */
    ariaLabelledby: string;
    /**
     * Sets the type of the `TabHeader`s
     */
    type: "default" | "container";
    /**
     * Maintains a `QueryList` of the `Tab` elements and updates if `Tab`s are added or removed.
     */
    tabs: QueryList<Tab>;
    /**
     * Content child of the projected header component
     */
    tabHeaders: any;
    /**
     * After content is initialized update `Tab`s to cache (if turned on) and set the initial
     * selected Tab item.
     */
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * true if the n-tab's are passed directly to the component as children
     */
    hasTabHeaders(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Tabs>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Tabs, "ibm-tabs", never, {
    "position": "position";
    "cacheActive": "cacheActive";
    "followFocus": "followFocus";
    "skeleton": "skeleton";
    "isNavigation": "isNavigation";
    "type": "type";
    "ariaLabel": "ariaLabel";
    "ariaLabelledby": "ariaLabelledby";
}, {}, ["tabHeaders", "tabs"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFicy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvREEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCB0YWJzLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUYWIgfSBmcm9tIFwiLi90YWIuY29tcG9uZW50XCI7XG4vKipcbiAqIEJ1aWxkIG91dCB5b3VyIGFwcGxpY2F0aW9uJ3MgdGFicyB1c2luZyB0aGlzIGNvbXBvbmVudC5cbiAqIFRoaXMgaXMgdGhlIHBhcmVudCBvZiB0aGUgYFRhYmAgYW5kIGBUYWJIZWFkZXJgIGNvbXBvbmVudHMuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy10YWJzLS1iYXNpYylcbiAqXG4gKiBgVGFic2AgZXhwZWN0cyBhIHNldCBvZiBgbi10YWJgIGVsZW1lbnRzXG4gKlxuICogYGBgaHRtbFxuICogPGlibS10YWJzPlxuICogXHQ8aWJtLXRhYiBoZWFkaW5nPSd0YWIxJz5cbiAqIFx0XHR0YWIgMSBjb250ZW50XG4gKiBcdDwvaWJtLXRhYj5cbiAqIFx0PGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4gKiBcdFx0dGFiIDIgY29udGVudFxuICogXHQ8L2libS10YWI+XG4gKiBcdDwhLS0gLi4uIC0tPlxuICogXHQ8aWJtLXRhYiBoZWFkaW5nPSd0YWIxJz5cbiAqIFx0XHR0YWIgbiBjb250ZW50XG4gKiBcdDwvaWJtLXRhYj5cbiAqIDwvaWJtLXRhYnM+XG4gKiBgYGBcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y29tcG9uZW50cy10YWJzLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYnMgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkNoYW5nZXMge1xuICAgIC8qKlxuICAgICAqIFRha2VzIGVpdGhlciB0aGUgc3RyaW5nIHZhbHVlICd0b3AnIG9yICdib3R0b20nIHRvIHBsYWNlIFRhYkhlYWRlclxuICAgICAqIHJlbGF0aXZlIHRvIHRoZSBgVGFiUGFuZWxgcy5cbiAgICAgKi9cbiAgICBwb3NpdGlvbjogXCJ0b3BcIiB8IFwiYm90dG9tXCI7XG4gICAgLyoqXG4gICAgICogU2V0IHRvICd0cnVlJyB0byBoYXZlIGBUYWJgIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG4gICAgICovXG4gICAgY2FjaGVBY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHRhYnMgYXV0b21hdGljYWxseSBhY3RpdmF0ZWQgYW5kIGhhdmUgdGhlaXIgY29udGVudCBkaXNwbGF5ZWQgd2hlbiB0aGV5IHJlY2VpdmUgZm9jdXMuXG4gICAgICovXG4gICAgZm9sbG93Rm9jdXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCB0byBwdXQgdGFicyBpbiBhIGxvYWRpbmcgc3RhdGUuXG4gICAgICovXG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCB0byBoYXZlIHRoZSB0YWJJbmRleCBvZiB0aGUgYWxsIHRhYnBhbmVscyBiZSAtMS5cbiAgICAgKi9cbiAgICBpc05hdmlnYXRpb246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYXJpYSBsYWJlbCBvbiB0aGUgYFRhYkhlYWRlcmBzIG5hdiBlbGVtZW50LlxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWxsZWRieSBvbiB0aGUgYFRhYkhlYWRlcmBzIG5hdiBlbGVtZW50LlxuICAgICAqL1xuICAgIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHlwZSBvZiB0aGUgYFRhYkhlYWRlcmBzXG4gICAgICovXG4gICAgdHlwZTogXCJkZWZhdWx0XCIgfCBcImNvbnRhaW5lclwiO1xuICAgIC8qKlxuICAgICAqIE1haW50YWlucyBhIGBRdWVyeUxpc3RgIG9mIHRoZSBgVGFiYCBlbGVtZW50cyBhbmQgdXBkYXRlcyBpZiBgVGFiYHMgYXJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICovXG4gICAgdGFiczogUXVlcnlMaXN0PFRhYj47XG4gICAgLyoqXG4gICAgICogQ29udGVudCBjaGlsZCBvZiB0aGUgcHJvamVjdGVkIGhlYWRlciBjb21wb25lbnRcbiAgICAgKi9cbiAgICB0YWJIZWFkZXJzOiBhbnk7XG4gICAgLyoqXG4gICAgICogQWZ0ZXIgY29udGVudCBpcyBpbml0aWFsaXplZCB1cGRhdGUgYFRhYmBzIHRvIGNhY2hlIChpZiB0dXJuZWQgb24pIGFuZCBzZXQgdGhlIGluaXRpYWxcbiAgICAgKiBzZWxlY3RlZCBUYWIgaXRlbS5cbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiB0cnVlIGlmIHRoZSBuLXRhYidzIGFyZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudCBhcyBjaGlsZHJlblxuICAgICAqL1xuICAgIGhhc1RhYkhlYWRlcnMoKTogYm9vbGVhbjtcbn1cbiJdfQ==