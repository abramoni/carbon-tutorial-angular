/**
 *
 * carbon-angular v0.0.0 | tab.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { OnInit, EventEmitter, TemplateRef } from "@angular/core";
/**
* The `Tab` component is a child of the `Tabs` component.
* It represents one `Tab` item and its content within a panel of other `Tab` items.
*
*
* `Tab` takes a string or `TemplateRef` for the header, and any content for the body of the tab.
* Disabled states should be handled by the application (ie. switch to the tab, but display some
* indication as to _why_ the tab is disabled).
*
* When the tab is selected the `select` output will be triggered.
* The `select` output will also be triggered for the active tab when the tabs are loaded or updated.
*
*
* Tab with string header:
*
* ```html
* <ibm-tab heading='tab1'>
* 	tab 1 content
* </ibm-tab>
* ```
*
* Tab with custom header:
*
* ```html
* <ng-template #tabHeading>
* 	<svg ibmIcon="facebook"
* 		size="sm"
* 		style="margin-right: 7px;">
* 	</svg>
* 	Hello Tab 1
* </ng-template>
* <ibm-tabs>
* 	<ibm-tab [heading]="tabHeading">
* 		Tab 1 content <svg ibmIcon="alert" size="lg"></svg>
* 	</ibm-tab>
* 	<ibm-tab heading='Tab2'>
* 		Tab 2 content
* 	</ibm-tab>
* 	<ibm-tab heading='Tab3'>
* 		Tab 3 content
* 	</ibm-tab>
* </ibm-tabs>
* ```
*/
import * as ɵngcc0 from '@angular/core';
export declare class Tab implements OnInit {
    /**
     * Boolean value reflects if the `Tab` is using a custom template for the heading.
     * Default value is false.
     */
    headingIsTemplate: boolean;
    /**
     * The `Tab`'s title to be displayed or custom temaplate for the `Tab` heading.
     */
    heading: string | TemplateRef<any>;
    /**
     * Optional override for the `tabItem's`'s title attribute which is set in `TabHeaders`.
     * `tabItem`'s title attribute is automatically set to `heading`.
     *
     * You might want to use this if you set `heading` to a `TemplateRef`.
     */
    title: string;
    /**
     * Allows the user to pass data to the custom template for the `Tab` heading.
     */
    context: any;
    /**
     * Indicates whether the `Tab` is active/selected.
     * Determines whether it's `TabPanel` is rendered.
     */
    active: boolean;
    /**
     * Indicates whether or not the `Tab` item is disabled.
     */
    disabled: boolean;
    tabIndex: number;
    /**
     * Sets the id of the `Tab`. Will be uniquely generated if not provided.
     */
    id: string;
    /**
     * Set to true to have Tab items cached and not reloaded on tab switching.
     */
    cacheActive: boolean;
    /**
     * Value 'selected' to be emitted after a new `Tab` is selected.
     */
    selected: EventEmitter<void>;
    /**
     * Used to set the id property on the element.
     */
    attrClass: string;
    protected _cacheActive: boolean;
    /**
     * Checks for custom heading template on initialization and updates the value
     * of the boolean 'headingIsTemplate'.
     */
    ngOnInit(): void;
    /**
     * Emit the status of the `Tab`, specifically 'select' and 'selected' properties.
     */
    doSelect(): void;
    /**
    * Returns value indicating whether this `Tab` should be rendered in a `TabPanel`.
    */
    shouldRender(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Tab>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Tab, "ibm-tab", never, {
    "active": "active";
    "disabled": "disabled";
    "tabIndex": "tabIndex";
    "id": "id";
    "cacheActive": "cacheActive";
    "heading": "heading";
    "title": "title";
    "context": "context";
}, {
    "selected": "selected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2REEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCB0YWIuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vKipcbiogVGhlIGBUYWJgIGNvbXBvbmVudCBpcyBhIGNoaWxkIG9mIHRoZSBgVGFic2AgY29tcG9uZW50LlxuKiBJdCByZXByZXNlbnRzIG9uZSBgVGFiYCBpdGVtIGFuZCBpdHMgY29udGVudCB3aXRoaW4gYSBwYW5lbCBvZiBvdGhlciBgVGFiYCBpdGVtcy5cbipcbipcbiogYFRhYmAgdGFrZXMgYSBzdHJpbmcgb3IgYFRlbXBsYXRlUmVmYCBmb3IgdGhlIGhlYWRlciwgYW5kIGFueSBjb250ZW50IGZvciB0aGUgYm9keSBvZiB0aGUgdGFiLlxuKiBEaXNhYmxlZCBzdGF0ZXMgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhlIGFwcGxpY2F0aW9uIChpZS4gc3dpdGNoIHRvIHRoZSB0YWIsIGJ1dCBkaXNwbGF5IHNvbWVcbiogaW5kaWNhdGlvbiBhcyB0byBfd2h5XyB0aGUgdGFiIGlzIGRpc2FibGVkKS5cbipcbiogV2hlbiB0aGUgdGFiIGlzIHNlbGVjdGVkIHRoZSBgc2VsZWN0YCBvdXRwdXQgd2lsbCBiZSB0cmlnZ2VyZWQuXG4qIFRoZSBgc2VsZWN0YCBvdXRwdXQgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGFjdGl2ZSB0YWIgd2hlbiB0aGUgdGFicyBhcmUgbG9hZGVkIG9yIHVwZGF0ZWQuXG4qXG4qXG4qIFRhYiB3aXRoIHN0cmluZyBoZWFkZXI6XG4qXG4qIGBgYGh0bWxcbiogPGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4qIFx0dGFiIDEgY29udGVudFxuKiA8L2libS10YWI+XG4qIGBgYFxuKlxuKiBUYWIgd2l0aCBjdXN0b20gaGVhZGVyOlxuKlxuKiBgYGBodG1sXG4qIDxuZy10ZW1wbGF0ZSAjdGFiSGVhZGluZz5cbiogXHQ8c3ZnIGlibUljb249XCJmYWNlYm9va1wiXG4qIFx0XHRzaXplPVwic21cIlxuKiBcdFx0c3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDdweDtcIj5cbiogXHQ8L3N2Zz5cbiogXHRIZWxsbyBUYWIgMVxuKiA8L25nLXRlbXBsYXRlPlxuKiA8aWJtLXRhYnM+XG4qIFx0PGlibS10YWIgW2hlYWRpbmddPVwidGFiSGVhZGluZ1wiPlxuKiBcdFx0VGFiIDEgY29udGVudCA8c3ZnIGlibUljb249XCJhbGVydFwiIHNpemU9XCJsZ1wiPjwvc3ZnPlxuKiBcdDwvaWJtLXRhYj5cbiogXHQ8aWJtLXRhYiBoZWFkaW5nPSdUYWIyJz5cbiogXHRcdFRhYiAyIGNvbnRlbnRcbiogXHQ8L2libS10YWI+XG4qIFx0PGlibS10YWIgaGVhZGluZz0nVGFiMyc+XG4qIFx0XHRUYWIgMyBjb250ZW50XG4qIFx0PC9pYm0tdGFiPlxuKiA8L2libS10YWJzPlxuKiBgYGBcbiovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWIgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gdmFsdWUgcmVmbGVjdHMgaWYgdGhlIGBUYWJgIGlzIHVzaW5nIGEgY3VzdG9tIHRlbXBsYXRlIGZvciB0aGUgaGVhZGluZy5cbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgICAqL1xuICAgIGhlYWRpbmdJc1RlbXBsYXRlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBgVGFiYCdzIHRpdGxlIHRvIGJlIGRpc3BsYXllZCBvciBjdXN0b20gdGVtYXBsYXRlIGZvciB0aGUgYFRhYmAgaGVhZGluZy5cbiAgICAgKi9cbiAgICBoZWFkaW5nOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIG92ZXJyaWRlIGZvciB0aGUgYHRhYkl0ZW0nc2AncyB0aXRsZSBhdHRyaWJ1dGUgd2hpY2ggaXMgc2V0IGluIGBUYWJIZWFkZXJzYC5cbiAgICAgKiBgdGFiSXRlbWAncyB0aXRsZSBhdHRyaWJ1dGUgaXMgYXV0b21hdGljYWxseSBzZXQgdG8gYGhlYWRpbmdgLlxuICAgICAqXG4gICAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoaXMgaWYgeW91IHNldCBgaGVhZGluZ2AgdG8gYSBgVGVtcGxhdGVSZWZgLlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSB1c2VyIHRvIHBhc3MgZGF0YSB0byB0aGUgY3VzdG9tIHRlbXBsYXRlIGZvciB0aGUgYFRhYmAgaGVhZGluZy5cbiAgICAgKi9cbiAgICBjb250ZXh0OiBhbnk7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGBUYWJgIGlzIGFjdGl2ZS9zZWxlY3RlZC5cbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgaXQncyBgVGFiUGFuZWxgIGlzIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIGBUYWJgIGl0ZW0gaXMgZGlzYWJsZWQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpZCBvZiB0aGUgYFRhYmAuIFdpbGwgYmUgdW5pcXVlbHkgZ2VuZXJhdGVkIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB0byB0cnVlIHRvIGhhdmUgVGFiIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG4gICAgICovXG4gICAgY2FjaGVBY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVmFsdWUgJ3NlbGVjdGVkJyB0byBiZSBlbWl0dGVkIGFmdGVyIGEgbmV3IGBUYWJgIGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgdGhlIGlkIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGF0dHJDbGFzczogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBfY2FjaGVBY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGZvciBjdXN0b20gaGVhZGluZyB0ZW1wbGF0ZSBvbiBpbml0aWFsaXphdGlvbiBhbmQgdXBkYXRlcyB0aGUgdmFsdWVcbiAgICAgKiBvZiB0aGUgYm9vbGVhbiAnaGVhZGluZ0lzVGVtcGxhdGUnLlxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgc3RhdHVzIG9mIHRoZSBgVGFiYCwgc3BlY2lmaWNhbGx5ICdzZWxlY3QnIGFuZCAnc2VsZWN0ZWQnIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZG9TZWxlY3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAqIFJldHVybnMgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgYFRhYmAgc2hvdWxkIGJlIHJlbmRlcmVkIGluIGEgYFRhYlBhbmVsYC5cbiAgICAqL1xuICAgIHNob3VsZFJlbmRlcigpOiBib29sZWFuO1xufVxuIl19