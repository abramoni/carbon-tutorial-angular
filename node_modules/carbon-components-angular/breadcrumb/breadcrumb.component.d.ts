/**
 *
 * carbon-angular v0.0.0 | breadcrumb.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { QueryList, AfterContentInit, EventEmitter } from "@angular/core";
import { BreadcrumbItem } from "./breadcrumb-item.interface";
import { BreadcrumbItemComponent } from "./breadcrumb-item.component";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 *  [See demo](../../?path=/story/components-breadcrumb--basic)
 *
 * <example-url>../../iframe.html?id=components-breadcrumb--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class Breadcrumb implements AfterContentInit {
    protected domSanitizer: DomSanitizer;
    protected router: Router;
    children: QueryList<BreadcrumbItemComponent>;
    items: Array<BreadcrumbItem>;
    noTrailingSlash: boolean;
    ariaLabel: string;
    skeleton: any;
    threshold: number;
    /**
     * Emits the navigation status promise when the link is activated
     */
    navigation: EventEmitter<Promise<boolean>>;
    readonly shouldShowContent: boolean;
    readonly shouldShowOverflow: boolean;
    readonly first: BreadcrumbItem;
    readonly overflowItems: Array<BreadcrumbItem>;
    readonly secondLast: BreadcrumbItem;
    readonly last: BreadcrumbItem;
    protected _threshold: number;
    protected _skeleton: boolean;
    constructor(domSanitizer: DomSanitizer, router: Router);
    ngAfterContentInit(): void;
    navigate(event: any, item: BreadcrumbItem): void;
    protected updateChildren(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Breadcrumb>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Breadcrumb, "ibm-breadcrumb", never, {
    "noTrailingSlash": "noTrailingSlash";
    "skeleton": "skeleton";
    "threshold": "threshold";
    "items": "items";
    "ariaLabel": "ariaLabel";
}, {
    "navigation": "navigation";
}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBicmVhZGNydW1iLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCcmVhZGNydW1iSXRlbSB9IGZyb20gXCIuL2JyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IEJyZWFkY3J1bWJJdGVtQ29tcG9uZW50IH0gZnJvbSBcIi4vYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbi8qKlxuICogIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtYnJlYWRjcnVtYi0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtYnJlYWRjcnVtYi0tYmFzaWM8L2V4YW1wbGUtdXJsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCcmVhZGNydW1iIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcjtcbiAgICBjaGlsZHJlbjogUXVlcnlMaXN0PEJyZWFkY3J1bWJJdGVtQ29tcG9uZW50PjtcbiAgICBpdGVtczogQXJyYXk8QnJlYWRjcnVtYkl0ZW0+O1xuICAgIG5vVHJhaWxpbmdTbGFzaDogYm9vbGVhbjtcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBza2VsZXRvbjogYW55O1xuICAgIHRocmVzaG9sZDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHRoZSBuYXZpZ2F0aW9uIHN0YXR1cyBwcm9taXNlIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG4gICAgICovXG4gICAgbmF2aWdhdGlvbjogRXZlbnRFbWl0dGVyPFByb21pc2U8Ym9vbGVhbj4+O1xuICAgIHJlYWRvbmx5IHNob3VsZFNob3dDb250ZW50OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNob3VsZFNob3dPdmVyZmxvdzogYm9vbGVhbjtcbiAgICByZWFkb25seSBmaXJzdDogQnJlYWRjcnVtYkl0ZW07XG4gICAgcmVhZG9ubHkgb3ZlcmZsb3dJdGVtczogQXJyYXk8QnJlYWRjcnVtYkl0ZW0+O1xuICAgIHJlYWRvbmx5IHNlY29uZExhc3Q6IEJyZWFkY3J1bWJJdGVtO1xuICAgIHJlYWRvbmx5IGxhc3Q6IEJyZWFkY3J1bWJJdGVtO1xuICAgIHByb3RlY3RlZCBfdGhyZXNob2xkOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9za2VsZXRvbjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgcm91dGVyOiBSb3V0ZXIpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5hdmlnYXRlKGV2ZW50OiBhbnksIGl0ZW06IEJyZWFkY3J1bWJJdGVtKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQ2hpbGRyZW4oKTogdm9pZDtcbn1cbiJdfQ==