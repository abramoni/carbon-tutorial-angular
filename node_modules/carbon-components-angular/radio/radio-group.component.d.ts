/**
 *
 * carbon-angular v0.0.0 | radio-group.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { AfterContentInit, EventEmitter, QueryList, AfterViewInit } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { Radio } from "./radio.component";
import { RadioChange } from "./radio-change.class";
/**
 * [See demo](../../?path=/story/components-radio--basic)
 *
 * class: RadioGroup
 *
 * selector: `ibm-radio-group`
 *
 * source: `src/forms/radio.component.ts`
 *
 *
 * Ex:
 * ```html
 * <ibm-radio-group [(ngModel)]="radio">
 * 	<ibm-radio *ngFor="let one of manyRadios" [value]="one">
 *		Radio {{one}}
 * 	</ibm-radio>
 * </ibm-radio-group>
 *
 * Radio selected: {{radio}}
 * ```
 *
 * ```typescript
 * manyRadios = ["one", "two", "three", "four", "five", "six"];
 * ```
 *
 * Also see: [`Radio`](#ibm-radio)
 *
 * <example-url>../../iframe.html?id=components-radio--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class RadioGroup implements AfterContentInit, AfterViewInit, ControlValueAccessor {
    /**
     * Used for creating the `RadioGroup` 'name' property dynamically.
     */
    static radioGroupCount: number;
    orientation: "horizontal" | "vertical";
    labelPlacement: "right" | "left";
    /**
     * Used to set the `aria-label` attribute on the radio group element.
     */
    ariaLabel: string;
    /**
     * Used to set the `aria-labelledby` attribute on the radio group element.
     */
    ariaLabelledby: string;
    /**
     * Emits event notifying other classes of a change using a `RadioChange` class.
     */
    change: EventEmitter<RadioChange>;
    /**
     * The `Radio` input items in the `RadioGroup`.
     */
    radios: QueryList<Radio>;
    /**
     * Sets the passed in `Radio` item as the selected input within the `RadioGroup`.
     */
    /**
    * Returns the `Radio` that is selected within the `RadioGroup`.
    */
    selected: Radio | null;
    /**
     * Sets the value/state of the selected `Radio` within the `RadioGroup` to the passed in value.
     */
    /**
    * Returns the value/state of the selected `Radio` within the `RadioGroup`.
    */
    value: any;
    /**
     * Replaces the name associated with the `RadioGroup` with the provided parameter.
     */
    /**
    * Returns the associated name of the `RadioGroup`.
    */
    name: string;
    /**
     * Set to true to disable the whole radio group
     */
    disabled: boolean;
    /**
     * Returns the skeleton value in the `RadioGroup` if there is one.
     */
    /**
    * Sets the skeleton value for all `Radio` to the skeleton value of `RadioGroup`.
    */
    skeleton: any;
    /**
     * Binds 'bx--form-item' value to the class for `RadioGroup`.
     */
    radioButtonGroupClass: boolean;
    /**
     * To track whether the `RadioGroup` has been initialized.
     */
    protected isInitialized: boolean;
    /**
     * Reflects whether or not the input is disabled and cannot be selected.
     */
    protected _disabled: boolean;
    /**
     * Reflects whether or not the dropdown is loading.
     */
    protected _skeleton: boolean;
    /**
     * The value of the selected option within the `RadioGroup`.
     */
    protected _value: any;
    /**
     * The `Radio` within the `RadioGroup` that is selected.
     */
    protected _selected: Radio;
    /**
     * The name attribute associated with the `RadioGroup`.
     */
    protected _name: string;
    /**
     * Updates the selected `Radio` to be checked (selected).
     */
    checkSelectedRadio(): void;
    /**
     * Use the value of the `RadioGroup` to update the selected radio to the right state (selected state).
     */
    updateSelectedRadioFromValue(): void;
    /**
     * Creates a class of `RadioChange` to emit the change in the `RadioGroup`.
     */
    emitChangeEvent(event: RadioChange): void;
    /**
     * Synchronizes radio properties.
     */
    updateRadios(): void;
    /**
     * Updates the value of the `RadioGroup` using the provided parameter.
     */
    writeValue(value: any): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    /**
     * Used to set method to propagate changes back to the form.
     */
    registerOnChange(fn: any): void;
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the checkbox is touched.
     */
    registerOnTouched(fn: any): void;
    /**
     * Needed to properly implement ControlValueAccessor.
     */
    onTouched: () => any;
    /**
     * Method set in registerOnChange to propagate changes back to the form.
     */
    propagateChange: (_: any) => void;
    protected updateChildren(): void;
    protected updateRadioChangeHandler(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RadioGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RadioGroup, "ibm-radio-group", never, {
    "orientation": "orientation";
    "labelPlacement": "labelPlacement";
    "disabled": "disabled";
    "selected": "selected";
    "value": "value";
    "name": "name";
    "skeleton": "skeleton";
    "ariaLabel": "ariaLabel";
    "ariaLabelledby": "ariaLabelledby";
}, {
    "change": "change";
}, ["radios"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgUmFkaW8gfSBmcm9tIFwiLi9yYWRpby5jb21wb25lbnRcIjtcbmltcG9ydCB7IFJhZGlvQ2hhbmdlIH0gZnJvbSBcIi4vcmFkaW8tY2hhbmdlLmNsYXNzXCI7XG4vKipcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtcmFkaW8tLWJhc2ljKVxuICpcbiAqIGNsYXNzOiBSYWRpb0dyb3VwXG4gKlxuICogc2VsZWN0b3I6IGBpYm0tcmFkaW8tZ3JvdXBgXG4gKlxuICogc291cmNlOiBgc3JjL2Zvcm1zL3JhZGlvLmNvbXBvbmVudC50c2BcbiAqXG4gKlxuICogRXg6XG4gKiBgYGBodG1sXG4gKiA8aWJtLXJhZGlvLWdyb3VwIFsobmdNb2RlbCldPVwicmFkaW9cIj5cbiAqIFx0PGlibS1yYWRpbyAqbmdGb3I9XCJsZXQgb25lIG9mIG1hbnlSYWRpb3NcIiBbdmFsdWVdPVwib25lXCI+XG4gKlx0XHRSYWRpbyB7e29uZX19XG4gKiBcdDwvaWJtLXJhZGlvPlxuICogPC9pYm0tcmFkaW8tZ3JvdXA+XG4gKlxuICogUmFkaW8gc2VsZWN0ZWQ6IHt7cmFkaW99fVxuICogYGBgXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogbWFueVJhZGlvcyA9IFtcIm9uZVwiLCBcInR3b1wiLCBcInRocmVlXCIsIFwiZm91clwiLCBcImZpdmVcIiwgXCJzaXhcIl07XG4gKiBgYGBcbiAqXG4gKiBBbHNvIHNlZTogW2BSYWRpb2BdKCNpYm0tcmFkaW8pXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtcmFkaW8tLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmFkaW9Hcm91cCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBjcmVhdGluZyB0aGUgYFJhZGlvR3JvdXBgICduYW1lJyBwcm9wZXJ0eSBkeW5hbWljYWxseS5cbiAgICAgKi9cbiAgICBzdGF0aWMgcmFkaW9Hcm91cENvdW50OiBudW1iZXI7XG4gICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiIHwgXCJ2ZXJ0aWNhbFwiO1xuICAgIGxhYmVsUGxhY2VtZW50OiBcInJpZ2h0XCIgfCBcImxlZnRcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHNldCB0aGUgYGFyaWEtbGFiZWxgIGF0dHJpYnV0ZSBvbiB0aGUgcmFkaW8gZ3JvdXAgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHNldCB0aGUgYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlIG9uIHRoZSByYWRpbyBncm91cCBlbGVtZW50LlxuICAgICAqL1xuICAgIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRW1pdHMgZXZlbnQgbm90aWZ5aW5nIG90aGVyIGNsYXNzZXMgb2YgYSBjaGFuZ2UgdXNpbmcgYSBgUmFkaW9DaGFuZ2VgIGNsYXNzLlxuICAgICAqL1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFJhZGlvQ2hhbmdlPjtcbiAgICAvKipcbiAgICAgKiBUaGUgYFJhZGlvYCBpbnB1dCBpdGVtcyBpbiB0aGUgYFJhZGlvR3JvdXBgLlxuICAgICAqL1xuICAgIHJhZGlvczogUXVlcnlMaXN0PFJhZGlvPjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwYXNzZWQgaW4gYFJhZGlvYCBpdGVtIGFzIHRoZSBzZWxlY3RlZCBpbnB1dCB3aXRoaW4gdGhlIGBSYWRpb0dyb3VwYC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIGBSYWRpb2AgdGhhdCBpcyBzZWxlY3RlZCB3aXRoaW4gdGhlIGBSYWRpb0dyb3VwYC5cbiAgICAqL1xuICAgIHNlbGVjdGVkOiBSYWRpbyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUvc3RhdGUgb2YgdGhlIHNlbGVjdGVkIGBSYWRpb2Agd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAgdG8gdGhlIHBhc3NlZCBpbiB2YWx1ZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIHZhbHVlL3N0YXRlIG9mIHRoZSBzZWxlY3RlZCBgUmFkaW9gIHdpdGhpbiB0aGUgYFJhZGlvR3JvdXBgLlxuICAgICovXG4gICAgdmFsdWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyB0aGUgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIGBSYWRpb0dyb3VwYCB3aXRoIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBhc3NvY2lhdGVkIG5hbWUgb2YgdGhlIGBSYWRpb0dyb3VwYC5cbiAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHRoZSB3aG9sZSByYWRpbyBncm91cFxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNrZWxldG9uIHZhbHVlIGluIHRoZSBgUmFkaW9Hcm91cGAgaWYgdGhlcmUgaXMgb25lLlxuICAgICAqL1xuICAgIC8qKlxuICAgICogU2V0cyB0aGUgc2tlbGV0b24gdmFsdWUgZm9yIGFsbCBgUmFkaW9gIHRvIHRoZSBza2VsZXRvbiB2YWx1ZSBvZiBgUmFkaW9Hcm91cGAuXG4gICAgKi9cbiAgICBza2VsZXRvbjogYW55O1xuICAgIC8qKlxuICAgICAqIEJpbmRzICdieC0tZm9ybS1pdGVtJyB2YWx1ZSB0byB0aGUgY2xhc3MgZm9yIGBSYWRpb0dyb3VwYC5cbiAgICAgKi9cbiAgICByYWRpb0J1dHRvbkdyb3VwQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVG8gdHJhY2sgd2hldGhlciB0aGUgYFJhZGlvR3JvdXBgIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc0luaXRpYWxpemVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlZmxlY3RzIHdoZXRoZXIgb3Igbm90IHRoZSBpbnB1dCBpcyBkaXNhYmxlZCBhbmQgY2Fubm90IGJlIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmVmbGVjdHMgd2hldGhlciBvciBub3QgdGhlIGRyb3Bkb3duIGlzIGxvYWRpbmcuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9za2VsZXRvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aXRoaW4gdGhlIGBSYWRpb0dyb3VwYC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3ZhbHVlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIGBSYWRpb2Agd2l0aGluIHRoZSBgUmFkaW9Hcm91cGAgdGhhdCBpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX3NlbGVjdGVkOiBSYWRpbztcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBhdHRyaWJ1dGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBgUmFkaW9Hcm91cGAuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc2VsZWN0ZWQgYFJhZGlvYCB0byBiZSBjaGVja2VkIChzZWxlY3RlZCkuXG4gICAgICovXG4gICAgY2hlY2tTZWxlY3RlZFJhZGlvKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNlIHRoZSB2YWx1ZSBvZiB0aGUgYFJhZGlvR3JvdXBgIHRvIHVwZGF0ZSB0aGUgc2VsZWN0ZWQgcmFkaW8gdG8gdGhlIHJpZ2h0IHN0YXRlIChzZWxlY3RlZCBzdGF0ZSkuXG4gICAgICovXG4gICAgdXBkYXRlU2VsZWN0ZWRSYWRpb0Zyb21WYWx1ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbGFzcyBvZiBgUmFkaW9DaGFuZ2VgIHRvIGVtaXQgdGhlIGNoYW5nZSBpbiB0aGUgYFJhZGlvR3JvdXBgLlxuICAgICAqL1xuICAgIGVtaXRDaGFuZ2VFdmVudChldmVudDogUmFkaW9DaGFuZ2UpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN5bmNocm9uaXplcyByYWRpbyBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIHVwZGF0ZVJhZGlvcygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBgUmFkaW9Hcm91cGAgdXNpbmcgdGhlIHByb3ZpZGVkIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gc2V0IG1ldGhvZCB0byBwcm9wYWdhdGUgY2hhbmdlcyBiYWNrIHRvIHRoZSBmb3JtLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGNvbnRyb2wgaGFzIGJlZW4gdG91Y2hlZC5cbiAgICAgKiBAcGFyYW0gZm4gQ2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHRvdWNoZWQuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTmVlZGVkIHRvIHByb3Blcmx5IGltcGxlbWVudCBDb250cm9sVmFsdWVBY2Nlc3Nvci5cbiAgICAgKi9cbiAgICBvblRvdWNoZWQ6ICgpID0+IGFueTtcbiAgICAvKipcbiAgICAgKiBNZXRob2Qgc2V0IGluIHJlZ2lzdGVyT25DaGFuZ2UgdG8gcHJvcGFnYXRlIGNoYW5nZXMgYmFjayB0byB0aGUgZm9ybS5cbiAgICAgKi9cbiAgICBwcm9wYWdhdGVDaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUNoaWxkcmVuKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZVJhZGlvQ2hhbmdlSGFuZGxlcigpOiB2b2lkO1xufVxuIl19