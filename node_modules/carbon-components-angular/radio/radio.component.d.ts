/**
 *
 * carbon-angular v0.0.0 | radio.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { RadioChange } from "./radio-change.class";
/**
 * class: Radio (extends Checkbox)
 *
 * selector: `n-radio`
 *
 * source: `src/forms/radio.component.ts`
 *
 * ```html
 * <ibm-radio [(ngModel)]="radioState">Radio</ibm-radio>
 * ```
 *
 * Also see: [`RadioGroup`](#ibm-radio-group)
 */
import * as ɵngcc0 from '@angular/core';
export declare class Radio {
    /**
     * Used to dynamically create unique ids for the `Radio`.
     */
    static radioCount: number;
    checked: boolean;
    name: string;
    disabled: boolean;
    labelPlacement: "right" | "left";
    ariaLabelledby: string;
    /**
     * Used to set the `aria-label` attribute on the input label.
     */
    ariaLabel: string;
    /**
     * Sets the HTML required attribute
     */
    required: boolean;
    /**
     * The value of the `Radio`.
     */
    value: string;
    /**
     * Set to `true` for a loading table.
     */
    skeleton: boolean;
    /**
     * The id for the `Radio`.
     */
    id: string;
    /**
     * emits when the state of the radio changes
     */
    change: EventEmitter<RadioChange>;
    hostClass: boolean;
    readonly labelLeft: boolean;
    protected _labelledby: string;
    /**
     * Handler provided by the `RadioGroup` to bubble events up
     */
    radioChangeHandler: (event: RadioChange) => void;
    /**
     * Synchronizes with the `RadioGroup` in the event of a changed `Radio`.
     * Emits the changes of both the `RadioGroup` and `Radio`.
     */
    onChange(event: Event): void;
    onClick(event: Event): void;
    /**
     * Method called by `RadioGroup` with a callback function to bubble `RadioChange` events
     * @param fn callback that expects a `RadioChange` as an argument
     */
    registerRadioChangeHandler(fn: (event: RadioChange) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Radio>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Radio, "ibm-radio", never, {
    "checked": "checked";
    "name": "name";
    "disabled": "disabled";
    "labelPlacement": "labelPlacement";
    "ariaLabel": "ariaLabel";
    "required": "required";
    "value": "value";
    "skeleton": "skeleton";
    "id": "id";
    "ariaLabelledby": "ariaLabelledby";
}, {
    "change": "change";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvREEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCByYWRpby5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFJhZGlvQ2hhbmdlIH0gZnJvbSBcIi4vcmFkaW8tY2hhbmdlLmNsYXNzXCI7XG4vKipcbiAqIGNsYXNzOiBSYWRpbyAoZXh0ZW5kcyBDaGVja2JveClcbiAqXG4gKiBzZWxlY3RvcjogYG4tcmFkaW9gXG4gKlxuICogc291cmNlOiBgc3JjL2Zvcm1zL3JhZGlvLmNvbXBvbmVudC50c2BcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLXJhZGlvIFsobmdNb2RlbCldPVwicmFkaW9TdGF0ZVwiPlJhZGlvPC9pYm0tcmFkaW8+XG4gKiBgYGBcbiAqXG4gKiBBbHNvIHNlZTogW2BSYWRpb0dyb3VwYF0oI2libS1yYWRpby1ncm91cClcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmFkaW8ge1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZHluYW1pY2FsbHkgY3JlYXRlIHVuaXF1ZSBpZHMgZm9yIHRoZSBgUmFkaW9gLlxuICAgICAqL1xuICAgIHN0YXRpYyByYWRpb0NvdW50OiBudW1iZXI7XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbGFiZWxQbGFjZW1lbnQ6IFwicmlnaHRcIiB8IFwibGVmdFwiO1xuICAgIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgdGhlIGBhcmlhLWxhYmVsYCBhdHRyaWJ1dGUgb24gdGhlIGlucHV0IGxhYmVsLlxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEhUTUwgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAgICovXG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBgUmFkaW9gLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBmb3IgYSBsb2FkaW5nIHRhYmxlLlxuICAgICAqL1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBmb3IgdGhlIGBSYWRpb2AuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBlbWl0cyB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgcmFkaW8gY2hhbmdlc1xuICAgICAqL1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFJhZGlvQ2hhbmdlPjtcbiAgICBob3N0Q2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbGFiZWxMZWZ0OiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfbGFiZWxsZWRieTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgcHJvdmlkZWQgYnkgdGhlIGBSYWRpb0dyb3VwYCB0byBidWJibGUgZXZlbnRzIHVwXG4gICAgICovXG4gICAgcmFkaW9DaGFuZ2VIYW5kbGVyOiAoZXZlbnQ6IFJhZGlvQ2hhbmdlKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN5bmNocm9uaXplcyB3aXRoIHRoZSBgUmFkaW9Hcm91cGAgaW4gdGhlIGV2ZW50IG9mIGEgY2hhbmdlZCBgUmFkaW9gLlxuICAgICAqIEVtaXRzIHRoZSBjaGFuZ2VzIG9mIGJvdGggdGhlIGBSYWRpb0dyb3VwYCBhbmQgYFJhZGlvYC5cbiAgICAgKi9cbiAgICBvbkNoYW5nZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG9uQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIGJ5IGBSYWRpb0dyb3VwYCB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYnViYmxlIGBSYWRpb0NoYW5nZWAgZXZlbnRzXG4gICAgICogQHBhcmFtIGZuIGNhbGxiYWNrIHRoYXQgZXhwZWN0cyBhIGBSYWRpb0NoYW5nZWAgYXMgYW4gYXJndW1lbnRcbiAgICAgKi9cbiAgICByZWdpc3RlclJhZGlvQ2hhbmdlSGFuZGxlcihmbjogKGV2ZW50OiBSYWRpb0NoYW5nZSkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXX0=