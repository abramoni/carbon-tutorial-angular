/**
 *
 * carbon-angular v0.0.0 | alert-modal.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { AfterViewInit } from "@angular/core";
import { BaseModal } from "./base-modal.class";
/**
 * Component to create standard modals for presenting content or asking for user's input.
 * It can show as a passive modal showing only text or show as a transactional modal with
 * multiple buttons for different actions for the user to choose from.
 *
 * Using a modal in your application requires `ibm-placeholder` which would generally be
 * placed near the end of your app component template (app.component.ts or app.component.html) as:
 *
 * ```html
 * <ibm-placeholder></ibm-placeholder>
 * ```
 *
 * Example of opening the modal:
 *
 * ```typescript
 * \@Component({
 *  selector: "app-modal-demo",
 *  template: `
 *   <button class="btn--primary" (click)="openModal()">Open modal</button>
 *   <ibm-placeholder></ibm-placeholder>`
 * })
 * export class ModalDemo {
 * 	openModal() {
 * 		this.modalService.show({
 *			modalType: "default",
 *			label: "optional header text",
 *			title: "Modal title",
 *			text: "Modal text",
 *			buttons: [{
 *				text: "Button text",
 *				type: "primary",
 *				click: clickFunction
 *			}]
 *		});
 * 	}
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class AlertModal extends BaseModal implements AfterViewInit {
    type: string;
    label: string;
    title: string;
    content: string;
    size: string;
    hasScrollingContent: boolean;
    buttons: any[];
    onClose: Function;
    showCloseButton: boolean;
    modalContent: any;
    /**
     * Creates an instance of `AlertModal`.
     */
    constructor(type: string, label: string, title: string, content: string, size: string, hasScrollingContent: boolean, buttons: any[], onClose: Function, showCloseButton?: boolean);
    ngAfterViewInit(): boolean;
    buttonClicked(buttonIndex: any): void;
    dismissModal(trigger: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlertModal>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AlertModal, "ibm-alert-modal", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtbW9kYWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0LW1vZGFsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNERBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGFsZXJ0LW1vZGFsLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJhc2VNb2RhbCB9IGZyb20gXCIuL2Jhc2UtbW9kYWwuY2xhc3NcIjtcbi8qKlxuICogQ29tcG9uZW50IHRvIGNyZWF0ZSBzdGFuZGFyZCBtb2RhbHMgZm9yIHByZXNlbnRpbmcgY29udGVudCBvciBhc2tpbmcgZm9yIHVzZXIncyBpbnB1dC5cbiAqIEl0IGNhbiBzaG93IGFzIGEgcGFzc2l2ZSBtb2RhbCBzaG93aW5nIG9ubHkgdGV4dCBvciBzaG93IGFzIGEgdHJhbnNhY3Rpb25hbCBtb2RhbCB3aXRoXG4gKiBtdWx0aXBsZSBidXR0b25zIGZvciBkaWZmZXJlbnQgYWN0aW9ucyBmb3IgdGhlIHVzZXIgdG8gY2hvb3NlIGZyb20uXG4gKlxuICogVXNpbmcgYSBtb2RhbCBpbiB5b3VyIGFwcGxpY2F0aW9uIHJlcXVpcmVzIGBpYm0tcGxhY2Vob2xkZXJgIHdoaWNoIHdvdWxkIGdlbmVyYWxseSBiZVxuICogcGxhY2VkIG5lYXIgdGhlIGVuZCBvZiB5b3VyIGFwcCBjb21wb25lbnQgdGVtcGxhdGUgKGFwcC5jb21wb25lbnQudHMgb3IgYXBwLmNvbXBvbmVudC5odG1sKSBhczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLXBsYWNlaG9sZGVyPjwvaWJtLXBsYWNlaG9sZGVyPlxuICogYGBgXG4gKlxuICogRXhhbXBsZSBvZiBvcGVuaW5nIHRoZSBtb2RhbDpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBcXEBDb21wb25lbnQoe1xuICogIHNlbGVjdG9yOiBcImFwcC1tb2RhbC1kZW1vXCIsXG4gKiAgdGVtcGxhdGU6IGBcbiAqICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi0tcHJpbWFyeVwiIChjbGljayk9XCJvcGVuTW9kYWwoKVwiPk9wZW4gbW9kYWw8L2J1dHRvbj5cbiAqICAgPGlibS1wbGFjZWhvbGRlcj48L2libS1wbGFjZWhvbGRlcj5gXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIE1vZGFsRGVtbyB7XG4gKiBcdG9wZW5Nb2RhbCgpIHtcbiAqIFx0XHR0aGlzLm1vZGFsU2VydmljZS5zaG93KHtcbiAqXHRcdFx0bW9kYWxUeXBlOiBcImRlZmF1bHRcIixcbiAqXHRcdFx0bGFiZWw6IFwib3B0aW9uYWwgaGVhZGVyIHRleHRcIixcbiAqXHRcdFx0dGl0bGU6IFwiTW9kYWwgdGl0bGVcIixcbiAqXHRcdFx0dGV4dDogXCJNb2RhbCB0ZXh0XCIsXG4gKlx0XHRcdGJ1dHRvbnM6IFt7XG4gKlx0XHRcdFx0dGV4dDogXCJCdXR0b24gdGV4dFwiLFxuICpcdFx0XHRcdHR5cGU6IFwicHJpbWFyeVwiLFxuICpcdFx0XHRcdGNsaWNrOiBjbGlja0Z1bmN0aW9uXG4gKlx0XHRcdH1dXG4gKlx0XHR9KTtcbiAqIFx0fVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFsZXJ0TW9kYWwgZXh0ZW5kcyBCYXNlTW9kYWwgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gICAgaGFzU2Nyb2xsaW5nQ29udGVudDogYm9vbGVhbjtcbiAgICBidXR0b25zOiBhbnlbXTtcbiAgICBvbkNsb3NlOiBGdW5jdGlvbjtcbiAgICBzaG93Q2xvc2VCdXR0b246IGJvb2xlYW47XG4gICAgbW9kYWxDb250ZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgQWxlcnRNb2RhbGAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIHNpemU6IHN0cmluZywgaGFzU2Nyb2xsaW5nQ29udGVudDogYm9vbGVhbiwgYnV0dG9uczogYW55W10sIG9uQ2xvc2U6IEZ1bmN0aW9uLCBzaG93Q2xvc2VCdXR0b24/OiBib29sZWFuKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogYm9vbGVhbjtcbiAgICBidXR0b25DbGlja2VkKGJ1dHRvbkluZGV4OiBhbnkpOiB2b2lkO1xuICAgIGRpc21pc3NNb2RhbCh0cmlnZ2VyOiBhbnkpOiB2b2lkO1xufVxuIl19