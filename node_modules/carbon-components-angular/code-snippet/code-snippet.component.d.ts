/**
 *
 * carbon-angular v0.0.0 | code-snippet.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { AfterViewInit } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
import * as ɵngcc0 from '@angular/core';
export declare enum SnippetType {
    single = "single",
    multi = "multi",
    inline = "inline"
}
/**
 * [See demo](../../?path=/story/components-code-snippet--basic)
 *
 * ```html
 * <ibm-code-snippet>Code</ibm-code-snippet>
 * ```
 *
 * <example-url>../../iframe.html?id=components-code-snippet--basic</example-url>
 */
export declare class CodeSnippet implements AfterViewInit {
    protected i18n: I18n;
    /**
     * Variable used for creating unique ids for code-snippet components.
     */
    static codeSnippetCount: number;
    /**
     * It can be `"single"`, `"multi"` or `"inline"`
     *
     */
    display: SnippetType;
    translations: any;
    /**
     * Set to `"light"` to apply the light style on the code snippet.
     */
    theme: "light" | "dark";
    /**
     * Text displayed in the tooltip when user clicks button to copy code.
     *
     */
    feedbackText: any;
    /**
     * Time in miliseconds to keep the feedback tooltip displayed.
     *
     */
    feedbackTimeout: number;
    expanded: boolean;
    skeleton: boolean;
    snippetClass: boolean;
    readonly snippetSingleClass: boolean;
    readonly snippetMultiClass: boolean;
    readonly snippetInlineClass: boolean;
    readonly snippetInlineLightClass: boolean;
    readonly btnCopyClass: boolean;
    readonly displayStyle: string;
    readonly attrType: string;
    code: any;
    readonly shouldShowExpandButton: any;
    showFeedback: boolean;
    hasExpandButton: any;
    /**
     * Creates an instance of CodeSnippet.
     */
    constructor(i18n: I18n);
    toggleSnippetExpansion(): void;
    /**
     * Copies the code from the `<code>` block to clipboard.
     *
     */
    copyCode(): void;
    onCopyButtonClicked(): void;
    ngAfterViewInit(): void;
    /**
     * Inline code snippet acts as button and makes the whole component clickable.
     *
     * This handles clicks in that case.
     */
    hostClick(): void;
    protected canExpand(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CodeSnippet>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CodeSnippet, "ibm-code-snippet", never, {
    "display": "display";
    "translations": "translations";
    "theme": "theme";
    "feedbackText": "feedbackText";
    "feedbackTimeout": "feedbackTimeout";
    "expanded": "expanded";
    "skeleton": "skeleton";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1zbmlwcGV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjb2RlLXNuaXBwZXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGNvZGUtc25pcHBldC5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBTbmlwcGV0VHlwZSB7XG4gICAgc2luZ2xlID0gXCJzaW5nbGVcIixcbiAgICBtdWx0aSA9IFwibXVsdGlcIixcbiAgICBpbmxpbmUgPSBcImlubGluZVwiXG59XG4vKipcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtY29kZS1zbmlwcGV0LS1iYXNpYylcbiAqXG4gKiBgYGBodG1sXG4gKiA8aWJtLWNvZGUtc25pcHBldD5Db2RlPC9pYm0tY29kZS1zbmlwcGV0PlxuICogYGBgXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtY29kZS1zbmlwcGV0LS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvZGVTbmlwcGV0IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJvdGVjdGVkIGkxOG46IEkxOG47XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdXNlZCBmb3IgY3JlYXRpbmcgdW5pcXVlIGlkcyBmb3IgY29kZS1zbmlwcGV0IGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgc3RhdGljIGNvZGVTbmlwcGV0Q291bnQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJdCBjYW4gYmUgYFwic2luZ2xlXCJgLCBgXCJtdWx0aVwiYCBvciBgXCJpbmxpbmVcImBcbiAgICAgKlxuICAgICAqL1xuICAgIGRpc3BsYXk6IFNuaXBwZXRUeXBlO1xuICAgIHRyYW5zbGF0aW9uczogYW55O1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgXCJsaWdodFwiYCB0byBhcHBseSB0aGUgbGlnaHQgc3R5bGUgb24gdGhlIGNvZGUgc25pcHBldC5cbiAgICAgKi9cbiAgICB0aGVtZTogXCJsaWdodFwiIHwgXCJkYXJrXCI7XG4gICAgLyoqXG4gICAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgd2hlbiB1c2VyIGNsaWNrcyBidXR0b24gdG8gY29weSBjb2RlLlxuICAgICAqXG4gICAgICovXG4gICAgZmVlZGJhY2tUZXh0OiBhbnk7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtaWxpc2Vjb25kcyB0byBrZWVwIHRoZSBmZWVkYmFjayB0b29sdGlwIGRpc3BsYXllZC5cbiAgICAgKlxuICAgICAqL1xuICAgIGZlZWRiYWNrVGltZW91dDogbnVtYmVyO1xuICAgIGV4cGFuZGVkOiBib29sZWFuO1xuICAgIHNrZWxldG9uOiBib29sZWFuO1xuICAgIHNuaXBwZXRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzbmlwcGV0U2luZ2xlQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc25pcHBldE11bHRpQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc25pcHBldElubGluZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNuaXBwZXRJbmxpbmVMaWdodENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGJ0bkNvcHlDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNwbGF5U3R5bGU6IHN0cmluZztcbiAgICByZWFkb25seSBhdHRyVHlwZTogc3RyaW5nO1xuICAgIGNvZGU6IGFueTtcbiAgICByZWFkb25seSBzaG91bGRTaG93RXhwYW5kQnV0dG9uOiBhbnk7XG4gICAgc2hvd0ZlZWRiYWNrOiBib29sZWFuO1xuICAgIGhhc0V4cGFuZEJ1dHRvbjogYW55O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29kZVNuaXBwZXQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaTE4bjogSTE4bik7XG4gICAgdG9nZ2xlU25pcHBldEV4cGFuc2lvbigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgY29kZSBmcm9tIHRoZSBgPGNvZGU+YCBibG9jayB0byBjbGlwYm9hcmQuXG4gICAgICpcbiAgICAgKi9cbiAgICBjb3B5Q29kZSgpOiB2b2lkO1xuICAgIG9uQ29weUJ1dHRvbkNsaWNrZWQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbmxpbmUgY29kZSBzbmlwcGV0IGFjdHMgYXMgYnV0dG9uIGFuZCBtYWtlcyB0aGUgd2hvbGUgY29tcG9uZW50IGNsaWNrYWJsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgaGFuZGxlcyBjbGlja3MgaW4gdGhhdCBjYXNlLlxuICAgICAqL1xuICAgIGhvc3RDbGljaygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjYW5FeHBhbmQoKTogYm9vbGVhbjtcbn1cbiJdfQ==