/**
 *
 * carbon-angular v0.0.0 | placeholder.service.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ComponentRef, ViewContainerRef, ComponentFactory, Injector } from "@angular/core";
/**
 * Singleton service used to register the container for out-of-flow components to insert into.
 * Also used to insert/remove components from that view.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PlaceholderService {
    /**
     * Main `ViewContainerRef` to insert components into
     */
    protected viewContainerRef: ViewContainerRef;
    /**
     * Map of id's to secondary `ViewContainerRef`s
     */
    protected viewContainerMap: Map<any, ViewContainerRef>;
    /**
     * Used by `Placeholder` to register view-container reference.
     */
    registerViewContainerRef(vcRef: ViewContainerRef, id?: any): void;
    /**
     * Creates and returns component in the view.
     */
    createComponent(componentFactory: ComponentFactory<any>, injector: Injector, id?: any): ComponentRef<any>;
    destroyComponent(component: ComponentRef<any>): void;
    hasComponentRef(component: ComponentRef<any>, id?: any): boolean;
    hasPlaceholderRef(id?: any): boolean;
    appendElement(element: HTMLElement, id?: any): HTMLElement;
    removeElement(element: HTMLElement, id?: any): HTMLElement;
    hasElement(element: HTMLElement, id?: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PlaceholderService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PlaceholderService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwbGFjZWhvbGRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgcGxhY2Vob2xkZXIuc2VydmljZS5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnksIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogU2luZ2xldG9uIHNlcnZpY2UgdXNlZCB0byByZWdpc3RlciB0aGUgY29udGFpbmVyIGZvciBvdXQtb2YtZmxvdyBjb21wb25lbnRzIHRvIGluc2VydCBpbnRvLlxuICogQWxzbyB1c2VkIHRvIGluc2VydC9yZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoYXQgdmlldy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGxhY2Vob2xkZXJTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBNYWluIGBWaWV3Q29udGFpbmVyUmVmYCB0byBpbnNlcnQgY29tcG9uZW50cyBpbnRvXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XG4gICAgLyoqXG4gICAgICogTWFwIG9mIGlkJ3MgdG8gc2Vjb25kYXJ5IGBWaWV3Q29udGFpbmVyUmVmYHNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdmlld0NvbnRhaW5lck1hcDogTWFwPGFueSwgVmlld0NvbnRhaW5lclJlZj47XG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgUGxhY2Vob2xkZXJgIHRvIHJlZ2lzdGVyIHZpZXctY29udGFpbmVyIHJlZmVyZW5jZS5cbiAgICAgKi9cbiAgICByZWdpc3RlclZpZXdDb250YWluZXJSZWYodmNSZWY6IFZpZXdDb250YWluZXJSZWYsIGlkPzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGNvbXBvbmVudCBpbiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxhbnk+LCBpbmplY3RvcjogSW5qZWN0b3IsIGlkPzogYW55KTogQ29tcG9uZW50UmVmPGFueT47XG4gICAgZGVzdHJveUNvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KTogdm9pZDtcbiAgICBoYXNDb21wb25lbnRSZWYoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PiwgaWQ/OiBhbnkpOiBib29sZWFuO1xuICAgIGhhc1BsYWNlaG9sZGVyUmVmKGlkPzogYW55KTogYm9vbGVhbjtcbiAgICBhcHBlbmRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBpZD86IGFueSk6IEhUTUxFbGVtZW50O1xuICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGlkPzogYW55KTogSFRNTEVsZW1lbnQ7XG4gICAgaGFzRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCwgaWQ/OiBhbnkpOiBib29sZWFuO1xufVxuIl19