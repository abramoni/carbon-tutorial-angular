/**
 *
 * carbon-angular v0.0.0 | icon.service.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * An object that represents a parsed icon
 */
import * as ɵngcc0 from '@angular/core';
export interface IconDescriptor {
    /**
     * The element to render. For the root this is `svg`
     */
    elem: string;
    /**
     * An object of attributes to apply to the element.
     *
     * The type here is non-exhaustive.
     */
    attrs: {
        xmlns: string;
        viewBox: string;
        fill: string;
        width: string;
        height: string;
        [x: string]: string;
    };
    /**
     * The content (children) of the element as an array of `IconDescriptor`s
     * (usually without a few fields, namely `name` and `size`)
     */
    content: IconDescriptor[];
    /**
     * The name of the icon.
     *
     * Needed by the icon service.
     */
    name: string;
    /**
     * The size of the icon in pixels.
     *
     * Needed by the icon service.
     */
    size: number;
    /**
     * Optional. A string representation of the compiled svg.
     * If missing the icon service will add this.
     */
    svg?: string;
}
/**
 * Abstract class that represent a cache of icons.
 *
 * The actual caching mechanism will be implementation specific,
 * but it's likely a good idea to key by the icons name and/or size.
 * Icon name and size will always be strings, and they will be the two consistent
 * identifiers of an icon. For the purposes of storage additonal descriptor properties may
 * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.
 */
export declare abstract class IconCache {
    /**
     * Finds and returns an icon based on it's name and size
     */
    abstract get(name: string, size: string): object;
    /**
     * stores an icon descriptor to the cache
     */
    abstract set(name: string, size: string, descriptor: object): void;
}
/**
 * Custom error for when a name can't be found
 */
export declare class IconNameNotFoundError extends Error {
    constructor(name: string);
}
/**
 * Custom error for when a specific size can't be found
 */
export declare class IconSizeNotFoundError extends Error {
    constructor(size: string, name: string);
}
/**
 * Concrete implementation of `IconCache` as a simple in memory cache
 */
export declare class IconMemoryCache extends IconCache {
    private iconMap;
    get(name: string, size: string): object;
    set(name: string, size: string, descriptor: object): void;
}
/**
 * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.
 *
 * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.
 *
 * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.
 * Instead register only the icons in use by your application. If your application makes use of lazy loaded
 * modules you may also lazy load the icons used in that module by registering them early on in that module.
 *
 * `ngOnInit` should be sufficiantly early to register icons.
 *
 * Example:
 * ```
 * import { Accessibility16 } from "@carbon/icons";
 *
 * // ...
 *
 * class MyComponent implements OnInit {
 * 	constructor(protected iconService: IconService) {}
 *
 * 	// ...
 *
 * 	ngOnInit() {
 * 		this.iconService.register(Accessibility16);
 * 	}
 *
 * 	// ...
 * }
 * ```
 *
 * If needed it is possible to register an icon under a different name, via `registerAs`.
 */
export declare class IconService {
    private iconCache;
    /**
     * Registers an array of icons based on the metadata provided by `@carbon/cions`
     */
    registerAll(descriptors: object[]): void;
    /**
     * Registers an icon based on the metadata provided by `@carbon/icons`
     */
    register(descriptor: object): void;
    /**
     * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`
     */
    registerAs(name: string, descriptor: object): void;
    /**
     * Gets an icon, converts it to a string, and caches the result
     */
    get(name: string, size: string): IconDescriptor;
    /**
     * Configure various service settings (caching strategy ...)
     */
    configure(options: {
        cache: IconCache;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IconService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImljb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdJQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IGljb24uc2VydmljZS5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBwYXJzZWQgaWNvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEljb25EZXNjcmlwdG9yIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCB0byByZW5kZXIuIEZvciB0aGUgcm9vdCB0aGlzIGlzIGBzdmdgXG4gICAgICovXG4gICAgZWxlbTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogVGhlIHR5cGUgaGVyZSBpcyBub24tZXhoYXVzdGl2ZS5cbiAgICAgKi9cbiAgICBhdHRyczoge1xuICAgICAgICB4bWxuczogc3RyaW5nO1xuICAgICAgICB2aWV3Qm94OiBzdHJpbmc7XG4gICAgICAgIGZpbGw6IHN0cmluZztcbiAgICAgICAgd2lkdGg6IHN0cmluZztcbiAgICAgICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgICAgIFt4OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGVudCAoY2hpbGRyZW4pIG9mIHRoZSBlbGVtZW50IGFzIGFuIGFycmF5IG9mIGBJY29uRGVzY3JpcHRvcmBzXG4gICAgICogKHVzdWFsbHkgd2l0aG91dCBhIGZldyBmaWVsZHMsIG5hbWVseSBgbmFtZWAgYW5kIGBzaXplYClcbiAgICAgKi9cbiAgICBjb250ZW50OiBJY29uRGVzY3JpcHRvcltdO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uLlxuICAgICAqXG4gICAgICogTmVlZGVkIGJ5IHRoZSBpY29uIHNlcnZpY2UuXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoZSBpY29uIGluIHBpeGVscy5cbiAgICAgKlxuICAgICAqIE5lZWRlZCBieSB0aGUgaWNvbiBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHNpemU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbC4gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbXBpbGVkIHN2Zy5cbiAgICAgKiBJZiBtaXNzaW5nIHRoZSBpY29uIHNlcnZpY2Ugd2lsbCBhZGQgdGhpcy5cbiAgICAgKi9cbiAgICBzdmc/OiBzdHJpbmc7XG59XG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgcmVwcmVzZW50IGEgY2FjaGUgb2YgaWNvbnMuXG4gKlxuICogVGhlIGFjdHVhbCBjYWNoaW5nIG1lY2hhbmlzbSB3aWxsIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLFxuICogYnV0IGl0J3MgbGlrZWx5IGEgZ29vZCBpZGVhIHRvIGtleSBieSB0aGUgaWNvbnMgbmFtZSBhbmQvb3Igc2l6ZS5cbiAqIEljb24gbmFtZSBhbmQgc2l6ZSB3aWxsIGFsd2F5cyBiZSBzdHJpbmdzLCBhbmQgdGhleSB3aWxsIGJlIHRoZSB0d28gY29uc2lzdGVudFxuICogaWRlbnRpZmllcnMgb2YgYW4gaWNvbi4gRm9yIHRoZSBwdXJwb3NlcyBvZiBzdG9yYWdlIGFkZGl0b25hbCBkZXNjcmlwdG9yIHByb3BlcnRpZXMgbWF5XG4gKiBiZSB1c2VkLCBidXQgdGhlIG5hbWUgYW5kIHNpemUgYXJlIHRoZSBvbmx5IG9uZXMgZ3VhcmVudGVlZCB0byBiZSBwYXNzZWQgZm9yIGxvb2t1cCBwdXJwb3Nlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgSWNvbkNhY2hlIHtcbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbmQgcmV0dXJucyBhbiBpY29uIGJhc2VkIG9uIGl0J3MgbmFtZSBhbmQgc2l6ZVxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldChuYW1lOiBzdHJpbmcsIHNpemU6IHN0cmluZyk6IG9iamVjdDtcbiAgICAvKipcbiAgICAgKiBzdG9yZXMgYW4gaWNvbiBkZXNjcmlwdG9yIHRvIHRoZSBjYWNoZVxuICAgICAqL1xuICAgIGFic3RyYWN0IHNldChuYW1lOiBzdHJpbmcsIHNpemU6IHN0cmluZywgZGVzY3JpcHRvcjogb2JqZWN0KTogdm9pZDtcbn1cbi8qKlxuICogQ3VzdG9tIGVycm9yIGZvciB3aGVuIGEgbmFtZSBjYW4ndCBiZSBmb3VuZFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJY29uTmFtZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKTtcbn1cbi8qKlxuICogQ3VzdG9tIGVycm9yIGZvciB3aGVuIGEgc3BlY2lmaWMgc2l6ZSBjYW4ndCBiZSBmb3VuZFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJY29uU2l6ZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpO1xufVxuLyoqXG4gKiBDb25jcmV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBgSWNvbkNhY2hlYCBhcyBhIHNpbXBsZSBpbiBtZW1vcnkgY2FjaGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWNvbk1lbW9yeUNhY2hlIGV4dGVuZHMgSWNvbkNhY2hlIHtcbiAgICBwcml2YXRlIGljb25NYXA7XG4gICAgZ2V0KG5hbWU6IHN0cmluZywgc2l6ZTogc3RyaW5nKTogb2JqZWN0O1xuICAgIHNldChuYW1lOiBzdHJpbmcsIHNpemU6IHN0cmluZywgZGVzY3JpcHRvcjogb2JqZWN0KTogdm9pZDtcbn1cbi8qKlxuICogVGhlIGljb24gc2VydmljZSBpcyBhIHNpbmdsZXRvbiBzZXJ2aWNlIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyBhbmQgcmV0cml2aW5nIGljb25zIGZyb20gYEBjYXJib24vaWNvbnNgLlxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHJlZ2lzdGVyIGljb25zIGJlZm9yZSB1c2UuIEl0J3MgcmVjY29tbWVuZGVkIHRvIHJlZ2lzdGVyIHlvdXIgaWNvbnMgZWFybHksIGxpa2VseSBpbiB5b3VyIGFwcC5jb21wb25lbnQuXG4gKlxuICogVG8gYWxsb3cgZm9yIGltcHJvdmVkIHRyZWUgc2hha2luZyBfZG8gbm90XyBpbXBvcnQgYWxsIHRoZSBpY29ucyBmcm9tIGBAY2FyYm9uL2ljb25zYCBhbmQgcmVnaXN0ZXIgdGhlbS5cbiAqIEluc3RlYWQgcmVnaXN0ZXIgb25seSB0aGUgaWNvbnMgaW4gdXNlIGJ5IHlvdXIgYXBwbGljYXRpb24uIElmIHlvdXIgYXBwbGljYXRpb24gbWFrZXMgdXNlIG9mIGxhenkgbG9hZGVkXG4gKiBtb2R1bGVzIHlvdSBtYXkgYWxzbyBsYXp5IGxvYWQgdGhlIGljb25zIHVzZWQgaW4gdGhhdCBtb2R1bGUgYnkgcmVnaXN0ZXJpbmcgdGhlbSBlYXJseSBvbiBpbiB0aGF0IG1vZHVsZS5cbiAqXG4gKiBgbmdPbkluaXRgIHNob3VsZCBiZSBzdWZmaWNpYW50bHkgZWFybHkgdG8gcmVnaXN0ZXIgaWNvbnMuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYFxuICogaW1wb3J0IHsgQWNjZXNzaWJpbGl0eTE2IH0gZnJvbSBcIkBjYXJib24vaWNvbnNcIjtcbiAqXG4gKiAvLyAuLi5cbiAqXG4gKiBjbGFzcyBNeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gKiBcdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpY29uU2VydmljZTogSWNvblNlcnZpY2UpIHt9XG4gKlxuICogXHQvLyAuLi5cbiAqXG4gKiBcdG5nT25Jbml0KCkge1xuICogXHRcdHRoaXMuaWNvblNlcnZpY2UucmVnaXN0ZXIoQWNjZXNzaWJpbGl0eTE2KTtcbiAqIFx0fVxuICpcbiAqIFx0Ly8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJZiBuZWVkZWQgaXQgaXMgcG9zc2libGUgdG8gcmVnaXN0ZXIgYW4gaWNvbiB1bmRlciBhIGRpZmZlcmVudCBuYW1lLCB2aWEgYHJlZ2lzdGVyQXNgLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJY29uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBpY29uQ2FjaGU7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGFuIGFycmF5IG9mIGljb25zIGJhc2VkIG9uIHRoZSBtZXRhZGF0YSBwcm92aWRlZCBieSBgQGNhcmJvbi9jaW9uc2BcbiAgICAgKi9cbiAgICByZWdpc3RlckFsbChkZXNjcmlwdG9yczogb2JqZWN0W10pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBpY29uIGJhc2VkIG9uIHRoZSBtZXRhZGF0YSBwcm92aWRlZCBieSBgQGNhcmJvbi9pY29uc2BcbiAgICAgKi9cbiAgICByZWdpc3RlcihkZXNjcmlwdG9yOiBvYmplY3QpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBpY29uIGJhc2VkIG9uIGEgdW5pcWUgbmFtZSBhbmQgbWV0YWRhdGEgcHJvdmlkZWQgYnkgYEBjYXJib24vaWNvbnNgXG4gICAgICovXG4gICAgcmVnaXN0ZXJBcyhuYW1lOiBzdHJpbmcsIGRlc2NyaXB0b3I6IG9iamVjdCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBpY29uLCBjb252ZXJ0cyBpdCB0byBhIHN0cmluZywgYW5kIGNhY2hlcyB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgZ2V0KG5hbWU6IHN0cmluZywgc2l6ZTogc3RyaW5nKTogSWNvbkRlc2NyaXB0b3I7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlIHZhcmlvdXMgc2VydmljZSBzZXR0aW5ncyAoY2FjaGluZyBzdHJhdGVneSAuLi4pXG4gICAgICovXG4gICAgY29uZmlndXJlKG9wdGlvbnM6IHtcbiAgICAgICAgY2FjaGU6IEljb25DYWNoZTtcbiAgICB9KTogdm9pZDtcbn1cbiJdfQ==