/**
 *
 * carbon-angular v0.0.0 | progress-indicator.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, OnChanges, SimpleChanges } from "@angular/core";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { Step } from "./progress-indicator-step.interface";
/**
 * [See demo](../../?path=/story/components-progress-indicator--basic)
 *
 * <example-url>../../iframe.html?id=components-progress-indicator--basic</example-url>
 */
import * as ɵngcc0 from '@angular/core';
export declare class ProgressIndicator implements OnChanges {
    protected experimental: ExperimentalService;
    static skeletonSteps(stepCount: number): any[];
    stepSelected: EventEmitter<{
        step: Step;
        index: number;
    }>;
    steps: Array<Step>;
    orientation: "horizontal" | "vertical";
    skeleton: boolean;
    spacing: "default" | "equal";
    current: number;
    private _current;
    constructor(experimental: ExperimentalService);
    ngOnChanges(changes: SimpleChanges): void;
    private setProgressIndicatorStates;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressIndicator>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProgressIndicator, "ibm-progress-indicator", never, {
    "orientation": "orientation";
    "skeleton": "skeleton";
    "spacing": "spacing";
    "current": "current";
    "steps": "steps";
}, {
    "stepSelected": "stepSelected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtaW5kaWNhdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwcm9ncmVzcy1pbmRpY2F0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHByb2dyZXNzLWluZGljYXRvci5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRXhwZXJpbWVudGFsU2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2V4cGVyaW1lbnRhbFwiO1xuaW1wb3J0IHsgU3RlcCB9IGZyb20gXCIuL3Byb2dyZXNzLWluZGljYXRvci1zdGVwLmludGVyZmFjZVwiO1xuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXByb2dyZXNzLWluZGljYXRvci0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtcHJvZ3Jlc3MtaW5kaWNhdG9yLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByb2dyZXNzSW5kaWNhdG9yIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcm90ZWN0ZWQgZXhwZXJpbWVudGFsOiBFeHBlcmltZW50YWxTZXJ2aWNlO1xuICAgIHN0YXRpYyBza2VsZXRvblN0ZXBzKHN0ZXBDb3VudDogbnVtYmVyKTogYW55W107XG4gICAgc3RlcFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBzdGVwOiBTdGVwO1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgIH0+O1xuICAgIHN0ZXBzOiBBcnJheTxTdGVwPjtcbiAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCI7XG4gICAgc2tlbGV0b246IGJvb2xlYW47XG4gICAgc3BhY2luZzogXCJkZWZhdWx0XCIgfCBcImVxdWFsXCI7XG4gICAgY3VycmVudDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2N1cnJlbnQ7XG4gICAgY29uc3RydWN0b3IoZXhwZXJpbWVudGFsOiBFeHBlcmltZW50YWxTZXJ2aWNlKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBwcml2YXRlIHNldFByb2dyZXNzSW5kaWNhdG9yU3RhdGVzO1xufVxuIl19