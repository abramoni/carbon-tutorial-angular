/**
 *
 * carbon-angular v0.0.0 | tab-headers.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, QueryList, Input, HostListener, ViewChild, ContentChildren, ViewChildren, ElementRef, TemplateRef, ChangeDetectorRef } from "@angular/core";
import { EventService } from "carbon-components-angular/utils";
import { I18n } from "carbon-components-angular/i18n";
import { Tab } from "./tab.component";
/**
 * The `TabHeaders` component contains the `Tab` items and controls scroll functionality
 * if content has overflow.
 */
var TabHeaders = /** @class */ (function () {
    function TabHeaders(elementRef, changeDetectorRef, eventService, i18n) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.eventService = eventService;
        this.i18n = i18n;
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         * Duplicate from `n-tabs` to support standalone headers
         */
        this.cacheActive = false;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        this.type = "default";
        this.translations = this.i18n.get().PAGINATION;
        /**
         * The index of the first visible tab.
         */
        this.firstVisibleTab = 0;
        // width of the overflow buttons
        this.OVERFLOW_BUTTON_OFFSET = 40;
    }
    Object.defineProperty(TabHeaders.prototype, "hasHorizontalOverflow", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return tabList.scrollWidth > tabList.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabHeaders.prototype, "leftOverflowNavButtonHidden", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return !this.hasHorizontalOverflow || !tabList.scrollLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabHeaders.prototype, "rightOverflowNavButtonHidden", {
        get: function () {
            var tabList = this.headerContainer.nativeElement;
            return !this.hasHorizontalOverflow ||
                (tabList.scrollLeft + tabList.clientWidth) === tabList.scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    // keyboard accessibility
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    TabHeaders.prototype.keyboardInput = function (event) {
        var tabsArray = Array.from(this.tabs);
        // "Right" is an ie11 specific value
        if (event.key === "Right" || event.key === "ArrowRight") {
            if (this.currentSelectedTab < this.allTabHeaders.length - 1) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab + 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab + 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[0], 0);
                }
                this.allTabHeaders.first.nativeElement.focus();
            }
        }
        // "Left" is an ie11 specific value
        if (event.key === "Left" || event.key === "ArrowLeft") {
            if (this.currentSelectedTab > 0) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab - 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab - 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
                }
                this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
            }
        }
        if (event.key === "Home") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[0], 0);
            }
            this.allTabHeaders.toArray()[0].nativeElement.focus();
        }
        if (event.key === "End") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
            }
            this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
        }
        // `"Spacebar"` is IE11 specific value
        if ((event.key === " " || event.key === "Spacebar") && !this.followFocus) {
            this.selectTab(event.target, tabsArray[this.currentSelectedTab], this.currentSelectedTab);
        }
    };
    TabHeaders.prototype.ngOnInit = function () {
        var _this = this;
        this.eventService.on(window, "resize", function () { return _this.handleScroll(); });
    };
    TabHeaders.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.tabInput) {
            this.tabs = this.tabQuery;
        }
        else {
            this.tabs = this.tabInput;
        }
        this.tabs.forEach(function (tab) { return tab.cacheActive = _this.cacheActive; });
        this.tabs.changes.subscribe(function () {
            _this.setFirstTab();
        });
        this.setFirstTab();
    };
    TabHeaders.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.tabs && changes.cacheActive) {
            this.tabs.forEach(function (tab) { return tab.cacheActive = _this.cacheActive; });
        }
    };
    /**
     * Controls manually focusing tabs.
     */
    TabHeaders.prototype.onTabFocus = function (ref, index) {
        this.currentSelectedTab = index;
        // reset scroll left because we're already handling it
        this.headerContainer.nativeElement.parentElement.scrollLeft = 0;
    };
    TabHeaders.prototype.getSelectedTab = function () {
        var selected = this.tabs.find(function (tab) { return tab.active; });
        if (selected) {
            return selected;
        }
        return { headingIsTemplate: false, heading: "" };
    };
    /**
     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.
     */
    TabHeaders.prototype.selectTab = function (ref, tab, tabIndex) {
        if (tab.disabled) {
            return;
        }
        this.currentSelectedTab = tabIndex;
        this.tabs.forEach(function (_tab) { return _tab.active = false; });
        tab.active = true;
        tab.doSelect();
    };
    TabHeaders.prototype.handleScroll = function () {
        this.changeDetectorRef.markForCheck();
    };
    TabHeaders.prototype.handleOverflowNavClick = function (direction, multiplier) {
        if (multiplier === void 0) { multiplier = 15; }
        var tabList = this.headerContainer.nativeElement;
        var clientWidth = tabList.clientWidth, scrollLeft = tabList.scrollLeft, scrollWidth = tabList.scrollWidth;
        if (direction === 1 && !scrollLeft) {
            tabList.scrollLeft += this.OVERFLOW_BUTTON_OFFSET;
        }
        tabList.scrollLeft += direction * multiplier;
        var leftEdgeReached = direction === -1 && scrollLeft < this.OVERFLOW_BUTTON_OFFSET;
        var rightEdgeReached = direction === 1 &&
            scrollLeft + clientWidth >= scrollWidth - this.OVERFLOW_BUTTON_OFFSET;
        if (leftEdgeReached) {
            this.rightOverflowNavButton.nativeElement.focus();
        }
        if (rightEdgeReached) {
            this.leftOverflowNavButton.nativeElement.focus();
        }
    };
    TabHeaders.prototype.handleOverflowNavMouseDown = function (direction) {
        var _this = this;
        var tabList = this.headerContainer.nativeElement;
        this.overflowNavInterval = setInterval(function () {
            var clientWidth = tabList.clientWidth, scrollLeft = tabList.scrollLeft, scrollWidth = tabList.scrollWidth;
            // clear interval if scroll reaches left or right edge
            var leftEdgeReached = direction === -1 && scrollLeft < _this.OVERFLOW_BUTTON_OFFSET;
            var rightEdgeReached = direction === 1 &&
                scrollLeft + clientWidth >= scrollWidth - _this.OVERFLOW_BUTTON_OFFSET;
            if (leftEdgeReached || rightEdgeReached) {
                clearInterval(_this.overflowNavInterval);
            }
            // account for overflow button appearing and causing tablist width change
            _this.handleOverflowNavClick(direction);
        });
    };
    TabHeaders.prototype.handleOverflowNavMouseUp = function () {
        clearInterval(this.overflowNavInterval);
    };
    /**
     * Determines which `Tab` is initially selected.
     */
    TabHeaders.prototype.setFirstTab = function () {
        var _this = this;
        setTimeout(function () {
            var firstTab = _this.tabs.find(function (tab) { return tab.active; });
            if (!firstTab && _this.tabs.first) {
                firstTab = _this.tabs.first;
                firstTab.active = true;
            }
            if (firstTab) {
                firstTab.doSelect();
            }
        });
    };
    TabHeaders.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab-headers",
                    template: "\n\t\t<nav\n\t\t\tclass=\"bx--tabs--scrollable\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton,\n\t\t\t\t'bx--tabs--container bx--tabs--scrollable--container': type === 'container'\n\t\t\t}\"\n\t\t\trole=\"navigation\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\">\n\t\t\t<button\n\t\t\t\t#leftOverflowNavButton\n\t\t\t\ttype=\"button\"\n\t\t\t\t[title]=\"translations.PREVIOUS\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--tab--overflow-nav-button': hasHorizontalOverflow,\n\t\t\t\t\t'bx--tab--overflow-nav-button--hidden': leftOverflowNavButtonHidden\n\t\t\t\t}\"\n\t\t\t\t(click)=\"handleOverflowNavClick(-1)\"\n\t\t\t\t(mousedown)=\"handleOverflowNavMouseDown(-1)\"\n\t\t\t\t(mouseup)=\"handleOverflowNavMouseUp()\">\n\t\t\t\t<svg\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M5 8L10 3 10.7 3.7 6.4 8 10.7 12.3 10 13z\"></path>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t\t<div *ngIf=\"!leftOverflowNavButtonHidden\" class=\"bx--tabs__overflow-indicator--left\"></div>\n\t\t\t<ul\n\t\t\t\t#tabList\n\t\t\t\tclass=\"bx--tabs--scrollable__nav\"\n\t\t\t\trole=\"tablist\"\n\t\t\t\t(scroll)=\"handleScroll()\">\n\t\t\t\t<li role=\"presentation\">\n\t\t\t\t\t<ng-container *ngIf=\"contentBefore\" [ngTemplateOutlet]=\"contentBefore\"></ng-container>\n\t\t\t\t</li>\n\t\t\t\t<li\n\t\t\t\t\t*ngFor=\"let tab of tabs; let i = index;\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--tabs__nav-item--selected bx--tabs--scrollable__nav-item--selected': tab.active,\n\t\t\t\t\t\t'bx--tabs__nav-item--disabled bx--tabs--scrollable__nav-item--disabled': tab.disabled\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"bx--tabs--scrollable__nav-item\"\n\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\t(click)=\"selectTab(tabItem, tab, i)\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t#tabItem\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t[attr.aria-selected]=\"tab.active\"\n\t\t\t\t\t\t[attr.tabindex]=\"(tab.active?0:-1)\"\n\t\t\t\t\t\t[attr.aria-controls]=\"tab.id\"\n\t\t\t\t\t\t[attr.aria-disabled]=\"tab.disabled\"\n\t\t\t\t\t\t(focus)=\"onTabFocus(tabItem, i)\"\n\t\t\t\t\t\t(click)=\"$event.preventDefault()\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tid=\"{{tab.id}}-header\"\n\t\t\t\t\t\tclass=\"bx--tabs--scrollable__nav-link\"\n\t\t\t\t\t\t[title]=\"tab.title ? tab.title : tab.heading\"\n\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\trole=\"tab\">\n\t\t\t\t\t\t<ng-container *ngIf=\"!tab.headingIsTemplate\">\n\t\t\t\t\t\t\t{{ tab.heading }}\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t<ng-template\n\t\t\t\t\t\t\t*ngIf=\"tab.headingIsTemplate\"\n\t\t\t\t\t\t\t[ngTemplateOutlet]=\"tab.heading\"\n\t\t\t\t\t\t\t[ngTemplateOutletContext]=\"{$implicit: tab.context}\">\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li role=\"presentation\">\n\t\t\t\t\t<ng-container *ngIf=\"contentAfter\" [ngTemplateOutlet]=\"contentAfter\"></ng-container>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div *ngIf=\"!rightOverflowNavButtonHidden\" class=\"bx--tabs__overflow-indicator--right\"></div>\n\t\t\t<button\n\t\t\t\t#rightOverflowNavButton\n\t\t\t\ttype=\"button\"\n\t\t\t\t[title]=\"translations.NEXT\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--tab--overflow-nav-button': hasHorizontalOverflow,\n\t\t\t\t\t'bx--tab--overflow-nav-button--hidden': rightOverflowNavButtonHidden\n\t\t\t\t}\"\n\t\t\t\t(click)=\"handleOverflowNavClick(1)\"\n\t\t\t\t(mousedown)=\"handleOverflowNavMouseDown(1)\"\n\t\t\t\t(mouseup)=\"handleOverflowNavMouseUp()\">\n\t\t\t\t<svg\n\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\twidth=\"16\"\n\t\t\t\t\theight=\"16\"\n\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\taria-hidden=\"true\">\n\t\t\t\t\t<path d=\"M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z\"></path>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</nav>\n\t"
                }] }
    ];
    /** @nocollapse */
    TabHeaders.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: EventService },
        { type: I18n }
    ]; };
    TabHeaders.propDecorators = {
        tabInput: [{ type: Input, args: ["tabs",] }],
        cacheActive: [{ type: Input }],
        followFocus: [{ type: Input }],
        skeleton: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        contentBefore: [{ type: Input }],
        contentAfter: [{ type: Input }],
        type: [{ type: Input }],
        translations: [{ type: Input }],
        headerContainer: [{ type: ViewChild, args: ["tabList", { static: true },] }],
        rightOverflowNavButton: [{ type: ViewChild, args: ["rightOverflowNavButton", { static: true },] }],
        leftOverflowNavButton: [{ type: ViewChild, args: ["leftOverflowNavButton", { static: true },] }],
        tabQuery: [{ type: ContentChildren, args: [Tab,] }],
        allTabHeaders: [{ type: ViewChildren, args: ["tabItem",] }],
        keyboardInput: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return TabHeaders;
}());
export { TabHeaders };
//# sourceMappingURL=data:application/json;base64,