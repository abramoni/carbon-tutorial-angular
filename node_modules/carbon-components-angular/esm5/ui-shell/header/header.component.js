/**
 *
 * carbon-angular v0.0.0 | header.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
import { I18n } from "carbon-components-angular/i18n";
/**
 * A fixed header and navigation.
 * Header may contain a Hamburger menu to toggle the side navigation, navigation actions,
 * and global actions (generally in the form of `Panel`s).
 *
 * [See demo](../../?path=/story/components-ui-shell--header)
 *
 * <example-url>../../iframe.html?id=components-ui-shell--header</example-url>
 */
var Header = /** @class */ (function () {
    function Header(i18n, domSanitizer, router) {
        this.i18n = i18n;
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Top level branding. Defaults to "IBM"
         */
        this.brand = "IBM";
        /**
         * Use the routerLink attribute on <a> tag for navigation instead of using event handlers
         */
        this.useRouter = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        this._href = "#";
    }
    Object.defineProperty(Header.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Optional link for the header
         */
        set: function (v) {
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    Header.prototype.isTemplate = function (value) {
        return value instanceof TemplateRef;
    };
    Header.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
        else if (this._href === "#") {
            event.preventDefault();
        }
    };
    Header.decorators = [
        { type: Component, args: [{
                    selector: "ibm-header",
                    template: "\n\t\t<header\n\t\t\tclass=\"bx--header\"\n\t\t\t[attr.aria-label]=\"brand + ' ' + name\">\n\t\t\t<a\n\t\t\t\t*ngIf=\"skipTo\"\n\t\t\t\tclass=\"bx--skip-to-content\"\n\t\t\t\t[href]=\"skipTo\"\n\t\t\t\ttabindex=\"0\">\n\t\t\t\t{{ i18n.get(\"UI_SHELL.SKIP_TO\") | async }}\n\t\t\t</a>\n\t\t\t<ng-content select=\"ibm-hamburger\"></ng-content>\n\t\t\t<ng-template\n\t\t\t\t*ngIf=\"isTemplate(brand)\"\n\t\t\t\t[ngTemplateOutlet]=\"brand\">\n\t\t\t</ng-template>\n\t\t\t<ng-container *ngIf=\"!isTemplate(brand)\" [ngSwitch]=\"useRouter\">\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"false\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[href]=\"href\"\n\t\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\t*ngSwitchCase=\"true\"\n\t\t\t\t\tclass=\"bx--header__name\"\n\t\t\t\t\t[routerLink]=\"route\">\n\t\t\t\t\t<span class=\"bx--header__name--prefix\">{{brand}}&nbsp;</span>\n\t\t\t\t\t{{name}}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-content></ng-content>\n\t\t</header>\n\t"
                }] }
    ];
    /** @nocollapse */
    Header.ctorParameters = function () { return [
        { type: I18n },
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    Header.propDecorators = {
        skipTo: [{ type: Input }],
        name: [{ type: Input }],
        brand: [{ type: Input }],
        href: [{ type: Input }],
        route: [{ type: Input }],
        routeExtras: [{ type: Input }],
        useRouter: [{ type: Input }],
        navigation: [{ type: Output }]
    };
    return Header;
}());
export { Header };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJoZWFkZXIvaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEQ7Ozs7Ozs7O0dBUUc7QUFDSDtJQXVGQyxnQkFDUSxJQUFVLEVBQ1AsWUFBMEIsRUFDZCxNQUFjO1FBRjdCLFNBQUksR0FBSixJQUFJLENBQU07UUFDUCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNkLFdBQU0sR0FBTixNQUFNLENBQVE7UUExQ3JDOztXQUVHO1FBQ00sVUFBSyxHQUE4QixLQUFLLENBQUM7UUF3QmxEOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUzQjs7V0FFRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUVsRCxVQUFLLEdBQUcsR0FBRyxDQUFDO0lBS21CLENBQUM7SUFuQzFDLHNCQUFhLHdCQUFJO2FBSWpCO1lBQ0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQztRQUN2RSxDQUFDO1FBVEQ7O1dBRUc7YUFDSCxVQUFrQixDQUFTO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBbUNNLDJCQUFVLEdBQWpCLFVBQWtCLEtBQUs7UUFDdEIsT0FBTyxLQUFLLFlBQVksV0FBVyxDQUFDO0lBQ3JDLENBQUM7SUFFRCx5QkFBUSxHQUFSLFVBQVMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzlCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFNLFFBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFNLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLEVBQUU7WUFDOUIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0YsQ0FBQzs7Z0JBeEdELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLDhrQ0FtQ1Q7aUJBQ0Q7Ozs7Z0JBakRRLElBQUk7Z0JBRkosWUFBWTtnQkFDWixNQUFNLHVCQXNHWixRQUFROzs7eUJBL0NULEtBQUs7dUJBSUwsS0FBSzt3QkFJTCxLQUFLO3VCQUlMLEtBQUs7d0JBWUwsS0FBSzs4QkFNTCxLQUFLOzRCQUtMLEtBQUs7NkJBS0wsTUFBTTs7SUFzQlIsYUFBQztDQUFBLEFBekdELElBeUdDO1NBbEVZLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPcHRpb25hbCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdFRlbXBsYXRlUmVmXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcblxuLyoqXG4gKiBBIGZpeGVkIGhlYWRlciBhbmQgbmF2aWdhdGlvbi5cbiAqIEhlYWRlciBtYXkgY29udGFpbiBhIEhhbWJ1cmdlciBtZW51IHRvIHRvZ2dsZSB0aGUgc2lkZSBuYXZpZ2F0aW9uLCBuYXZpZ2F0aW9uIGFjdGlvbnMsXG4gKiBhbmQgZ2xvYmFsIGFjdGlvbnMgKGdlbmVyYWxseSBpbiB0aGUgZm9ybSBvZiBgUGFuZWxgcykuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy11aS1zaGVsbC0taGVhZGVyKVxuICpcbiAqIDxleGFtcGxlLXVybD4uLi8uLi9pZnJhbWUuaHRtbD9pZD1jb21wb25lbnRzLXVpLXNoZWxsLS1oZWFkZXI8L2V4YW1wbGUtdXJsPlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWhlYWRlclwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxoZWFkZXJcblx0XHRcdGNsYXNzPVwiYngtLWhlYWRlclwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImJyYW5kICsgJyAnICsgbmFtZVwiPlxuXHRcdFx0PGFcblx0XHRcdFx0Km5nSWY9XCJza2lwVG9cIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1za2lwLXRvLWNvbnRlbnRcIlxuXHRcdFx0XHRbaHJlZl09XCJza2lwVG9cIlxuXHRcdFx0XHR0YWJpbmRleD1cIjBcIj5cblx0XHRcdFx0e3sgaTE4bi5nZXQoXCJVSV9TSEVMTC5TS0lQX1RPXCIpIHwgYXN5bmMgfX1cblx0XHRcdDwvYT5cblx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cImlibS1oYW1idXJnZXJcIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8bmctdGVtcGxhdGVcblx0XHRcdFx0Km5nSWY9XCJpc1RlbXBsYXRlKGJyYW5kKVwiXG5cdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0XT1cImJyYW5kXCI+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc1RlbXBsYXRlKGJyYW5kKVwiIFtuZ1N3aXRjaF09XCJ1c2VSb3V0ZXJcIj5cblx0XHRcdFx0PGFcblx0XHRcdFx0XHQqbmdTd2l0Y2hDYXNlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZVwiXG5cdFx0XHRcdFx0W2hyZWZdPVwiaHJlZlwiXG5cdFx0XHRcdFx0KGNsaWNrKT1cIm5hdmlnYXRlKCRldmVudClcIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWUtLXByZWZpeFwiPnt7YnJhbmR9fSZuYnNwOzwvc3Bhbj5cblx0XHRcdFx0XHR7e25hbWV9fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0Km5nU3dpdGNoQ2FzZT1cInRydWVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLWhlYWRlcl9fbmFtZVwiXG5cdFx0XHRcdFx0W3JvdXRlckxpbmtdPVwicm91dGVcIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1oZWFkZXJfX25hbWUtLXByZWZpeFwiPnt7YnJhbmR9fSZuYnNwOzwvc3Bhbj5cblx0XHRcdFx0XHR7e25hbWV9fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L2hlYWRlcj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBIZWFkZXIge1xuXHQvKipcblx0ICogSUQgaW4gdGhlIG1haW4gYm9keSBjb250ZW50IHRvIGp1bXAgdG8uIFVzZWQgYnkga2V5Ym9hcmQgYW5kIHNjcmVlbiByZWFkZXIgdXNlcnMgdG8gc2tpcCB0aGUgaGVhZGVyIGNvbnRlbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBza2lwVG86IHN0cmluZztcblx0LyoqXG5cdCAqIExhYmVsIHRoYXQgc2hvd3MgdG8gdGhlIHJpZ2h0IG9mIHRoZSBgYnJhbmRgIHRleHQuIEdlbmVyYWxseSBhIHByb2R1Y3QgbmFtZS5cblx0ICovXG5cdEBJbnB1dCgpIG5hbWU6IHN0cmluZztcblx0LyoqXG5cdCAqIFRvcCBsZXZlbCBicmFuZGluZy4gRGVmYXVsdHMgdG8gXCJJQk1cIlxuXHQgKi9cblx0QElucHV0KCkgYnJhbmQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSBcIklCTVwiO1xuXHQvKipcblx0ICogT3B0aW9uYWwgbGluayBmb3IgdGhlIGhlYWRlclxuXHQgKi9cblx0QElucHV0KCkgc2V0IGhyZWYodjogc3RyaW5nKSB7XG5cdFx0dGhpcy5faHJlZiA9IHY7XG5cdH1cblxuXHRnZXQgaHJlZigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFVybCh0aGlzLl9ocmVmKSBhcyBzdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogQXJyYXkgb2YgY29tbWFuZHMgdG8gc2VuZCB0byB0aGUgcm91dGVyIHdoZW4gdGhlIGxpbmsgaXMgYWN0aXZhdGVkXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZTogYW55W107XG5cblx0LyoqXG5cdCAqIFJvdXRlciBvcHRpb25zLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHJvdXRlYFxuXHQgKiBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9hcGkvcm91dGVyL1JvdXRlciNuYXZpZ2F0ZVxuXHQgKi9cblx0QElucHV0KCkgcm91dGVFeHRyYXM6IGFueTtcblxuXHQvKipcblx0ICogVXNlIHRoZSByb3V0ZXJMaW5rIGF0dHJpYnV0ZSBvbiA8YT4gdGFnIGZvciBuYXZpZ2F0aW9uIGluc3RlYWQgb2YgdXNpbmcgZXZlbnQgaGFuZGxlcnNcblx0ICovXG5cdEBJbnB1dCgpIHVzZVJvdXRlciA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyB0aGUgbmF2aWdhdGlvbiBzdGF0dXMgcHJvbWlzZSB3aGVuIHRoZSBsaW5rIGlzIGFjdGl2YXRlZFxuXHQgKi9cblx0QE91dHB1dCgpIG5hdmlnYXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPFByb21pc2U8Ym9vbGVhbj4+KCk7XG5cblx0cHJvdGVjdGVkIF9ocmVmID0gXCIjXCI7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIGkxOG46IEkxOG4sXG5cdFx0cHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLFxuXHRcdEBPcHRpb25hbCgpIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikgeyB9XG5cblx0cHVibGljIGlzVGVtcGxhdGUodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcblx0fVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucm91dGVyICYmIHRoaXMucm91dGUpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjb25zdCBzdGF0dXMgPSB0aGlzLnJvdXRlci5uYXZpZ2F0ZSh0aGlzLnJvdXRlLCB0aGlzLnJvdXRlRXh0cmFzKTtcblx0XHRcdHRoaXMubmF2aWdhdGlvbi5lbWl0KHN0YXR1cyk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLl9ocmVmID09PSBcIiNcIikge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==