/**
 *
 * carbon-angular v0.0.0 | sidenav-item.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Optional, Output, EventEmitter } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { Router } from "@angular/router";
/**
 * `SideNavItem` can either be a child of `SideNav` or `SideNavMenu`
 */
var SideNavItem = /** @class */ (function () {
    function SideNavItem(domSanitizer, router) {
        this.domSanitizer = domSanitizer;
        this.router = router;
        /**
         * Toggles the active (current page) state for the link.
         */
        this.active = false;
        this.isSubMenu = false;
        /**
         * Emits the navigation status promise when the link is activated
         */
        this.navigation = new EventEmitter();
        /**
         * Emits when `active` input is changed. This is mainly used to indicate to any parent menu items that a
         * child sidenav item is active or not active.
         */
        this.selected = new EventEmitter();
        this._href = "#";
    }
    Object.defineProperty(SideNavItem.prototype, "href", {
        get: function () {
            return this.domSanitizer.bypassSecurityTrustUrl(this._href);
        },
        /**
         * Link for the item. NOTE: *do not* pass unsafe or untrusted values, this has the potential to open you up to XSS attacks
         */
        set: function (v) {
            // Needed when component is created dynamically with a model.
            if (v === undefined) {
                return;
            }
            this._href = v;
        },
        enumerable: true,
        configurable: true
    });
    SideNavItem.prototype.ngOnChanges = function (changes) {
        if (changes.active) {
            this.selected.emit(this.active);
        }
    };
    SideNavItem.prototype.navigate = function (event) {
        if (this.router && this.route) {
            event.preventDefault();
            var status_1 = this.router.navigate(this.route, this.routeExtras);
            this.navigation.emit(status_1);
        }
        else if (this._href === "#") {
            event.preventDefault();
        }
    };
    SideNavItem.decorators = [
        { type: Component, args: [{
                    selector: "ibm-sidenav-item",
                    template: "\n\t\t<li [ngClass]=\"{\n\t\t\t'bx--side-nav__item': !isSubMenu,\n\t\t\t'bx--side-nav__menu-item': isSubMenu\n\t\t}\"\n\t\t[attr.role]=\"(isSubMenu ? 'listitem' : null)\">\n\t\t\t<a\n\t\t\t\tclass=\"bx--side-nav__link\"\n\t\t\t\t[href]=\"href\"\n\t\t\t\t[attr.role]=\"(isSubMenu ? 'menuitem' : null)\"\n\t\t\t\t[attr.aria-current]=\"(active ? 'page' : null)\"\n\t\t\t\t[attr.title]=\"title ? title : null\"\n\t\t\t\t(click)=\"navigate($event)\">\n\t\t\t\t<div *ngIf=\"!isSubMenu\" class=\"bx--side-nav__icon\">\n\t\t\t\t\t<ng-content select=\"svg, [icon]\"></ng-content>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"bx--side-nav__link-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t</li>\n\t"
                }] }
    ];
    /** @nocollapse */
    SideNavItem.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    SideNavItem.propDecorators = {
        href: [{ type: Input }],
        active: [{ type: Input }],
        route: [{ type: Input }],
        isSubMenu: [{ type: Input }],
        routeExtras: [{ type: Input }],
        title: [{ type: Input }],
        navigation: [{ type: Output }],
        selected: [{ type: Output }]
    };
    return SideNavItem;
}());
export { SideNavItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdWktc2hlbGwvIiwic291cmNlcyI6WyJzaWRlbmF2L3NpZGVuYXYtaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDTixZQUFZLEVBRVosTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6Qzs7R0FFRztBQUNIO0lBOEVDLHFCQUFzQixZQUEwQixFQUF3QixNQUFjO1FBQWhFLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQXdCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFyQ3RGOztXQUVHO1FBQ00sV0FBTSxHQUFHLEtBQUssQ0FBQztRQVFmLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFhM0I7O1dBRUc7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFFNUQ7OztXQUdHO1FBQ08sYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFdkMsVUFBSyxHQUFHLEdBQUcsQ0FBQztJQUVtRSxDQUFDO0lBakQxRixzQkFBYSw2QkFBSTthQVFqQjtZQUNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFXLENBQUM7UUFDdkUsQ0FBQztRQWJEOztXQUVHO2FBQ0gsVUFBa0IsQ0FBUztZQUMxQiw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUNwQixPQUFPO2FBQ1A7WUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQTZDRCxpQ0FBVyxHQUFYLFVBQVksT0FBTztRQUNsQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hDO0lBQ0YsQ0FBQztJQUVELDhCQUFRLEdBQVIsVUFBUyxLQUFLO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDOUIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQU0sUUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQU0sQ0FBQyxDQUFDO1NBQzdCO2FBQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUcsRUFBRTtZQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7SUFDRixDQUFDOztnQkE5RkQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSwrc0JBcUJUO2lCQUNEOzs7O2dCQTlCUSxZQUFZO2dCQUNaLE1BQU0sdUJBbUZxQyxRQUFROzs7dUJBakQxRCxLQUFLO3lCQWVMLEtBQUs7d0JBTUwsS0FBSzs0QkFFTCxLQUFLOzhCQU1MLEtBQUs7d0JBS0wsS0FBSzs2QkFLTCxNQUFNOzJCQU1OLE1BQU07O0lBcUJSLGtCQUFDO0NBQUEsQUEvRkQsSUErRkM7U0F0RVksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE9wdGlvbmFsLFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0T25DaGFuZ2VzXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG4vKipcbiAqIGBTaWRlTmF2SXRlbWAgY2FuIGVpdGhlciBiZSBhIGNoaWxkIG9mIGBTaWRlTmF2YCBvciBgU2lkZU5hdk1lbnVgXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tc2lkZW5hdi1pdGVtXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGxpIFtuZ0NsYXNzXT1cIntcblx0XHRcdCdieC0tc2lkZS1uYXZfX2l0ZW0nOiAhaXNTdWJNZW51LFxuXHRcdFx0J2J4LS1zaWRlLW5hdl9fbWVudS1pdGVtJzogaXNTdWJNZW51XG5cdFx0fVwiXG5cdFx0W2F0dHIucm9sZV09XCIoaXNTdWJNZW51ID8gJ2xpc3RpdGVtJyA6IG51bGwpXCI+XG5cdFx0XHQ8YVxuXHRcdFx0XHRjbGFzcz1cImJ4LS1zaWRlLW5hdl9fbGlua1wiXG5cdFx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0XHRbYXR0ci5yb2xlXT1cIihpc1N1Yk1lbnUgPyAnbWVudWl0ZW0nIDogbnVsbClcIlxuXHRcdFx0XHRbYXR0ci5hcmlhLWN1cnJlbnRdPVwiKGFjdGl2ZSA/ICdwYWdlJyA6IG51bGwpXCJcblx0XHRcdFx0W2F0dHIudGl0bGVdPVwidGl0bGUgPyB0aXRsZSA6IG51bGxcIlxuXHRcdFx0XHQoY2xpY2spPVwibmF2aWdhdGUoJGV2ZW50KVwiPlxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiIWlzU3ViTWVudVwiIGNsYXNzPVwiYngtLXNpZGUtbmF2X19pY29uXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRlbnQgc2VsZWN0PVwic3ZnLCBbaWNvbl1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImJ4LS1zaWRlLW5hdl9fbGluay10ZXh0XCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8L2E+XG5cdFx0PC9saT5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBTaWRlTmF2SXRlbSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cdC8qKlxuXHQgKiBMaW5rIGZvciB0aGUgaXRlbS4gTk9URTogKmRvIG5vdCogcGFzcyB1bnNhZmUgb3IgdW50cnVzdGVkIHZhbHVlcywgdGhpcyBoYXMgdGhlIHBvdGVudGlhbCB0byBvcGVuIHlvdSB1cCB0byBYU1MgYXR0YWNrc1xuXHQgKi9cblx0QElucHV0KCkgc2V0IGhyZWYodjogc3RyaW5nKSB7XG5cdFx0Ly8gTmVlZGVkIHdoZW4gY29tcG9uZW50IGlzIGNyZWF0ZWQgZHluYW1pY2FsbHkgd2l0aCBhIG1vZGVsLlxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5faHJlZiA9IHY7XG5cdH1cblxuXHRnZXQgaHJlZigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21TYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFVybCh0aGlzLl9ocmVmKSBhcyBzdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogVG9nZ2xlcyB0aGUgYWN0aXZlIChjdXJyZW50IHBhZ2UpIHN0YXRlIGZvciB0aGUgbGluay5cblx0ICovXG5cdEBJbnB1dCgpIGFjdGl2ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBBcnJheSBvZiBjb21tYW5kcyB0byBzZW5kIHRvIHRoZSByb3V0ZXIgd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICogU2VlOiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXIjbmF2aWdhdGVcblx0ICovXG5cdEBJbnB1dCgpIHJvdXRlOiBhbnlbXTtcblxuXHRASW5wdXQoKSBpc1N1Yk1lbnUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogUm91dGVyIG9wdGlvbnMuIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgcm91dGVgXG5cdCAqIFNlZTogaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9yb3V0ZXIvUm91dGVyI25hdmlnYXRlXG5cdCAqL1xuXHRASW5wdXQoKSByb3V0ZUV4dHJhczogYW55O1xuXG5cdC8qKlxuXHQgKiBUaXRsZSBhdHRyaWJ1dGUgb2YgdGhlIGFuY2hvciBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuXHQvKipcblx0ICogRW1pdHMgdGhlIG5hdmlnYXRpb24gc3RhdHVzIHByb21pc2Ugd2hlbiB0aGUgbGluayBpcyBhY3RpdmF0ZWRcblx0ICovXG5cdEBPdXRwdXQoKSBuYXZpZ2F0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxQcm9taXNlPGJvb2xlYW4+PigpO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyB3aGVuIGBhY3RpdmVgIGlucHV0IGlzIGNoYW5nZWQuIFRoaXMgaXMgbWFpbmx5IHVzZWQgdG8gaW5kaWNhdGUgdG8gYW55IHBhcmVudCBtZW51IGl0ZW1zIHRoYXQgYVxuXHQgKiBjaGlsZCBzaWRlbmF2IGl0ZW0gaXMgYWN0aXZlIG9yIG5vdCBhY3RpdmUuXG5cdCAqL1xuXHRAT3V0cHV0KCkgc2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cblx0cHJvdGVjdGVkIF9ocmVmID0gXCIjXCI7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHt9XG5cblx0bmdPbkNoYW5nZXMoY2hhbmdlcykge1xuXHRcdGlmIChjaGFuZ2VzLmFjdGl2ZSkge1xuXHRcdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHRoaXMuYWN0aXZlKTtcblx0XHR9XG5cdH1cblxuXHRuYXZpZ2F0ZShldmVudCkge1xuXHRcdGlmICh0aGlzLnJvdXRlciAmJiB0aGlzLnJvdXRlKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y29uc3Qgc3RhdHVzID0gdGhpcy5yb3V0ZXIubmF2aWdhdGUodGhpcy5yb3V0ZSwgdGhpcy5yb3V0ZUV4dHJhcyk7XG5cdFx0XHR0aGlzLm5hdmlnYXRpb24uZW1pdChzdGF0dXMpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5faHJlZiA9PT0gXCIjXCIpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=