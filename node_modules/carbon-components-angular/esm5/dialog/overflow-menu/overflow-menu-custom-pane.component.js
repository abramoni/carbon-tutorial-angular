/**
 *
 * carbon-angular v0.0.0 | overflow-menu-custom-pane.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, ElementRef, Optional } from "@angular/core";
import { position } from "@carbon/utils-position";
import { I18n } from "carbon-components-angular/i18n";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { closestAttr } from "carbon-components-angular/utils";
import { CloseReasons } from "../dialog-config.interface";
import { Dialog } from "../dialog.component";
var OverflowMenuCustomPane = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowMenuCustomPane, _super);
    function OverflowMenuCustomPane(elementRef, i18n, animationFrameService, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService) {
        if (animationFrameService === void 0) { animationFrameService = null; }
        if (elementService === void 0) { elementService = null; }
        var _this = _super.call(this, elementRef, elementService, animationFrameService) || this;
        _this.elementRef = elementRef;
        _this.i18n = i18n;
        _this.animationFrameService = animationFrameService;
        _this.elementService = elementService;
        return _this;
    }
    OverflowMenuCustomPane.prototype.onClick = function (event) {
        this.doClose({
            reason: CloseReasons.interaction,
            target: event.target
        });
    };
    OverflowMenuCustomPane.prototype.onDialogInit = function () {
        var _this = this;
        var positionOverflowMenu = function (pos) {
            var offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            var closestRel = closestAttr("position", ["relative", "fixed", "absolute"], _this.elementRef.nativeElement);
            var topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            var leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(_this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (_this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    };
    OverflowMenuCustomPane.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-custom-menu-pane",
                    template: "\n\t\t<div\n\t\t\t[attr.id]=\"dialogConfig.compID\"\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\"\n\t\t\t[attr.data-floating-menu-direction]=\"placement ? placement : null\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--flip': dialogConfig.flip}\"\n\t\t\tclass=\"bx--overflow-menu-options bx--overflow-menu-options--open\"\n\t\t\trole=\"menu\"\n\t\t\t(click)=\"onClick($event)\"\n\t\t\t#dialog\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\">\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t[ngTemplateOutletContext]=\"{overflowMenu: this}\">\n\t\t\t</ng-template>\n\t\t</div>\n\t"
                }] }
    ];
    /** @nocollapse */
    OverflowMenuCustomPane.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n },
        { type: AnimationFrameService, decorators: [{ type: Optional }] },
        { type: ElementService, decorators: [{ type: Optional }] }
    ]; };
    return OverflowMenuCustomPane;
}(Dialog));
export { OverflowMenuCustomPane };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2RpYWxvZy8iLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUvb3ZlcmZsb3ctbWVudS1jdXN0b20tcGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFN0M7SUFvQjRDLGtEQUFNO0lBQ2pELGdDQUNXLFVBQXNCLEVBQ3RCLElBQVUsRUFDRSxxQkFBbUQ7SUFDekUseUZBQXlGO0lBQ25FLGNBQXFDO1FBRnJDLHNDQUFBLEVBQUEsNEJBQW1EO1FBRW5ELCtCQUFBLEVBQUEscUJBQXFDO1FBTDVELFlBT0Msa0JBQU0sVUFBVSxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsQ0FBQyxTQUN4RDtRQVBVLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFVBQUksR0FBSixJQUFJLENBQU07UUFDRSwyQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBRW5ELG9CQUFjLEdBQWQsY0FBYyxDQUF1Qjs7SUFHNUQsQ0FBQztJQUVELHdDQUFPLEdBQVAsVUFBUSxLQUFLO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNaLE1BQU0sRUFBRSxZQUFZLENBQUMsV0FBVztZQUNoQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELDZDQUFZLEdBQVo7UUFBQSxpQkEwQkM7UUF6QkEsSUFBTSxvQkFBb0IsR0FBRyxVQUFBLEdBQUc7WUFDL0IsSUFBSSxNQUFNLENBQUM7WUFDWDs7OztjQUlFO1lBQ0YsSUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3RyxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFOUUsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRSxJQUFJLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFO2dCQUMzQixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDNUQ7WUFDRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsb0JBQW9CLENBQUM7UUFFN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztRQUUxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1NBQ3JFO0lBQ0YsQ0FBQzs7Z0JBaEVELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxRQUFRLEVBQUUsNG1CQWdCVDtpQkFDRDs7OztnQkEzQmtDLFVBQVU7Z0JBRXBDLElBQUk7Z0JBQ0oscUJBQXFCLHVCQTZCM0IsUUFBUTtnQkE3QnFCLGNBQWMsdUJBK0IzQyxRQUFROztJQXVDWCw2QkFBQztDQUFBLEFBakVELENBb0I0QyxNQUFNLEdBNkNqRDtTQTdDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IHBvc2l0aW9uIH0gZnJvbSBcIkBjYXJib24vdXRpbHMtcG9zaXRpb25cIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBBbmltYXRpb25GcmFtZVNlcnZpY2UsIEVsZW1lbnRTZXJ2aWNlIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IGNsb3Nlc3RBdHRyIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdXRpbHNcIjtcbmltcG9ydCB7IENsb3NlUmVhc29ucyB9IGZyb20gXCIuLi9kaWFsb2ctY29uZmlnLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi4uL2RpYWxvZy5jb21wb25lbnRcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1vdmVyZmxvdy1jdXN0b20tbWVudS1wYW5lXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdlxuXHRcdFx0W2F0dHIuaWRdPVwiZGlhbG9nQ29uZmlnLmNvbXBJRFwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImRpYWxvZ0NvbmZpZy5tZW51TGFiZWxcIlxuXHRcdFx0W2F0dHIuZGF0YS1mbG9hdGluZy1tZW51LWRpcmVjdGlvbl09XCJwbGFjZW1lbnQgPyBwbGFjZW1lbnQgOiBudWxsXCJcblx0XHRcdFtuZ0NsYXNzXT1cInsnYngtLW92ZXJmbG93LW1lbnUtLWZsaXAnOiBkaWFsb2dDb25maWcuZmxpcH1cIlxuXHRcdFx0Y2xhc3M9XCJieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zIGJ4LS1vdmVyZmxvdy1tZW51LW9wdGlvbnMtLW9wZW5cIlxuXHRcdFx0cm9sZT1cIm1lbnVcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiXG5cdFx0XHQjZGlhbG9nXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImRpYWxvZ0NvbmZpZy5tZW51TGFiZWxcIj5cblx0XHRcdDxuZy10ZW1wbGF0ZVxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJkaWFsb2dDb25maWcuY29udGVudFwiXG5cdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7b3ZlcmZsb3dNZW51OiB0aGlzfVwiPlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHQ8L2Rpdj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBPdmVyZmxvd01lbnVDdXN0b21QYW5lIGV4dGVuZHMgRGlhbG9nIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuXHRcdHByb3RlY3RlZCBpMThuOiBJMThuLFxuXHRcdEBPcHRpb25hbCgpIHByb3RlY3RlZCBhbmltYXRpb25GcmFtZVNlcnZpY2U6IEFuaW1hdGlvbkZyYW1lU2VydmljZSA9IG51bGwsXG5cdFx0Ly8gbWFyayBgZWxlbWVudFNlcnZpY2VgIGFzIG9wdGlvbmFsIHNpbmNlIG1ha2luZyBpdCBtYW5kYXRvcnkgd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2Vcblx0XHRAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgZWxlbWVudFNlcnZpY2U6IEVsZW1lbnRTZXJ2aWNlID0gbnVsbFxuXHQpIHtcblx0XHRzdXBlcihlbGVtZW50UmVmLCBlbGVtZW50U2VydmljZSwgYW5pbWF0aW9uRnJhbWVTZXJ2aWNlKTtcblx0fVxuXG5cdG9uQ2xpY2soZXZlbnQpIHtcblx0XHR0aGlzLmRvQ2xvc2Uoe1xuXHRcdFx0cmVhc29uOiBDbG9zZVJlYXNvbnMuaW50ZXJhY3Rpb24sXG5cdFx0XHR0YXJnZXQ6IGV2ZW50LnRhcmdldFxuXHRcdH0pO1xuXHR9XG5cblx0b25EaWFsb2dJbml0KCkge1xuXHRcdGNvbnN0IHBvc2l0aW9uT3ZlcmZsb3dNZW51ID0gcG9zID0+IHtcblx0XHRcdGxldCBvZmZzZXQ7XG5cdFx0XHQvKlxuXHRcdFx0KiAyMCBpcyBoYWxmIHRoZSB3aWR0aCBvZiB0aGUgb3ZlcmZsb3cgbWVudSB0cmlnZ2VyIGVsZW1lbnQuXG5cdFx0XHQqIHdlIGFsc28gbW92ZSB0aGUgZWxlbWVudCBieSBoYWxmIG9mIGl0J3Mgb3duIHdpZHRoLCBzaW5jZVxuXHRcdFx0KiBwb3NpdGlvbiBzZXJ2aWNlIHdpbGwgdHJ5IGFuZCBjZW50ZXIgZXZlcnl0aGluZ1xuXHRcdFx0Ki9cblx0XHRcdGNvbnN0IGNsb3Nlc3RSZWwgPSBjbG9zZXN0QXR0cihcInBvc2l0aW9uXCIsIFtcInJlbGF0aXZlXCIsIFwiZml4ZWRcIiwgXCJhYnNvbHV0ZVwiXSwgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuXHRcdFx0Y29uc3QgdG9wRml4ID0gY2xvc2VzdFJlbCA/IGNsb3Nlc3RSZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICogLTEgOiAwO1xuXHRcdFx0Y29uc3QgbGVmdEZpeCA9IGNsb3Nlc3RSZWwgPyBjbG9zZXN0UmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKiAtMSA6IDA7XG5cblx0XHRcdG9mZnNldCA9IE1hdGgucm91bmQodGhpcy5kaWFsb2cubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpIC0gMjA7XG5cdFx0XHRpZiAodGhpcy5kaWFsb2dDb25maWcuZmxpcCkge1xuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb24uYWRkT2Zmc2V0KHBvcywgdG9wRml4LCAoLW9mZnNldCArIGxlZnRGaXgpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwb3NpdGlvbi5hZGRPZmZzZXQocG9zLCB0b3BGaXgsIChvZmZzZXQgKyBsZWZ0Rml4KSk7XG5cdFx0fTtcblxuXHRcdHRoaXMuYWRkR2FwW1wiYm90dG9tXCJdID0gcG9zaXRpb25PdmVyZmxvd01lbnU7XG5cblx0XHR0aGlzLmFkZEdhcFtcInRvcFwiXSA9IHBvc2l0aW9uT3ZlcmZsb3dNZW51O1xuXG5cdFx0aWYgKCF0aGlzLmRpYWxvZ0NvbmZpZy5tZW51TGFiZWwpIHtcblx0XHRcdHRoaXMuZGlhbG9nQ29uZmlnLm1lbnVMYWJlbCA9IHRoaXMuaTE4bi5nZXQoKS5PVkVSRkxPV19NRU5VLk9WRVJGTE9XO1xuXHRcdH1cblx0fVxufVxuIl19