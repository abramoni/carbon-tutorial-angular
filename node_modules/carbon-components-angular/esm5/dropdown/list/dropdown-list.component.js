/**
 *
 * carbon-angular v0.0.0 | dropdown-list.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ViewChildren, QueryList } from "@angular/core";
import { Observable, isObservable, of } from "rxjs";
import { first } from "rxjs/operators";
import { I18n } from "carbon-components-angular/i18n";
import { AbstractDropdownView } from "../abstract-dropdown-view.class";
import { watchFocusJump } from "../dropdowntools";
/**
 * ```html
 * <ibm-dropdown-list [items]="listItems"></ibm-dropdown-list>
 * ```
 * ```typescript
 * listItems = [
 * 	{
 * 		content: "item one",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item two",
 * 		selected: false,
 * 	},
 * 	{
 * 		content: "item three",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item four",
 * 		selected: false
 * 	}
 * ];
 * ```
 */
var DropdownList = /** @class */ (function () {
    /**
     * Creates an instance of `DropdownList`.
     */
    function DropdownList(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.ariaLabel = this.i18n.get().DROPDOWN_LIST.LABEL;
        /**
         * Template to bind to items in the `DropdownList` (optional).
         */
        this.listTpl = null;
        /**
         * Event to emit selection of a list item within the `DropdownList`.
         */
        this.select = new EventEmitter();
        /**
         * Event to emit scroll event of a list within the `DropdownList`.
         */
        this.scroll = new EventEmitter();
        /**
         * Event to suggest a blur on the view.
         * Emits _after_ the first/last item has been focused.
         * ex.
         * ArrowUp -> focus first item
         * ArrowUp -> emit event
         *
         * When this event fires focus should be placed on some element outside of the list - blurring the list as a result
         */
        this.blurIntent = new EventEmitter();
        /**
         * Defines whether or not the `DropdownList` supports selecting multiple items as opposed to single
         * item selection.
         */
        this.type = "single";
        /**
         * Defines whether to show title attribute or not
         */
        this.showTitles = true;
        /**
         * Defines the rendering size of the `DropdownList` input component.
         *
         * @deprecated since v4
         */
        this.size = "md";
        this.listId = "listbox-" + DropdownList.listCount++;
        this.highlightedItem = null;
        /**
         * Holds the list of items that will be displayed in the `DropdownList`.
         * It differs from the the complete set of items when filtering is used (but
         * it is always a subset of the total items in `DropdownList`).
         */
        this.displayItems = [];
        /**
         * Maintains the index for the selected item within the `DropdownList`.
         */
        this.index = -1;
        /**
         * Useful representation of the items, should be accessed via `getListItems`.
         */
        this._items = [];
    }
    Object.defineProperty(DropdownList.prototype, "items", {
        get: function () {
            return this._originalItems;
        },
        /**
         * The list items belonging to the `DropdownList`.
         */
        set: function (value) {
            var _this = this;
            if (isObservable(value)) {
                if (this._itemsSubscription) {
                    this._itemsSubscription.unsubscribe();
                }
                this._itemsReady = new Observable(function (observer) {
                    _this._itemsSubscription = value.subscribe(function (v) {
                        _this.updateList(v);
                        observer.next(true);
                        observer.complete();
                    });
                });
                this.onItemsReady(null);
            }
            else {
                this.updateList(value);
            }
            this._originalItems = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieves array of list items and index of the selected item after view has rendered.
     * Additionally, any Observables for the `DropdownList` are initialized.
     */
    DropdownList.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.index = this.getListItems().findIndex(function (item) { return item.selected; });
        this.setupFocusObservable();
        setTimeout(function () {
            _this.doEmitSelect(true);
        });
    };
    /**
     * Removes any Observables on destruction of the component.
     */
    DropdownList.prototype.ngOnDestroy = function () {
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        if (this._itemsSubscription) {
            this._itemsSubscription.unsubscribe();
        }
    };
    DropdownList.prototype.doEmitSelect = function (isUpdate) {
        if (isUpdate === void 0) { isUpdate = true; }
        if (this.type === "single") {
            this.select.emit({ item: this._items.find(function (item) { return item.selected; }), isUpdate: isUpdate });
        }
        else {
            // abuse javascripts object mutability until we can break the API and switch to
            // { items: [], isUpdate: true }
            var selected = this.getSelected() || [];
            selected["isUpdate"] = isUpdate;
            this.select.emit(selected);
        }
    };
    DropdownList.prototype.getItemId = function (index) {
        return this.listId + "-" + index;
    };
    /**
     * Updates the displayed list of items and then retrieves the most current properties for the `DropdownList` from the DOM.
     */
    DropdownList.prototype.updateList = function (items) {
        var _this = this;
        this._items = items.map(function (item) { return Object.assign({}, item); });
        this.displayItems = this._items;
        this.updateIndex();
        this.setupFocusObservable();
        setTimeout(function () {
            if (_this.getSelected() !== []) {
                return;
            }
            _this.doEmitSelect();
        });
    };
    /**
     * Filters the items being displayed in the DOM list.
     */
    DropdownList.prototype.filterBy = function (query) {
        if (query === void 0) { query = ""; }
        if (query) {
            this.displayItems = this.getListItems().filter(function (item) { return item.content.toLowerCase().includes(query.toLowerCase()); });
        }
        else {
            this.displayItems = this.getListItems();
        }
        this.updateIndex();
    };
    /**
     * Initializes (or re-initializes) the Observable that handles switching focus to an element based on
     * key input matching the first letter of the item in the list.
     */
    DropdownList.prototype.setupFocusObservable = function () {
        if (!this.list) {
            return;
        }
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        var elList = Array.from(this.list.nativeElement.querySelectorAll("li"));
        this.focusJump = watchFocusJump(this.list.nativeElement, elList)
            .subscribe(function (el) {
            el.focus();
        });
    };
    /**
     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.
     */
    DropdownList.prototype.getNextItem = function () {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        return this.displayItems[this.index];
    };
    /**
     * Returns `true` if the selected item is not the last item in the `DropdownList`.
     */
    DropdownList.prototype.hasNextElement = function () {
        return this.index < this.displayItems.length - 1 &&
            (!(this.index === this.displayItems.length - 2) || !this.displayItems[this.index + 1].disabled);
    };
    /**
     * Returns the `HTMLElement` for the item that is subsequent to the selected item.
     */
    DropdownList.prototype.getNextElement = function () {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        var item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getNextElement();
        }
        var elemList = this.listElementList ? this.listElementList.toArray() : [];
        // TODO: update to optional chaining after upgrading typescript
        // to v3.7+
        if (elemList[this.index] && elemList[this.index].nativeElement) {
            return elemList[this.index].nativeElement;
        }
        else {
            return null;
        }
    };
    /**
     * Returns the `ListItem` that precedes the selected item within `DropdownList`.
     */
    DropdownList.prototype.getPrevItem = function () {
        if (this.index > 0) {
            this.index--;
        }
        return this.displayItems[this.index];
    };
    /**
     * Returns `true` if the selected item is not the first in the list.
     */
    DropdownList.prototype.hasPrevElement = function () {
        return this.index > 0 && (!(this.index === 1) || !this.displayItems[0].disabled);
    };
    /**
     * Returns the `HTMLElement` for the item that precedes the selected item.
     */
    DropdownList.prototype.getPrevElement = function () {
        if (this.index > 0) {
            this.index--;
        }
        var item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getPrevElement();
        }
        var elemList = this.listElementList ? this.listElementList.toArray() : [];
        // TODO: update to optional chaining after upgrading typescript
        // to v3.7+
        if (elemList[this.index] && elemList[this.index].nativeElement) {
            return elemList[this.index].nativeElement;
        }
        else {
            return null;
        }
    };
    /**
     * Returns the `ListItem` that is selected within `DropdownList`.
     */
    DropdownList.prototype.getCurrentItem = function () {
        if (this.index < 0) {
            return this.displayItems[0];
        }
        return this.displayItems[this.index];
    };
    /**
     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.
     */
    DropdownList.prototype.getCurrentElement = function () {
        if (this.index < 0) {
            return this.listElementList.first.nativeElement;
        }
        return this.listElementList.toArray()[this.index].nativeElement;
    };
    /**
     * Returns the items as an Array
     */
    DropdownList.prototype.getListItems = function () {
        return this._items;
    };
    /**
     * Returns a list containing the selected item(s) in the `DropdownList`.
     */
    DropdownList.prototype.getSelected = function () {
        var selected = this.getListItems().filter(function (item) { return item.selected; });
        if (selected.length === 0) {
            return [];
        }
        return selected;
    };
    /**
     * Transforms array input list of items to the correct state by updating the selected item(s).
     */
    DropdownList.prototype.propagateSelected = function (value) {
        var _this = this;
        // if we get a non-array, log out an error (since it is one)
        if (!Array.isArray(value)) {
            console.error(this.constructor.name + ".propagateSelected expects an Array<ListItem>, got " + JSON.stringify(value));
        }
        this.onItemsReady(function () {
            var e_1, _a, e_2, _b;
            try {
                // loop through the list items and update the `selected` state for matching items in `value`
                for (var _c = tslib_1.__values(_this.getListItems()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var oldItem = _d.value;
                    // copy the item
                    var tempOldItem = Object.assign({}, oldItem);
                    // deleted selected because it's what we _want_ to change
                    delete tempOldItem.selected;
                    // stringify for compare
                    tempOldItem = JSON.stringify(tempOldItem);
                    try {
                        for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                            var newItem = value_1_1.value;
                            // copy the item
                            var tempNewItem = Object.assign({}, newItem);
                            // deleted selected because it's what we _want_ to change
                            delete tempNewItem.selected;
                            // stringify for compare
                            tempNewItem = JSON.stringify(tempNewItem);
                            // do the compare
                            if (tempOldItem.includes(tempNewItem)) {
                                oldItem.selected = newItem.selected;
                                // if we've found a matching item, we can stop looping
                                break;
                            }
                            else {
                                oldItem.selected = false;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (value_1_1 && !value_1_1.done && (_b = value_1.return)) _b.call(value_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    };
    /**
     * Initializes focus in the list, effectively a wrapper for `getCurrentElement().focus()`
     */
    DropdownList.prototype.initFocus = function () {
        var _this = this;
        if (this.index < 0) {
            this.updateIndex();
        }
        this.list.nativeElement.focus();
        setTimeout(function () {
            _this.highlightedItem = _this.getItemId(_this.index);
        });
    };
    DropdownList.prototype.updateIndex = function () {
        // initialize index on the first selected item or
        // on the next non disabled item if no items are selected
        var selected = this.getSelected();
        if (selected.length) {
            this.index = this.displayItems.indexOf(selected[0]);
        }
        else if (this.hasNextElement()) {
            this.getNextElement();
        }
    };
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     * @deprecated since v4
     */
    DropdownList.prototype.doKeyDown = function (event, item) {
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(function (option) { return option.nativeElement === event.target; })) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, item);
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    // this.getNextElement().focus();
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    // this.getPrevElement().focus();
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
        }
    };
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     */
    DropdownList.prototype.navigateList = function (event) {
        var _this = this;
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(function (option) { return option.nativeElement === event.target; })) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, this.getCurrentItem());
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
            setTimeout(function () {
                _this.highlightedItem = _this.getItemId(_this.index);
            });
        }
    };
    /**
     * Emits the selected item or items after a mouse click event has occurred.
     */
    DropdownList.prototype.doClick = function (event, item) {
        var e_3, _a;
        event.preventDefault();
        if (!item.disabled) {
            this.list.nativeElement.focus();
            if (this.type === "single") {
                item.selected = true;
                try {
                    // reset the selection
                    for (var _b = tslib_1.__values(this.getListItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var otherItem = _c.value;
                        if (item !== otherItem) {
                            otherItem.selected = false;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else {
                item.selected = !item.selected;
            }
            this.index = this.displayItems.indexOf(item);
            this.highlightedItem = this.getItemId(this.index);
            this.doEmitSelect(false);
        }
    };
    DropdownList.prototype.onItemFocus = function (index) {
        var element = this.listElementList.toArray()[index].nativeElement;
        element.classList.add("bx--list-box__menu-item--highlighted");
        element.tabIndex = 0;
    };
    DropdownList.prototype.onItemBlur = function (index) {
        var element = this.listElementList.toArray()[index].nativeElement;
        element.classList.remove("bx--list-box__menu-item--highlighted");
        element.tabIndex = -1;
    };
    /**
     * Emits the scroll event of the options list
     */
    DropdownList.prototype.emitScroll = function (event) {
        var atTop = event.srcElement.scrollTop === 0;
        var atBottom = event.srcElement.scrollHeight - event.srcElement.scrollTop === event.srcElement.clientHeight;
        var customScrollEvent = { atTop: atTop, atBottom: atBottom, event: event };
        this.scroll.emit(customScrollEvent);
    };
    /**
     * Subscribe the function passed to an internal observable that will resolve once the items are ready
     */
    DropdownList.prototype.onItemsReady = function (subcription) {
        // this subscription will auto unsubscribe because of the `first()` pipe
        (this._itemsReady || of(true)).pipe(first()).subscribe(subcription);
    };
    DropdownList.prototype.reorderSelected = function (moveFocus) {
        var _this = this;
        if (moveFocus === void 0) { moveFocus = true; }
        this.displayItems = tslib_1.__spread(this.getSelected(), this.getListItems().filter(function (item) { return !item.selected; }));
        if (moveFocus) {
            setTimeout(function () {
                _this.updateIndex();
                _this.highlightedItem = _this.getItemId(_this.index);
            });
        }
    };
    DropdownList.listCount = 0;
    DropdownList.decorators = [
        { type: Component, args: [{
                    selector: "ibm-dropdown-list",
                    template: "\n\t\t<ul\n\t\t\t#list\n\t\t\t[id]=\"listId\"\n\t\t\trole=\"listbox\"\n\t\t\tclass=\"bx--list-box__menu bx--multi-select\"\n\t\t\t(scroll)=\"emitScroll($event)\"\n\t\t\t(keydown)=\"navigateList($event)\"\n\t\t\ttabindex=\"-1\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-activedescendant]=\"highlightedItem\">\n\t\t\t<li\n\t\t\t\trole=\"option\"\n\t\t\t\t*ngFor=\"let item of displayItems; let i = index\"\n\t\t\t\t(click)=\"doClick($event, item)\"\n\t\t\t\tclass=\"bx--list-box__menu-item\"\n\t\t\t\t[attr.aria-selected]=\"item.selected\"\n\t\t\t\t[id]=\"getItemId(i)\"\n\t\t\t\t[attr.title]=\" showTitles ? item.content : null\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--list-box__menu-item--active': item.selected,\n\t\t\t\t\t'bx--list-box__menu-item--highlighted': highlightedItem === getItemId(i),\n\t\t\t\t\tdisabled: item.disabled\n\t\t\t\t}\">\n\t\t\t\t<div\n\t\t\t\t\t#listItem\n\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\tclass=\"bx--list-box__menu-item__option\">\n\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'multi'\"\n\t\t\t\t\t\tclass=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t[attr.data-contained-checkbox-state]=\"item.selected\"\n\t\t\t\t\t\t\tclass=\"bx--checkbox-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t[checked]=\"item.selected\"\n\t\t\t\t\t\t\t\t[disabled]=\"item.disabled\"\n\t\t\t\t\t\t\t\ttabindex=\"-1\">\n\t\t\t\t\t\t\t<span class=\"bx--checkbox-appearance\"></span>\n\t\t\t\t\t\t\t<span class=\"bx--checkbox-label-text\">{{item.content}}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ng-container *ngIf=\"!listTpl && type === 'single'\">{{item.content}}</ng-container>\n\t\t\t\t\t<svg\n\t\t\t\t\t\t*ngIf=\"!listTpl && type === 'single'\"\n\t\t\t\t\t\tibmIcon=\"checkmark\"\n\t\t\t\t\t\tsize=\"16\"\n\t\t\t\t\t\tclass=\"bx--list-box__menu-item__selected-icon\">\n\t\t\t\t\t</svg>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"listTpl\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{item: item}\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"listTpl\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t</ul>",
                    providers: [
                        {
                            provide: AbstractDropdownView,
                            useExisting: DropdownList
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    DropdownList.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n }
    ]; };
    DropdownList.propDecorators = {
        ariaLabel: [{ type: Input }],
        items: [{ type: Input }],
        listTpl: [{ type: Input }],
        select: [{ type: Output }],
        scroll: [{ type: Output }],
        blurIntent: [{ type: Output }],
        list: [{ type: ViewChild, args: ["list", { static: true },] }],
        type: [{ type: Input }],
        showTitles: [{ type: Input }],
        listElementList: [{ type: ViewChildren, args: ["listItem",] }]
    };
    return DropdownList;
}());
export { DropdownList };
//# sourceMappingURL=data:application/json;base64,