/**
 *
 * carbon-angular v0.0.0 | tag.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding } from "@angular/core";
/**
 * Component that represents a tag for labelling/categorizing using keywords
 *
 * [See demo](../../?path=/story/components-tag--basic)
 *
 * <example-url>../../iframe.html?id=components-tag--basic</example-url>
 */
var Tag = /** @class */ (function () {
    function Tag() {
        /**
         * Type of the tag determines the styling
         */
        this.type = "gray";
        /**
         * Tag render size
         */
        this.size = "md";
        this.class = "";
    }
    Object.defineProperty(Tag.prototype, "attrClass", {
        get: function () {
            return "bx--tag bx--tag--" + this.type + " " + (this.size === "md" ? "bx--tag--md" : "bx--tag--sm") + " " + this.class;
        },
        enumerable: true,
        configurable: true
    });
    Tag.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tag",
                    template: "<ng-content></ng-content>"
                }] }
    ];
    Tag.propDecorators = {
        type: [{ type: Input }],
        size: [{ type: Input }],
        class: [{ type: Input }],
        attrClass: [{ type: HostBinding, args: ["attr.class",] }]
    };
    return Tag;
}());
export { Tag };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFnLyIsInNvdXJjZXMiOlsidGFnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFrQnZCOzs7Ozs7R0FNRztBQUNIO0lBQUE7UUFLQzs7V0FFRztRQUNNLFNBQUksR0FBWSxNQUFNLENBQUM7UUFFaEM7O1dBRUc7UUFDTSxTQUFJLEdBQWdCLElBQUksQ0FBQztRQUV6QixVQUFLLEdBQUcsRUFBRSxDQUFDO0lBS3JCLENBQUM7SUFIQSxzQkFBK0IsMEJBQVM7YUFBeEM7WUFDQyxPQUFPLHNCQUFvQixJQUFJLENBQUMsSUFBSSxVQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsVUFBSSxJQUFJLENBQUMsS0FBTyxDQUFDO1FBQzVHLENBQUM7OztPQUFBOztnQkFuQkQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxTQUFTO29CQUNuQixRQUFRLEVBQUUsMkJBQTJCO2lCQUNyQzs7O3VCQUtDLEtBQUs7dUJBS0wsS0FBSzt3QkFFTCxLQUFLOzRCQUVMLFdBQVcsU0FBQyxZQUFZOztJQUcxQixVQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FoQlksR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbi8qKlxuICogU3VwcG9ydGVkIHRhZyB0eXBlcyBmb3IgY2FyYm9uIHYxMFxuICovXG5leHBvcnQgdHlwZSBUYWdUeXBlID0gXCJyZWRcIiB8XG5cdFwibWFnZW50YVwiIHxcblx0XCJwdXJwbGVcIiB8XG5cdFwiYmx1ZVwiIHxcblx0XCJjeWFuXCIgfFxuXHRcInRlYWxcIiB8XG5cdFwiZ3JlZW5cIiB8XG5cdFwiZ3JheVwiIHxcblx0XCJjb29sLWdyYXlcIiB8XG5cdFwid2FybS1ncmF5XCIgfFxuXHRcImhpZ2gtY29udHJhc3RcIiB8XG5cdFwib3V0bGluZVwiO1xuXG4vKipcbiAqIENvbXBvbmVudCB0aGF0IHJlcHJlc2VudHMgYSB0YWcgZm9yIGxhYmVsbGluZy9jYXRlZ29yaXppbmcgdXNpbmcga2V5d29yZHNcbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXRhZy0tYmFzaWMpXG4gKlxuICogPGV4YW1wbGUtdXJsPi4uLy4uL2lmcmFtZS5odG1sP2lkPWNvbXBvbmVudHMtdGFnLS1iYXNpYzwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGFnXCIsXG5cdHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcbn0pXG5leHBvcnQgY2xhc3MgVGFnIHtcblx0LyoqXG5cdCAqIFR5cGUgb2YgdGhlIHRhZyBkZXRlcm1pbmVzIHRoZSBzdHlsaW5nXG5cdCAqL1xuXHRASW5wdXQoKSB0eXBlOiBUYWdUeXBlID0gXCJncmF5XCI7XG5cblx0LyoqXG5cdCAqIFRhZyByZW5kZXIgc2l6ZVxuXHQgKi9cblx0QElucHV0KCkgc2l6ZTogXCJzbVwiIHwgXCJtZFwiID0gXCJtZFwiO1xuXG5cdEBJbnB1dCgpIGNsYXNzID0gXCJcIjtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmNsYXNzXCIpIGdldCBhdHRyQ2xhc3MoKSB7XG5cdFx0cmV0dXJuIGBieC0tdGFnIGJ4LS10YWctLSR7dGhpcy50eXBlfSAke3RoaXMuc2l6ZSA9PT0gXCJtZFwiID8gXCJieC0tdGFnLS1tZFwiIDogXCJieC0tdGFnLS1zbVwifSAke3RoaXMuY2xhc3N9YDtcblx0fVxufVxuIl19