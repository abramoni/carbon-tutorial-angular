/**
 *
 * carbon-angular v0.0.0 | scrollable-list.directive.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, OnChanges, SimpleChanges, AfterViewInit } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export declare class ScrollableList implements OnChanges, AfterViewInit {
    protected elementRef: ElementRef;
    /**
     * Optional target list to scroll
     */
    nScrollableList: string;
    /**
     * Enables or disables scrolling for the whole directive
     */
    scrollEnabled: boolean;
    /**
     * Sets the target used for hover scrolling up
     */
    scrollUpTarget: HTMLElement;
    /**
     * Sets the target used for hover scrolling down
     */
    scrollDownTarget: HTMLElement;
    /**
     * How many lines to scroll by each time `wheel` fires
     * Defaults to 10 - based on testing this isn't too fast or slow on any platform
     */
    scrollBy: number;
    protected hoverScrollInterval: any;
    protected lastTouch: any;
    protected canScrollUp: boolean;
    protected canScrollDown: boolean;
    protected list: any;
    constructor(elementRef: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateScrollHeight(): void;
    protected checkScrollArrows(): void;
    protected onWheel(event: any): void;
    protected onTouchStart(event: any): void;
    protected onTouchMove(event: any): void;
    protected hoverScrollBy(hovering: any, amount: any): void;
    protected onHoverUp(hovering: any): void;
    protected onHoverDown(hovering: any): void;
    protected onKeyDown(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScrollableList>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ScrollableList, "[ibmScrollableList]", ["scrollable-list"], {
    "nScrollableList": "nScrollableList";
    "scrollEnabled": "scrollEnabled";
    "scrollBy": "scrollBy";
    "scrollUpTarget": "scrollUpTarget";
    "scrollDownTarget": "scrollDownTarget";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYWJsZS1saXN0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzY3JvbGxhYmxlLWxpc3QuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHNjcm9sbGFibGUtbGlzdC5kaXJlY3RpdmUuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNjcm9sbGFibGVMaXN0IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCB0YXJnZXQgbGlzdCB0byBzY3JvbGxcbiAgICAgKi9cbiAgICBuU2Nyb2xsYWJsZUxpc3Q6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIHNjcm9sbGluZyBmb3IgdGhlIHdob2xlIGRpcmVjdGl2ZVxuICAgICAqL1xuICAgIHNjcm9sbEVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGFyZ2V0IHVzZWQgZm9yIGhvdmVyIHNjcm9sbGluZyB1cFxuICAgICAqL1xuICAgIHNjcm9sbFVwVGFyZ2V0OiBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0YXJnZXQgdXNlZCBmb3IgaG92ZXIgc2Nyb2xsaW5nIGRvd25cbiAgICAgKi9cbiAgICBzY3JvbGxEb3duVGFyZ2V0OiBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSBsaW5lcyB0byBzY3JvbGwgYnkgZWFjaCB0aW1lIGB3aGVlbGAgZmlyZXNcbiAgICAgKiBEZWZhdWx0cyB0byAxMCAtIGJhc2VkIG9uIHRlc3RpbmcgdGhpcyBpc24ndCB0b28gZmFzdCBvciBzbG93IG9uIGFueSBwbGF0Zm9ybVxuICAgICAqL1xuICAgIHNjcm9sbEJ5OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGhvdmVyU2Nyb2xsSW50ZXJ2YWw6IGFueTtcbiAgICBwcm90ZWN0ZWQgbGFzdFRvdWNoOiBhbnk7XG4gICAgcHJvdGVjdGVkIGNhblNjcm9sbFVwOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBjYW5TY3JvbGxEb3duOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBsaXN0OiBhbnk7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgdXBkYXRlU2Nyb2xsSGVpZ2h0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNoZWNrU2Nyb2xsQXJyb3dzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uV2hlZWwoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uVG91Y2hTdGFydChldmVudDogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaE1vdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGhvdmVyU2Nyb2xsQnkoaG92ZXJpbmc6IGFueSwgYW1vdW50OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBvbkhvdmVyVXAoaG92ZXJpbmc6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uSG92ZXJEb3duKGhvdmVyaW5nOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBvbktleURvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG59XG4iXX0=