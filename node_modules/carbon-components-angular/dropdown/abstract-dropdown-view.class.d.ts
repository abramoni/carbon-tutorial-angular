/**
 *
 * carbon-angular v0.0.0 | abstract-dropdown-view.class.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import { ListItem } from "./list-item.interface";
import { Observable } from "rxjs";
/**
 * A component that intends to be used within `Dropdown` must provide an implementation that extends this base class.
 * It also must provide the base class in the `@Component` meta-data.
 * ex: `providers: [{provide: AbstractDropdownView, useExisting: forwardRef(() => MyDropdownView)}]`
 */
import * as ɵngcc0 from '@angular/core';
export declare class AbstractDropdownView {
    /**
     * The items to be displayed in the list within the `AbstractDropDownView`.
     */
    items: Array<ListItem> | Observable<Array<ListItem>>;
    /**
     * Emits selection events to controlling classes
     */
    select: EventEmitter<{
        item: ListItem;
    } | ListItem[]>;
    /**
     * Event to suggest a blur on the view.
     * Emits _after_ the first/last item has been focused.
     * ex.
     * ArrowUp -> focus first item
     * ArrowUp -> emit event
     *
     * It's recommended that the implementing view include a specific type union of possible blurs
     * ex. `@Output() blurIntent = new EventEmitter<"top" | "bottom">();`
     */
    blurIntent: EventEmitter<any>;
    /**
     * Specifies whether or not the `DropdownList` supports selecting multiple items as opposed to single
     * item selection.
     */
    type: "single" | "multi";
    /**
     * Specifies the render size of the items within the `AbstractDropdownView`.
     *
     * @deprecated since v4
     */
    size: "sm" | "md" | "xl";
    /**
     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.
     */
    getNextItem(): ListItem;
    /**
     * Returns a boolean if the currently selected item is preceded by another
     */
    hasNextElement(): boolean;
    /**
     * Returns the `HTMLElement` for the item that is subsequent to the selected item.
     */
    getNextElement(): HTMLElement;
    /**
     * Returns the `ListItem` that precedes the selected item within `DropdownList`.
     */
    getPrevItem(): ListItem;
    /**
     * Returns a boolean if the currently selected item is followed by another
     */
    hasPrevElement(): boolean;
    /**
     * Returns the `HTMLElement` for the item that precedes the selected item.
     */
    getPrevElement(): HTMLElement;
    /**
     * Returns the selected leaf level item(s) within the `DropdownList`.
     */
    getSelected(): ListItem[];
    /**
     * Returns the `ListItem` that is selected within `DropdownList`.
     */
    getCurrentItem(): ListItem;
    /**
     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.
     */
    getCurrentElement(): HTMLElement;
    /**
     * Guaranteed to return the current items as an Array.
     */
    getListItems(): Array<ListItem>;
    /**
     * Transforms array input list of items to the correct state by updating the selected item(s).
     */
    propagateSelected(value: Array<ListItem>): void;
    /**
     *
     * @param value value to filter the list by
     */
    filterBy(value: string): void;
    /**
     * Initializes focus in the list
     * In most cases this just calls `getCurrentElement().focus()`
     */
    initFocus(): void;
    /**
     * Subscribe the function passed to an internal observable that will resolve once the items are ready
     */
    onItemsReady(subcription: () => void): void;
    /**
     * Reorder selected items bringing them to the top of the list
     */
    reorderSelected(moveFocus?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AbstractDropdownView>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AbstractDropdownView, "[ibmAbstractDropdownView]", never, {
    "items": "items";
}, {
    "select": "select";
    "blurIntent": "blurIntent";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZHJvcGRvd24tdmlldy5jbGFzcy5kLnRzIiwic291cmNlcyI6WyJhYnN0cmFjdC1kcm9wZG93bi12aWV3LmNsYXNzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErRkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBhYnN0cmFjdC1kcm9wZG93bi12aWV3LmNsYXNzLmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBMaXN0SXRlbSB9IGZyb20gXCIuL2xpc3QtaXRlbS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuLyoqXG4gKiBBIGNvbXBvbmVudCB0aGF0IGludGVuZHMgdG8gYmUgdXNlZCB3aXRoaW4gYERyb3Bkb3duYCBtdXN0IHByb3ZpZGUgYW4gaW1wbGVtZW50YXRpb24gdGhhdCBleHRlbmRzIHRoaXMgYmFzZSBjbGFzcy5cbiAqIEl0IGFsc28gbXVzdCBwcm92aWRlIHRoZSBiYXNlIGNsYXNzIGluIHRoZSBgQENvbXBvbmVudGAgbWV0YS1kYXRhLlxuICogZXg6IGBwcm92aWRlcnM6IFt7cHJvdmlkZTogQWJzdHJhY3REcm9wZG93blZpZXcsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE15RHJvcGRvd25WaWV3KX1dYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBYnN0cmFjdERyb3Bkb3duVmlldyB7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW1zIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgbGlzdCB3aXRoaW4gdGhlIGBBYnN0cmFjdERyb3BEb3duVmlld2AuXG4gICAgICovXG4gICAgaXRlbXM6IEFycmF5PExpc3RJdGVtPiB8IE9ic2VydmFibGU8QXJyYXk8TGlzdEl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBzZWxlY3Rpb24gZXZlbnRzIHRvIGNvbnRyb2xsaW5nIGNsYXNzZXNcbiAgICAgKi9cbiAgICBzZWxlY3Q6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGl0ZW06IExpc3RJdGVtO1xuICAgIH0gfCBMaXN0SXRlbVtdPjtcbiAgICAvKipcbiAgICAgKiBFdmVudCB0byBzdWdnZXN0IGEgYmx1ciBvbiB0aGUgdmlldy5cbiAgICAgKiBFbWl0cyBfYWZ0ZXJfIHRoZSBmaXJzdC9sYXN0IGl0ZW0gaGFzIGJlZW4gZm9jdXNlZC5cbiAgICAgKiBleC5cbiAgICAgKiBBcnJvd1VwIC0+IGZvY3VzIGZpcnN0IGl0ZW1cbiAgICAgKiBBcnJvd1VwIC0+IGVtaXQgZXZlbnRcbiAgICAgKlxuICAgICAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB0aGUgaW1wbGVtZW50aW5nIHZpZXcgaW5jbHVkZSBhIHNwZWNpZmljIHR5cGUgdW5pb24gb2YgcG9zc2libGUgYmx1cnNcbiAgICAgKiBleC4gYEBPdXRwdXQoKSBibHVySW50ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxcInRvcFwiIHwgXCJib3R0b21cIj4oKTtgXG4gICAgICovXG4gICAgYmx1ckludGVudDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSBgRHJvcGRvd25MaXN0YCBzdXBwb3J0cyBzZWxlY3RpbmcgbXVsdGlwbGUgaXRlbXMgYXMgb3Bwb3NlZCB0byBzaW5nbGVcbiAgICAgKiBpdGVtIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICB0eXBlOiBcInNpbmdsZVwiIHwgXCJtdWx0aVwiO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcmVuZGVyIHNpemUgb2YgdGhlIGl0ZW1zIHdpdGhpbiB0aGUgYEFic3RyYWN0RHJvcGRvd25WaWV3YC5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHY0XG4gICAgICovXG4gICAgc2l6ZTogXCJzbVwiIHwgXCJtZFwiIHwgXCJ4bFwiO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBMaXN0SXRlbWAgdGhhdCBpcyBzdWJzZXF1ZW50IHRvIHRoZSBzZWxlY3RlZCBpdGVtIGluIHRoZSBgRHJvcGRvd25MaXN0YC5cbiAgICAgKi9cbiAgICBnZXROZXh0SXRlbSgpOiBMaXN0SXRlbTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW0gaXMgcHJlY2VkZWQgYnkgYW5vdGhlclxuICAgICAqL1xuICAgIGhhc05leHRFbGVtZW50KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYEhUTUxFbGVtZW50YCBmb3IgdGhlIGl0ZW0gdGhhdCBpcyBzdWJzZXF1ZW50IHRvIHRoZSBzZWxlY3RlZCBpdGVtLlxuICAgICAqL1xuICAgIGdldE5leHRFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBMaXN0SXRlbWAgdGhhdCBwcmVjZWRlcyB0aGUgc2VsZWN0ZWQgaXRlbSB3aXRoaW4gYERyb3Bkb3duTGlzdGAuXG4gICAgICovXG4gICAgZ2V0UHJldkl0ZW0oKTogTGlzdEl0ZW07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaWYgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtIGlzIGZvbGxvd2VkIGJ5IGFub3RoZXJcbiAgICAgKi9cbiAgICBoYXNQcmV2RWxlbWVudCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBIVE1MRWxlbWVudGAgZm9yIHRoZSBpdGVtIHRoYXQgcHJlY2VkZXMgdGhlIHNlbGVjdGVkIGl0ZW0uXG4gICAgICovXG4gICAgZ2V0UHJldkVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2VsZWN0ZWQgbGVhZiBsZXZlbCBpdGVtKHMpIHdpdGhpbiB0aGUgYERyb3Bkb3duTGlzdGAuXG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWQoKTogTGlzdEl0ZW1bXTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgTGlzdEl0ZW1gIHRoYXQgaXMgc2VsZWN0ZWQgd2l0aGluIGBEcm9wZG93bkxpc3RgLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRJdGVtKCk6IExpc3RJdGVtO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGBIVE1MRWxlbWVudGAgZm9yIHRoZSBpdGVtIHRoYXQgaXMgc2VsZWN0ZWQgd2l0aGluIHRoZSBgRHJvcGRvd25MaXN0YC5cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50RWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBHdWFyYW50ZWVkIHRvIHJldHVybiB0aGUgY3VycmVudCBpdGVtcyBhcyBhbiBBcnJheS5cbiAgICAgKi9cbiAgICBnZXRMaXN0SXRlbXMoKTogQXJyYXk8TGlzdEl0ZW0+O1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYXJyYXkgaW5wdXQgbGlzdCBvZiBpdGVtcyB0byB0aGUgY29ycmVjdCBzdGF0ZSBieSB1cGRhdGluZyB0aGUgc2VsZWN0ZWQgaXRlbShzKS5cbiAgICAgKi9cbiAgICBwcm9wYWdhdGVTZWxlY3RlZCh2YWx1ZTogQXJyYXk8TGlzdEl0ZW0+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBmaWx0ZXIgdGhlIGxpc3QgYnlcbiAgICAgKi9cbiAgICBmaWx0ZXJCeSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBmb2N1cyBpbiB0aGUgbGlzdFxuICAgICAqIEluIG1vc3QgY2FzZXMgdGhpcyBqdXN0IGNhbGxzIGBnZXRDdXJyZW50RWxlbWVudCgpLmZvY3VzKClgXG4gICAgICovXG4gICAgaW5pdEZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRoZSBmdW5jdGlvbiBwYXNzZWQgdG8gYW4gaW50ZXJuYWwgb2JzZXJ2YWJsZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbmNlIHRoZSBpdGVtcyBhcmUgcmVhZHlcbiAgICAgKi9cbiAgICBvbkl0ZW1zUmVhZHkoc3ViY3JpcHRpb246ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgc2VsZWN0ZWQgaXRlbXMgYnJpbmdpbmcgdGhlbSB0byB0aGUgdG9wIG9mIHRoZSBsaXN0XG4gICAgICovXG4gICAgcmVvcmRlclNlbGVjdGVkKG1vdmVGb2N1cz86IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19