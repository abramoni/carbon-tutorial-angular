/**
 *
 * carbon-angular v0.0.0 | header-menu.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostListener, ElementRef, TemplateRef } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
/**
 * Dropdown menu container for navigation items.
 */
export class HeaderMenu {
    constructor(domSanitizer, elementRef) {
        this.domSanitizer = domSanitizer;
        this.elementRef = elementRef;
        this.trigger = "click";
        this.expanded = false;
        this._href = "#";
    }
    set href(v) {
        // Needed when component is created dynamically with a model.
        if (v === undefined) {
            return;
        }
        this._href = v;
    }
    get href() {
        return this.domSanitizer.bypassSecurityTrustUrl(this._href);
    }
    onClick() {
        if (this.trigger === "click") {
            this.expanded = !this.expanded;
        }
    }
    onMouseOver() {
        if (this.trigger === "mouseover") {
            this.expanded = true;
        }
    }
    onMouseOut() {
        if (this.trigger === "mouseover") {
            this.expanded = false;
        }
    }
    onFocusOut(event) {
        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
            this.expanded = false;
        }
    }
    navigate(event) {
        if (this._href === "#") {
            event.preventDefault();
        }
    }
}
HeaderMenu.decorators = [
    { type: Component, args: [{
                selector: "ibm-header-menu",
                template: `
		<li
			class="bx--header__submenu"
			style="height: 100%"
			role="menuitem">
			<a
				class="bx--header__menu-item bx--header__menu-title"
				[href]="href"
				tabindex="0"
				aria-haspopup="true"
				[attr.aria-expanded]="expanded"
				(click)="navigate($event)">
				{{title}}
				<ng-template *ngIf="icon; else defaultIcon" [ngTemplateOutlet]="icon"></ng-template>
				<ng-template #defaultIcon>
					<svg class="bx--header__menu-arrow" width="12" height="7" aria-hidden="true">
						<path d="M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z" />
					</svg>
				</ng-template>
			</a>
			<ul class="bx--header__menu" role="menu" [attr.aria-label]="title">
				<ng-content></ng-content>
				<ng-container *ngFor="let headerItem of headerItems">
					<ibm-header-item
						[href]="headerItem.href"
						[route]="headerItem.route"
						[routeExtras]="headerItem.routeExtras">
						{{ headerItem.content }}
					</ibm-header-item>
				</ng-container>
			</ul>
		</li>
	`
            }] }
];
/** @nocollapse */
HeaderMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef }
];
HeaderMenu.propDecorators = {
    title: [{ type: Input }],
    href: [{ type: Input }],
    trigger: [{ type: Input }],
    headerItems: [{ type: Input }],
    icon: [{ type: Input }],
    onClick: [{ type: HostListener, args: ["click",] }],
    onMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    onMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    onFocusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLW1lbnUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91aS1zaGVsbC8iLCJzb3VyY2VzIjpbImhlYWRlci9oZWFkZXItbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3pEOztHQUVHO0FBcUNILE1BQU0sT0FBTyxVQUFVO0lBNkJ0QixZQUFzQixZQUEwQixFQUFZLFVBQXNCO1FBQTVELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVksZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWhCekUsWUFBTyxHQUEwQixPQUFPLENBQUM7UUFZM0MsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVkLFVBQUssR0FBRyxHQUFHLENBQUM7SUFFZ0UsQ0FBQztJQTNCdkYsSUFBYSxJQUFJLENBQUMsQ0FBUztRQUMxQiw2REFBNkQ7UUFDN0QsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ3BCLE9BQU87U0FDUDtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDUCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBVyxDQUFDO0lBQ3ZFLENBQUM7SUFvQkQsT0FBTztRQUNOLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDL0I7SUFDRixDQUFDO0lBR0QsV0FBVztRQUNWLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDckI7SUFDRixDQUFDO0lBR0QsVUFBVTtRQUNULElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDdEI7SUFDRixDQUFDO0lBR0QsVUFBVSxDQUFDLEtBQUs7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNqRSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN0QjtJQUNGLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLEVBQUU7WUFDdkIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0YsQ0FBQzs7O1lBbkdELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBZ0NUO2FBQ0Q7Ozs7WUF6Q1EsWUFBWTtZQUhwQixVQUFVOzs7b0JBOENULEtBQUs7bUJBQ0wsS0FBSztzQkFXTCxLQUFLOzBCQUtMLEtBQUs7bUJBS0wsS0FBSztzQkFRTCxZQUFZLFNBQUMsT0FBTzswQkFPcEIsWUFBWSxTQUFDLFdBQVc7eUJBT3hCLFlBQVksU0FBQyxVQUFVO3lCQU92QixZQUFZLFNBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0SG9zdExpc3RlbmVyLFxuXHRFbGVtZW50UmVmLFxuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcbmltcG9ydCB7IEhlYWRlckl0ZW1JbnRlcmZhY2UgfSBmcm9tIFwiLi9oZWFkZXItbmF2aWdhdGlvbi1pdGVtcy5pbnRlcmZhY2VcIjtcblxuLyoqXG4gKiBEcm9wZG93biBtZW51IGNvbnRhaW5lciBmb3IgbmF2aWdhdGlvbiBpdGVtcy5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1oZWFkZXItbWVudVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxsaVxuXHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyX19zdWJtZW51XCJcblx0XHRcdHN0eWxlPVwiaGVpZ2h0OiAxMDAlXCJcblx0XHRcdHJvbGU9XCJtZW51aXRlbVwiPlxuXHRcdFx0PGFcblx0XHRcdFx0Y2xhc3M9XCJieC0taGVhZGVyX19tZW51LWl0ZW0gYngtLWhlYWRlcl9fbWVudS10aXRsZVwiXG5cdFx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0XHR0YWJpbmRleD1cIjBcIlxuXHRcdFx0XHRhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG5cdFx0XHRcdFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiZXhwYW5kZWRcIlxuXHRcdFx0XHQoY2xpY2spPVwibmF2aWdhdGUoJGV2ZW50KVwiPlxuXHRcdFx0XHR7e3RpdGxlfX1cblx0XHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiaWNvbjsgZWxzZSBkZWZhdWx0SWNvblwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImljb25cIj48L25nLXRlbXBsYXRlPlxuXHRcdFx0XHQ8bmctdGVtcGxhdGUgI2RlZmF1bHRJY29uPlxuXHRcdFx0XHRcdDxzdmcgY2xhc3M9XCJieC0taGVhZGVyX19tZW51LWFycm93XCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cblx0XHRcdFx0XHRcdDxwYXRoIGQ9XCJNNi4wMDIgNS41NUwxMS4yNyAwbC43MjYuNjg1TDYuMDAzIDcgMCAuNjg1LjcyNiAwelwiIC8+XG5cdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0XHQ8L2E+XG5cdFx0XHQ8dWwgY2xhc3M9XCJieC0taGVhZGVyX19tZW51XCIgcm9sZT1cIm1lbnVcIiBbYXR0ci5hcmlhLWxhYmVsXT1cInRpdGxlXCI+XG5cdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaGVhZGVySXRlbSBvZiBoZWFkZXJJdGVtc1wiPlxuXHRcdFx0XHRcdDxpYm0taGVhZGVyLWl0ZW1cblx0XHRcdFx0XHRcdFtocmVmXT1cImhlYWRlckl0ZW0uaHJlZlwiXG5cdFx0XHRcdFx0XHRbcm91dGVdPVwiaGVhZGVySXRlbS5yb3V0ZVwiXG5cdFx0XHRcdFx0XHRbcm91dGVFeHRyYXNdPVwiaGVhZGVySXRlbS5yb3V0ZUV4dHJhc1wiPlxuXHRcdFx0XHRcdFx0e3sgaGVhZGVySXRlbS5jb250ZW50IH19XG5cdFx0XHRcdFx0PC9pYm0taGVhZGVyLWl0ZW0+XG5cdFx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdFx0PC91bD5cblx0XHQ8L2xpPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIEhlYWRlck1lbnUge1xuXHRASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXHRASW5wdXQoKSBzZXQgaHJlZih2OiBzdHJpbmcpIHtcblx0XHQvLyBOZWVkZWQgd2hlbiBjb21wb25lbnQgaXMgY3JlYXRlZCBkeW5hbWljYWxseSB3aXRoIGEgbW9kZWwuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9ocmVmID0gdjtcblx0fVxuXG5cdGdldCBocmVmKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKHRoaXMuX2hyZWYpIGFzIHN0cmluZztcblx0fVxuXHRASW5wdXQoKSB0cmlnZ2VyOiBcImNsaWNrXCIgfCBcIm1vdXNlb3ZlclwiID0gXCJjbGlja1wiO1xuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGNyZWF0ZSBoZWFkZXIgaXRlbXMgdGhyb3VnaCBhIG1vZGVsLlxuXHQgKi9cblx0QElucHV0KCkgaGVhZGVySXRlbXM6IEhlYWRlckl0ZW1JbnRlcmZhY2VbXTtcblxuXHQvKipcblx0ICogT3B0aW9uYWwgaWNvblxuXHQgKi9cblx0QElucHV0KCkgaWNvbjogVGVtcGxhdGVSZWY8YW55PjtcblxuXHRwdWJsaWMgZXhwYW5kZWQgPSBmYWxzZTtcblxuXHRwcm90ZWN0ZWQgX2hyZWYgPSBcIiNcIjtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuXHRASG9zdExpc3RlbmVyKFwiY2xpY2tcIilcblx0b25DbGljaygpIHtcblx0XHRpZiAodGhpcy50cmlnZ2VyID09PSBcImNsaWNrXCIpIHtcblx0XHRcdHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcblx0XHR9XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwibW91c2VvdmVyXCIpXG5cdG9uTW91c2VPdmVyKCkge1xuXHRcdGlmICh0aGlzLnRyaWdnZXIgPT09IFwibW91c2VvdmVyXCIpIHtcblx0XHRcdHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoXCJtb3VzZW91dFwiKVxuXHRvbk1vdXNlT3V0KCkge1xuXHRcdGlmICh0aGlzLnRyaWdnZXIgPT09IFwibW91c2VvdmVyXCIpIHtcblx0XHRcdHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgW1wiJGV2ZW50XCJdKVxuXHRvbkZvY3VzT3V0KGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuXHRcdFx0dGhpcy5leHBhbmRlZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdG5hdmlnYXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuX2hyZWYgPT09IFwiI1wiKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufVxuIl19