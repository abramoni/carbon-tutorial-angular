/**
 *
 * carbon-angular v0.0.0 | dropdown-list.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ViewChildren, QueryList } from "@angular/core";
import { Observable, isObservable, of } from "rxjs";
import { first } from "rxjs/operators";
import { I18n } from "carbon-components-angular/i18n";
import { AbstractDropdownView } from "../abstract-dropdown-view.class";
import { watchFocusJump } from "../dropdowntools";
/**
 * ```html
 * <ibm-dropdown-list [items]="listItems"></ibm-dropdown-list>
 * ```
 * ```typescript
 * listItems = [
 * 	{
 * 		content: "item one",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item two",
 * 		selected: false,
 * 	},
 * 	{
 * 		content: "item three",
 * 		selected: false
 * 	},
 * 	{
 * 		content: "item four",
 * 		selected: false
 * 	}
 * ];
 * ```
 */
export class DropdownList {
    /**
     * Creates an instance of `DropdownList`.
     */
    constructor(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        this.ariaLabel = this.i18n.get().DROPDOWN_LIST.LABEL;
        /**
         * Template to bind to items in the `DropdownList` (optional).
         */
        this.listTpl = null;
        /**
         * Event to emit selection of a list item within the `DropdownList`.
         */
        this.select = new EventEmitter();
        /**
         * Event to emit scroll event of a list within the `DropdownList`.
         */
        this.scroll = new EventEmitter();
        /**
         * Event to suggest a blur on the view.
         * Emits _after_ the first/last item has been focused.
         * ex.
         * ArrowUp -> focus first item
         * ArrowUp -> emit event
         *
         * When this event fires focus should be placed on some element outside of the list - blurring the list as a result
         */
        this.blurIntent = new EventEmitter();
        /**
         * Defines whether or not the `DropdownList` supports selecting multiple items as opposed to single
         * item selection.
         */
        this.type = "single";
        /**
         * Defines whether to show title attribute or not
         */
        this.showTitles = true;
        /**
         * Defines the rendering size of the `DropdownList` input component.
         *
         * @deprecated since v4
         */
        this.size = "md";
        this.listId = `listbox-${DropdownList.listCount++}`;
        this.highlightedItem = null;
        /**
         * Holds the list of items that will be displayed in the `DropdownList`.
         * It differs from the the complete set of items when filtering is used (but
         * it is always a subset of the total items in `DropdownList`).
         */
        this.displayItems = [];
        /**
         * Maintains the index for the selected item within the `DropdownList`.
         */
        this.index = -1;
        /**
         * Useful representation of the items, should be accessed via `getListItems`.
         */
        this._items = [];
    }
    /**
     * The list items belonging to the `DropdownList`.
     */
    set items(value) {
        if (isObservable(value)) {
            if (this._itemsSubscription) {
                this._itemsSubscription.unsubscribe();
            }
            this._itemsReady = new Observable((observer) => {
                this._itemsSubscription = value.subscribe(v => {
                    this.updateList(v);
                    observer.next(true);
                    observer.complete();
                });
            });
            this.onItemsReady(null);
        }
        else {
            this.updateList(value);
        }
        this._originalItems = value;
    }
    get items() {
        return this._originalItems;
    }
    /**
     * Retrieves array of list items and index of the selected item after view has rendered.
     * Additionally, any Observables for the `DropdownList` are initialized.
     */
    ngAfterViewInit() {
        this.index = this.getListItems().findIndex(item => item.selected);
        this.setupFocusObservable();
        setTimeout(() => {
            this.doEmitSelect(true);
        });
    }
    /**
     * Removes any Observables on destruction of the component.
     */
    ngOnDestroy() {
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        if (this._itemsSubscription) {
            this._itemsSubscription.unsubscribe();
        }
    }
    doEmitSelect(isUpdate = true) {
        if (this.type === "single") {
            this.select.emit({ item: this._items.find(item => item.selected), isUpdate: isUpdate });
        }
        else {
            // abuse javascripts object mutability until we can break the API and switch to
            // { items: [], isUpdate: true }
            const selected = this.getSelected() || [];
            selected["isUpdate"] = isUpdate;
            this.select.emit(selected);
        }
    }
    getItemId(index) {
        return `${this.listId}-${index}`;
    }
    /**
     * Updates the displayed list of items and then retrieves the most current properties for the `DropdownList` from the DOM.
     */
    updateList(items) {
        this._items = items.map(item => Object.assign({}, item));
        this.displayItems = this._items;
        this.index = this._items.findIndex(item => item.selected);
        this.setupFocusObservable();
        setTimeout(() => {
            if (this.getSelected() !== []) {
                return;
            }
            this.doEmitSelect();
        });
    }
    /**
     * Filters the items being displayed in the DOM list.
     */
    filterBy(query = "") {
        if (query) {
            this.displayItems = this.getListItems().filter(item => item.content.toLowerCase().includes(query.toLowerCase()));
        }
        else {
            this.displayItems = this.getListItems();
        }
        // reset the index since the list has changed visually
        this.index = 0;
    }
    /**
     * Initializes (or re-initializes) the Observable that handles switching focus to an element based on
     * key input matching the first letter of the item in the list.
     */
    setupFocusObservable() {
        if (!this.list) {
            return;
        }
        if (this.focusJump) {
            this.focusJump.unsubscribe();
        }
        let elList = Array.from(this.list.nativeElement.querySelectorAll("li"));
        this.focusJump = watchFocusJump(this.list.nativeElement, elList)
            .subscribe(el => {
            el.focus();
        });
    }
    /**
     * Returns the `ListItem` that is subsequent to the selected item in the `DropdownList`.
     */
    getNextItem() {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns `true` if the selected item is not the last item in the `DropdownList`.
     */
    hasNextElement() {
        if (this.index < this.displayItems.length - 1) {
            return true;
        }
        return false;
    }
    /**
     * Returns the `HTMLElement` for the item that is subsequent to the selected item.
     */
    getNextElement() {
        if (this.index < this.displayItems.length - 1) {
            this.index++;
        }
        let elem = this.listElementList.toArray()[this.index].nativeElement;
        let item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getNextElement();
        }
        return elem;
    }
    /**
     * Returns the `ListItem` that precedes the selected item within `DropdownList`.
     */
    getPrevItem() {
        if (this.index > 0) {
            this.index--;
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns `true` if the selected item is not the first in the list.
     */
    hasPrevElement() {
        if (this.index > 0) {
            return true;
        }
        return false;
    }
    /**
     * Returns the `HTMLElement` for the item that precedes the selected item.
     */
    getPrevElement() {
        if (this.index > 0) {
            this.index--;
        }
        let elem = this.listElementList.toArray()[this.index].nativeElement;
        let item = this.displayItems[this.index];
        if (item.disabled) {
            return this.getPrevElement();
        }
        return elem;
    }
    /**
     * Returns the `ListItem` that is selected within `DropdownList`.
     */
    getCurrentItem() {
        if (this.index < 0) {
            return this.displayItems[0];
        }
        return this.displayItems[this.index];
    }
    /**
     * Returns the `HTMLElement` for the item that is selected within the `DropdownList`.
     */
    getCurrentElement() {
        if (this.index < 0) {
            return this.listElementList.first.nativeElement;
        }
        return this.listElementList.toArray()[this.index].nativeElement;
    }
    /**
     * Returns the items as an Array
     */
    getListItems() {
        return this._items;
    }
    /**
     * Returns a list containing the selected item(s) in the `DropdownList`.
     */
    getSelected() {
        let selected = this.getListItems().filter(item => item.selected);
        if (selected.length === 0) {
            return [];
        }
        return selected;
    }
    /**
     * Transforms array input list of items to the correct state by updating the selected item(s).
     */
    propagateSelected(value) {
        // if we get a non-array, log out an error (since it is one)
        if (!Array.isArray(value)) {
            console.error(`${this.constructor.name}.propagateSelected expects an Array<ListItem>, got ${JSON.stringify(value)}`);
        }
        this.onItemsReady(() => {
            // loop through the list items and update the `selected` state for matching items in `value`
            for (let oldItem of this.getListItems()) {
                // copy the item
                let tempOldItem = Object.assign({}, oldItem);
                // deleted selected because it's what we _want_ to change
                delete tempOldItem.selected;
                // stringify for compare
                tempOldItem = JSON.stringify(tempOldItem);
                for (let newItem of value) {
                    // copy the item
                    let tempNewItem = Object.assign({}, newItem);
                    // deleted selected because it's what we _want_ to change
                    delete tempNewItem.selected;
                    // stringify for compare
                    tempNewItem = JSON.stringify(tempNewItem);
                    // do the compare
                    if (tempOldItem.includes(tempNewItem)) {
                        oldItem.selected = newItem.selected;
                        // if we've found a matching item, we can stop looping
                        break;
                    }
                    else {
                        oldItem.selected = false;
                    }
                }
            }
        });
    }
    /**
     * Initializes focus in the list, effectively a wrapper for `getCurrentElement().focus()`
     */
    initFocus() {
        // ensure we start at this first item if nothing is already selected
        if (this.index < 0) {
            this.index = 0;
        }
        // this.getCurrentElement().focus();
        this.list.nativeElement.focus();
    }
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     * @deprecated since v4
     */
    doKeyDown(event, item) {
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(option => option.nativeElement === event.target)) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, item);
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    // this.getNextElement().focus();
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    // this.getPrevElement().focus();
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
        }
    }
    /**
     * Manages the keyboard accessibility for navigation and selection within a `DropdownList`.
     */
    navigateList(event) {
        // "Spacebar", "Down", and "Up" are IE specific values
        if (event.key === "Enter" || event.key === " " || event.key === "Spacebar") {
            if (this.listElementList.some(option => option.nativeElement === event.target)) {
                event.preventDefault();
            }
            if (event.key === "Enter") {
                this.doClick(event, this.getCurrentItem());
            }
        }
        else if (event.key === "ArrowDown" || event.key === "ArrowUp" || event.key === "Down" || event.key === "Up") {
            event.preventDefault();
            if (event.key === "ArrowDown" || event.key === "Down") {
                if (this.hasNextElement()) {
                    this.getNextElement();
                }
                else {
                    this.blurIntent.emit("bottom");
                }
            }
            else if (event.key === "ArrowUp" || event.key === "Up") {
                if (this.hasPrevElement()) {
                    this.getPrevElement();
                }
                else {
                    this.blurIntent.emit("top");
                }
            }
            setTimeout(() => {
                this.highlightedItem = this.getItemId(this.index);
            });
        }
    }
    /**
     * Emits the selected item or items after a mouse click event has occurred.
     */
    doClick(event, item) {
        event.preventDefault();
        if (!item.disabled) {
            if (this.type === "single") {
                item.selected = true;
                // reset the selection
                for (let otherItem of this.getListItems()) {
                    if (item !== otherItem) {
                        otherItem.selected = false;
                    }
                }
            }
            else {
                item.selected = !item.selected;
            }
            this.index = this.displayItems.indexOf(item);
            this.doEmitSelect(false);
        }
    }
    onItemFocus(index) {
        const element = this.listElementList.toArray()[index].nativeElement;
        element.classList.add("bx--list-box__menu-item--highlighted");
        element.tabIndex = 0;
    }
    onItemBlur(index) {
        const element = this.listElementList.toArray()[index].nativeElement;
        element.classList.remove("bx--list-box__menu-item--highlighted");
        element.tabIndex = -1;
    }
    /**
     * Emits the scroll event of the options list
     */
    emitScroll(event) {
        const atTop = event.srcElement.scrollTop === 0;
        const atBottom = event.srcElement.scrollHeight - event.srcElement.scrollTop === event.srcElement.clientHeight;
        const customScrollEvent = { atTop, atBottom, event };
        this.scroll.emit(customScrollEvent);
    }
    /**
     * Subscribe the function passed to an internal observable that will resolve once the items are ready
     */
    onItemsReady(subcription) {
        // this subscription will auto unsubscribe because of the `first()` pipe
        (this._itemsReady || of(true)).pipe(first()).subscribe(subcription);
    }
    reorderSelected(moveFocus = false) {
        this.displayItems = [...this.getSelected(), ...this.getListItems().filter(item => !item.selected)];
        if (moveFocus) {
            setTimeout(() => this.getCurrentElement().focus());
        }
    }
}
DropdownList.listCount = 0;
DropdownList.decorators = [
    { type: Component, args: [{
                selector: "ibm-dropdown-list",
                template: `
		<ul
			#list
			role="listbox"
			class="bx--list-box__menu bx--multi-select"
			(scroll)="emitScroll($event)"
			(keydown)="navigateList($event)"
			tabindex="-1"
			[attr.aria-label]="ariaLabel"
			[attr.aria-activedescendant]="highlightedItem">
			<li
				role="option"
				*ngFor="let item of displayItems; let i = index"
				(click)="doClick($event, item)"
				class="bx--list-box__menu-item"
				[attr.aria-selected]="item.selected"
				[id]="getItemId(i)"
				[attr.title]=" showTitles ? item.content : null"
				[ngClass]="{
					'bx--list-box__menu-item--active': item.selected,
					'bx--list-box__menu-item--highlighted': highlightedItem === getItemId(i),
					disabled: item.disabled
				}">
				<div
					#listItem
					tabindex="-1"
					class="bx--list-box__menu-item__option">
					<div
						*ngIf="!listTpl && type === 'multi'"
						class="bx--form-item bx--checkbox-wrapper">
						<label
							[attr.data-contained-checkbox-state]="item.selected"
							class="bx--checkbox-label">
							<input
								class="bx--checkbox"
								type="checkbox"
								[checked]="item.selected"
								[disabled]="item.disabled"
								tabindex="-1">
							<span class="bx--checkbox-appearance"></span>
							<span class="bx--checkbox-label-text">{{item.content}}</span>
						</label>
					</div>
					<ng-container *ngIf="!listTpl && type === 'single'">{{item.content}}</ng-container>
					<svg
						*ngIf="!listTpl && type === 'single'"
						ibmIcon="checkmark"
						size="16"
						class="bx--list-box__menu-item__selected-icon">
					</svg>
					<ng-template
						*ngIf="listTpl"
						[ngTemplateOutletContext]="{item: item}"
						[ngTemplateOutlet]="listTpl">
					</ng-template>
				</div>
			</li>
		</ul>`,
                providers: [
                    {
                        provide: AbstractDropdownView,
                        useExisting: DropdownList
                    }
                ]
            }] }
];
/** @nocollapse */
DropdownList.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n }
];
DropdownList.propDecorators = {
    ariaLabel: [{ type: Input }],
    items: [{ type: Input }],
    listTpl: [{ type: Input }],
    select: [{ type: Output }],
    scroll: [{ type: Output }],
    blurIntent: [{ type: Output }],
    list: [{ type: ViewChild, args: ["list", { static: true },] }],
    type: [{ type: Input }],
    showTitles: [{ type: Input }],
    listElementList: [{ type: ViewChildren, args: ["listItem",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2Ryb3Bkb3duLyIsInNvdXJjZXMiOlsibGlzdC9kcm9wZG93bi1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBRU4sWUFBWSxFQUdaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFNBQVMsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBZ0IsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSWxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFvRUgsTUFBTSxPQUFPLFlBQVk7SUE2R3hCOztPQUVHO0lBQ0gsWUFBbUIsVUFBc0IsRUFBWSxJQUFVO1FBQTVDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFNO1FBOUd0RCxjQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBMEJ6RDs7V0FFRztRQUNNLFlBQU8sR0FBOEIsSUFBSSxDQUFDO1FBQ25EOztXQUVHO1FBQ08sV0FBTSxHQUFzRSxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pHOztXQUVHO1FBQ08sV0FBTSxHQUFvQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3ZFOzs7Ozs7OztXQVFHO1FBQ08sZUFB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LENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELGVBQWUsQ0FBQyxTQUFTLEdBQUcsS0FBSztRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuRyxJQUFJLFNBQVMsRUFBRTtZQUNkLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ25EO0lBQ0YsQ0FBQzs7QUExZE0sc0JBQVMsR0FBRyxDQUFDLENBQUM7O1lBcEVyQixTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUF5REg7Z0JBQ1AsU0FBUyxFQUFFO29CQUNWO3dCQUNDLE9BQU8sRUFBRSxvQkFBb0I7d0JBQzdCLFdBQVcsRUFBRSxZQUFZO3FCQUN6QjtpQkFDRDthQUNEOzs7O1lBekdBLFVBQVU7WUFPRixJQUFJOzs7d0JBcUdYLEtBQUs7b0JBSUwsS0FBSztzQkF5QkwsS0FBSztxQkFJTCxNQUFNO3FCQUlOLE1BQU07eUJBVU4sTUFBTTttQkFLTixTQUFTLFNBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTttQkFLbEMsS0FBSzt5QkFLTCxLQUFLOzhCQXVCTCxZQUFZLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0T25EZXN0cm95LFxuXHRFdmVudEVtaXR0ZXIsXG5cdFRlbXBsYXRlUmVmLFxuXHRBZnRlclZpZXdJbml0LFxuXHRWaWV3Q2hpbGQsXG5cdEVsZW1lbnRSZWYsXG5cdFZpZXdDaGlsZHJlbixcblx0UXVlcnlMaXN0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBpc09ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IEFic3RyYWN0RHJvcGRvd25WaWV3IH0gZnJvbSBcIi4uL2Fic3RyYWN0LWRyb3Bkb3duLXZpZXcuY2xhc3NcIjtcbmltcG9ydCB7IExpc3RJdGVtIH0gZnJvbSBcIi4uL2xpc3QtaXRlbS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IHdhdGNoRm9jdXNKdW1wIH0gZnJvbSBcIi4uL2Ryb3Bkb3dudG9vbHNcIjtcbmltcG9ydCB7IFNjcm9sbEN1c3RvbUV2ZW50IH0gZnJvbSBcIi4vc2Nyb2xsLWN1c3RvbS1ldmVudC5pbnRlcmZhY2VcIjtcblxuXG4vKipcbiAqIGBgYGh0bWxcbiAqIDxpYm0tZHJvcGRvd24tbGlzdCBbaXRlbXNdPVwibGlzdEl0ZW1zXCI+PC9pYm0tZHJvcGRvd24tbGlzdD5cbiAqIGBgYFxuICogYGBgdHlwZXNjcmlwdFxuICogbGlzdEl0ZW1zID0gW1xuICogXHR7XG4gKiBcdFx0Y29udGVudDogXCJpdGVtIG9uZVwiLFxuICogXHRcdHNlbGVjdGVkOiBmYWxzZVxuICogXHR9LFxuICogXHR7XG4gKiBcdFx0Y29udGVudDogXCJpdGVtIHR3b1wiLFxuICogXHRcdHNlbGVjdGVkOiBmYWxzZSxcbiAqIFx0fSxcbiAqIFx0e1xuICogXHRcdGNvbnRlbnQ6IFwiaXRlbSB0aHJlZVwiLFxuICogXHRcdHNlbGVjdGVkOiBmYWxzZVxuICogXHR9LFxuICogXHR7XG4gKiBcdFx0Y29udGVudDogXCJpdGVtIGZvdXJcIixcbiAqIFx0XHRzZWxlY3RlZDogZmFsc2VcbiAqIFx0fVxuICogXTtcbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWRyb3Bkb3duLWxpc3RcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8dWxcblx0XHRcdCNsaXN0XG5cdFx0XHRyb2xlPVwibGlzdGJveFwiXG5cdFx0XHRjbGFzcz1cImJ4LS1saXN0LWJveF9fbWVudSBieC0tbXVsdGktc2VsZWN0XCJcblx0XHRcdChzY3JvbGwpPVwiZW1pdFNjcm9sbCgkZXZlbnQpXCJcblx0XHRcdChrZXlkb3duKT1cIm5hdmlnYXRlTGlzdCgkZXZlbnQpXCJcblx0XHRcdHRhYmluZGV4PVwiLTFcIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuXHRcdFx0W2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cImhpZ2hsaWdodGVkSXRlbVwiPlxuXHRcdFx0PGxpXG5cdFx0XHRcdHJvbGU9XCJvcHRpb25cIlxuXHRcdFx0XHQqbmdGb3I9XCJsZXQgaXRlbSBvZiBkaXNwbGF5SXRlbXM7IGxldCBpID0gaW5kZXhcIlxuXHRcdFx0XHQoY2xpY2spPVwiZG9DbGljaygkZXZlbnQsIGl0ZW0pXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tbGlzdC1ib3hfX21lbnUtaXRlbVwiXG5cdFx0XHRcdFthdHRyLmFyaWEtc2VsZWN0ZWRdPVwiaXRlbS5zZWxlY3RlZFwiXG5cdFx0XHRcdFtpZF09XCJnZXRJdGVtSWQoaSlcIlxuXHRcdFx0XHRbYXR0ci50aXRsZV09XCIgc2hvd1RpdGxlcyA/IGl0ZW0uY29udGVudCA6IG51bGxcIlxuXHRcdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdFx0J2J4LS1saXN0LWJveF9fbWVudS1pdGVtLS1hY3RpdmUnOiBpdGVtLnNlbGVjdGVkLFxuXHRcdFx0XHRcdCdieC0tbGlzdC1ib3hfX21lbnUtaXRlbS0taGlnaGxpZ2h0ZWQnOiBoaWdobGlnaHRlZEl0ZW0gPT09IGdldEl0ZW1JZChpKSxcblx0XHRcdFx0XHRkaXNhYmxlZDogaXRlbS5kaXNhYmxlZFxuXHRcdFx0XHR9XCI+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHQjbGlzdEl0ZW1cblx0XHRcdFx0XHR0YWJpbmRleD1cIi0xXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1saXN0LWJveF9fbWVudS1pdGVtX19vcHRpb25cIj5cblx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHQqbmdJZj1cIiFsaXN0VHBsICYmIHR5cGUgPT09ICdtdWx0aSdcIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJieC0tZm9ybS1pdGVtIGJ4LS1jaGVja2JveC13cmFwcGVyXCI+XG5cdFx0XHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRcdFx0W2F0dHIuZGF0YS1jb250YWluZWQtY2hlY2tib3gtc3RhdGVdPVwiaXRlbS5zZWxlY3RlZFwiXG5cdFx0XHRcdFx0XHRcdGNsYXNzPVwiYngtLWNoZWNrYm94LWxhYmVsXCI+XG5cdFx0XHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwiYngtLWNoZWNrYm94XCJcblx0XHRcdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0XHRcdFtjaGVja2VkXT1cIml0ZW0uc2VsZWN0ZWRcIlxuXHRcdFx0XHRcdFx0XHRcdFtkaXNhYmxlZF09XCJpdGVtLmRpc2FibGVkXCJcblx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleD1cIi0xXCI+XG5cdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLWNoZWNrYm94LWFwcGVhcmFuY2VcIj48L3NwYW4+XG5cdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLWNoZWNrYm94LWxhYmVsLXRleHRcIj57e2l0ZW0uY29udGVudH19PC9zcGFuPlxuXHRcdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIWxpc3RUcGwgJiYgdHlwZSA9PT0gJ3NpbmdsZSdcIj57e2l0ZW0uY29udGVudH19PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdFx0Km5nSWY9XCIhbGlzdFRwbCAmJiB0eXBlID09PSAnc2luZ2xlJ1wiXG5cdFx0XHRcdFx0XHRpYm1JY29uPVwiY2hlY2ttYXJrXCJcblx0XHRcdFx0XHRcdHNpemU9XCIxNlwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImJ4LS1saXN0LWJveF9fbWVudS1pdGVtX19zZWxlY3RlZC1pY29uXCI+XG5cdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdFx0XHQqbmdJZj1cImxpc3RUcGxcIlxuXHRcdFx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntpdGVtOiBpdGVtfVwiXG5cdFx0XHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJsaXN0VHBsXCI+XG5cdFx0XHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2xpPlxuXHRcdDwvdWw+YCxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQWJzdHJhY3REcm9wZG93blZpZXcsXG5cdFx0XHR1c2VFeGlzdGluZzogRHJvcGRvd25MaXN0XG5cdFx0fVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duTGlzdCBpbXBsZW1lbnRzIEFic3RyYWN0RHJvcGRvd25WaWV3LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXHRzdGF0aWMgbGlzdENvdW50ID0gMDtcblx0QElucHV0KCkgYXJpYUxhYmVsID0gdGhpcy5pMThuLmdldCgpLkRST1BET1dOX0xJU1QuTEFCRUw7XG5cdC8qKlxuXHQgKiBUaGUgbGlzdCBpdGVtcyBiZWxvbmdpbmcgdG8gdGhlIGBEcm9wZG93bkxpc3RgLlxuXHQgKi9cblx0QElucHV0KCkgc2V0IGl0ZW1zICh2YWx1ZTogQXJyYXk8TGlzdEl0ZW0+IHwgT2JzZXJ2YWJsZTxBcnJheTxMaXN0SXRlbT4+KSB7XG5cdFx0aWYgKGlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHtcblx0XHRcdGlmICh0aGlzLl9pdGVtc1N1YnNjcmlwdGlvbikge1xuXHRcdFx0XHR0aGlzLl9pdGVtc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5faXRlbXNSZWFkeSA9IG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KChvYnNlcnZlcikgPT4ge1xuXHRcdFx0XHR0aGlzLl9pdGVtc1N1YnNjcmlwdGlvbiA9IHZhbHVlLnN1YnNjcmliZSh2ID0+IHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUxpc3Qodik7XG5cdFx0XHRcdFx0b2JzZXJ2ZXIubmV4dCh0cnVlKTtcblx0XHRcdFx0XHRvYnNlcnZlci5jb21wbGV0ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5vbkl0ZW1zUmVhZHkobnVsbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMudXBkYXRlTGlzdCh2YWx1ZSk7XG5cdFx0fVxuXHRcdHRoaXMuX29yaWdpbmFsSXRlbXMgPSB2YWx1ZTtcblx0fVxuXG5cdGdldCBpdGVtcygpOiBBcnJheTxMaXN0SXRlbT4gfCBPYnNlcnZhYmxlPEFycmF5PExpc3RJdGVtPj4ge1xuXHRcdHJldHVybiB0aGlzLl9vcmlnaW5hbEl0ZW1zO1xuXHR9XG5cdC8qKlxuXHQgKiBUZW1wbGF0ZSB0byBiaW5kIHRvIGl0ZW1zIGluIHRoZSBgRHJvcGRvd25MaXN0YCAob3B0aW9uYWwpLlxuXHQgKi9cblx0QElucHV0KCkgbGlzdFRwbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XG5cdC8qKlxuXHQgKiBFdmVudCB0byBlbWl0IHNlbGVjdGlvbiBvZiBhIGxpc3QgaXRlbSB3aXRoaW4gdGhlIGBEcm9wZG93bkxpc3RgLlxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdDogRXZlbnRFbWl0dGVyPHsgaXRlbTogTGlzdEl0ZW0sIGlzVXBkYXRlPzogYm9vbGVhbiB9IHwgTGlzdEl0ZW1bXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cdC8qKlxuXHQgKiBFdmVudCB0byBlbWl0IHNjcm9sbCBldmVudCBvZiBhIGxpc3Qgd2l0aGluIHRoZSBgRHJvcGRvd25MaXN0YC5cblx0ICovXG5cdEBPdXRwdXQoKSBzY3JvbGw6IEV2ZW50RW1pdHRlcjxTY3JvbGxDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cdC8qKlxuXHQgKiBFdmVudCB0byBzdWdnZXN0IGEgYmx1ciBvbiB0aGUgdmlldy5cblx0ICogRW1pdHMgX2FmdGVyXyB0aGUgZmlyc3QvbGFzdCBpdGVtIGhhcyBiZWVuIGZvY3VzZWQuXG5cdCAqIGV4LlxuXHQgKiBBcnJvd1VwIC0+IGZvY3VzIGZpcnN0IGl0ZW1cblx0ICogQXJyb3dVcCAtPiBlbWl0IGV2ZW50XG5cdCAqXG5cdCAqIFdoZW4gdGhpcyBldmVudCBmaXJlcyBmb2N1cyBzaG91bGQgYmUgcGxhY2VkIG9uIHNvbWUgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBsaXN0IC0gYmx1cnJpbmcgdGhlIGxpc3QgYXMgYSByZXN1bHRcblx0ICovXG5cdEBPdXRwdXQoKSBibHVySW50ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxcInRvcFwiIHwgXCJib3R0b21cIj4oKTtcblx0LyoqXG5cdCAqIE1haW50YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgdmlldyBET00gZWxlbWVudCBmb3IgdGhlIHVub3JkZXJlZCBsaXN0IG9mIGl0ZW1zIHdpdGhpbiB0aGUgYERyb3Bkb3duTGlzdGAuXG5cdCAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJsaXN0XCIsIHsgc3RhdGljOiB0cnVlIH0pIGxpc3Q6IEVsZW1lbnRSZWY7XG5cdC8qKlxuXHQgKiBEZWZpbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBgRHJvcGRvd25MaXN0YCBzdXBwb3J0cyBzZWxlY3RpbmcgbXVsdGlwbGUgaXRlbXMgYXMgb3Bwb3NlZCB0byBzaW5nbGVcblx0ICogaXRlbSBzZWxlY3Rpb24uXG5cdCAqL1xuXHRASW5wdXQoKSB0eXBlOiBcInNpbmdsZVwiIHwgXCJtdWx0aVwiID0gXCJzaW5nbGVcIjtcblxuXHQvKipcblx0ICogRGVmaW5lcyB3aGV0aGVyIHRvIHNob3cgdGl0bGUgYXR0cmlidXRlIG9yIG5vdFxuXHQgKi9cblx0QElucHV0KCkgc2hvd1RpdGxlcyA9IHRydWU7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHJlbmRlcmluZyBzaXplIG9mIHRoZSBgRHJvcGRvd25MaXN0YCBpbnB1dCBjb21wb25lbnQuXG5cdCAqXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHY0XG5cdCAqL1xuXHRwdWJsaWMgc2l6ZTogXCJzbVwiIHwgXCJtZFwiIHwgXCJ4bFwiID0gXCJtZFwiO1xuXHRwdWJsaWMgbGlzdElkID0gYGxpc3Rib3gtJHtEcm9wZG93bkxpc3QubGlzdENvdW50Kyt9YDtcblx0cHVibGljIGhpZ2hsaWdodGVkSXRlbSA9IG51bGw7XG5cdC8qKlxuXHQgKiBIb2xkcyB0aGUgbGlzdCBvZiBpdGVtcyB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBgRHJvcGRvd25MaXN0YC5cblx0ICogSXQgZGlmZmVycyBmcm9tIHRoZSB0aGUgY29tcGxldGUgc2V0IG9mIGl0ZW1zIHdoZW4gZmlsdGVyaW5nIGlzIHVzZWQgKGJ1dFxuXHQgKiBpdCBpcyBhbHdheXMgYSBzdWJzZXQgb2YgdGhlIHRvdGFsIGl0ZW1zIGluIGBEcm9wZG93bkxpc3RgKS5cblx0ICovXG5cdHB1YmxpYyBkaXNwbGF5SXRlbXM6IEFycmF5PExpc3RJdGVtPiA9IFtdO1xuXHQvKipcblx0ICogTWFpbnRhaW5zIHRoZSBpbmRleCBmb3IgdGhlIHNlbGVjdGVkIGl0ZW0gd2l0aGluIHRoZSBgRHJvcGRvd25MaXN0YC5cblx0ICovXG5cdHByb3RlY3RlZCBpbmRleCA9IC0xO1xuXHQvKipcblx0ICogQW4gYXJyYXkgaG9sZGluZyB0aGUgSFRNTCBsaXN0IGVsZW1lbnRzIGluIHRoZSB2aWV3LlxuXHQgKi9cblx0QFZpZXdDaGlsZHJlbihcImxpc3RJdGVtXCIpIHByb3RlY3RlZCBsaXN0RWxlbWVudExpc3Q6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcblx0LyoqXG5cdCAqIE9ic2VydmFibGUgYm91bmQgdG8ga2V5ZG93biBldmVudHMgdG8gY29udHJvbCBmaWx0ZXJpbmcuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgZm9jdXNKdW1wO1xuXHQvKipcblx0ICogVHJhY2tzIHRoZSBjdXJyZW50IChpZiBhbnkpIHN1YnNjcmlwdGlvbiB0byB0aGUgaXRlbXMgb2JzZXJ2YWJsZSBzbyB3ZSBjYW4gY2xlYW4gdXAgd2hlbiB0aGUgaW5wdXQgaXMgdXBkYXRlZC5cblx0ICovXG5cdHByb3RlY3RlZCBfaXRlbXNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblx0LyoqXG5cdCAqIFVzZWQgdG8gcmV0YWluIHRoZSBvcmlnaW5hbCBpdGVtcyBwYXNzZWQgdG8gdGhlIHNldHRlci5cblx0ICovXG5cdHByb3RlY3RlZCBfb3JpZ2luYWxJdGVtczogQXJyYXk8TGlzdEl0ZW0+IHwgT2JzZXJ2YWJsZTxBcnJheTxMaXN0SXRlbT4+O1xuXHQvKipcblx0ICogVXNlZnVsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpdGVtcywgc2hvdWxkIGJlIGFjY2Vzc2VkIHZpYSBgZ2V0TGlzdEl0ZW1zYC5cblx0ICovXG5cdHByb3RlY3RlZCBfaXRlbXM6IEFycmF5PExpc3RJdGVtPiA9IFtdO1xuXHQvKipcblx0ICogVXNlZCB0byB3YWl0IGZvciBpdGVtcyBpbiBjYXNlIHRoZXkgYXJlIHBhc3NlZCB0aHJvdWdoIGFuIG9ic2VydmFibGUuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2l0ZW1zUmVhZHk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYERyb3Bkb3duTGlzdGAuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIGkxOG46IEkxOG4pIHt9XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyBhcnJheSBvZiBsaXN0IGl0ZW1zIGFuZCBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgaXRlbSBhZnRlciB2aWV3IGhhcyByZW5kZXJlZC5cblx0ICogQWRkaXRpb25hbGx5LCBhbnkgT2JzZXJ2YWJsZXMgZm9yIHRoZSBgRHJvcGRvd25MaXN0YCBhcmUgaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXHRuZ0FmdGVyVmlld0luaXQoKSB7XG5cdFx0dGhpcy5pbmRleCA9IHRoaXMuZ2V0TGlzdEl0ZW1zKCkuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5zZWxlY3RlZCk7XG5cdFx0dGhpcy5zZXR1cEZvY3VzT2JzZXJ2YWJsZSgpO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5kb0VtaXRTZWxlY3QodHJ1ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbnkgT2JzZXJ2YWJsZXMgb24gZGVzdHJ1Y3Rpb24gb2YgdGhlIGNvbXBvbmVudC5cblx0ICovXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdGlmICh0aGlzLmZvY3VzSnVtcCkge1xuXHRcdFx0dGhpcy5mb2N1c0p1bXAudW5zdWJzY3JpYmUoKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2l0ZW1zU3Vic2NyaXB0aW9uKSB7XG5cdFx0XHR0aGlzLl9pdGVtc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHRcdH1cblx0fVxuXG5cdGRvRW1pdFNlbGVjdChpc1VwZGF0ZSA9IHRydWUpIHtcblx0XHRpZiAodGhpcy50eXBlID09PSBcInNpbmdsZVwiKSB7XG5cdFx0XHR0aGlzLnNlbGVjdC5lbWl0KHsgaXRlbTogdGhpcy5faXRlbXMuZmluZChpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLCBpc1VwZGF0ZTogaXNVcGRhdGUgfSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGFidXNlIGphdmFzY3JpcHRzIG9iamVjdCBtdXRhYmlsaXR5IHVudGlsIHdlIGNhbiBicmVhayB0aGUgQVBJIGFuZCBzd2l0Y2ggdG9cblx0XHRcdC8vIHsgaXRlbXM6IFtdLCBpc1VwZGF0ZTogdHJ1ZSB9XG5cdFx0XHRjb25zdCBzZWxlY3RlZCA9IHRoaXMuZ2V0U2VsZWN0ZWQoKSB8fCBbXTtcblx0XHRcdHNlbGVjdGVkW1wiaXNVcGRhdGVcIl0gPSBpc1VwZGF0ZTtcblx0XHRcdHRoaXMuc2VsZWN0LmVtaXQoc2VsZWN0ZWQpO1xuXHRcdH1cblx0fVxuXG5cdGdldEl0ZW1JZChpbmRleDogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIGAke3RoaXMubGlzdElkfS0ke2luZGV4fWA7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZGlzcGxheWVkIGxpc3Qgb2YgaXRlbXMgYW5kIHRoZW4gcmV0cmlldmVzIHRoZSBtb3N0IGN1cnJlbnQgcHJvcGVydGllcyBmb3IgdGhlIGBEcm9wZG93bkxpc3RgIGZyb20gdGhlIERPTS5cblx0ICovXG5cdHVwZGF0ZUxpc3QoaXRlbXMpIHtcblx0XHR0aGlzLl9pdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pKTtcblx0XHR0aGlzLmRpc3BsYXlJdGVtcyA9IHRoaXMuX2l0ZW1zO1xuXHRcdHRoaXMuaW5kZXggPSB0aGlzLl9pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKTtcblx0XHR0aGlzLnNldHVwRm9jdXNPYnNlcnZhYmxlKCk7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5nZXRTZWxlY3RlZCgpICE9PSBbXSkgeyByZXR1cm47IH1cblx0XHRcdHRoaXMuZG9FbWl0U2VsZWN0KCk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogRmlsdGVycyB0aGUgaXRlbXMgYmVpbmcgZGlzcGxheWVkIGluIHRoZSBET00gbGlzdC5cblx0ICovXG5cdGZpbHRlckJ5KHF1ZXJ5ID0gXCJcIikge1xuXHRcdGlmIChxdWVyeSkge1xuXHRcdFx0dGhpcy5kaXNwbGF5SXRlbXMgPSB0aGlzLmdldExpc3RJdGVtcygpLmZpbHRlcihpdGVtID0+IGl0ZW0uY29udGVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kaXNwbGF5SXRlbXMgPSB0aGlzLmdldExpc3RJdGVtcygpO1xuXHRcdH1cblx0XHQvLyByZXNldCB0aGUgaW5kZXggc2luY2UgdGhlIGxpc3QgaGFzIGNoYW5nZWQgdmlzdWFsbHlcblx0XHR0aGlzLmluZGV4ID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyAob3IgcmUtaW5pdGlhbGl6ZXMpIHRoZSBPYnNlcnZhYmxlIHRoYXQgaGFuZGxlcyBzd2l0Y2hpbmcgZm9jdXMgdG8gYW4gZWxlbWVudCBiYXNlZCBvblxuXHQgKiBrZXkgaW5wdXQgbWF0Y2hpbmcgdGhlIGZpcnN0IGxldHRlciBvZiB0aGUgaXRlbSBpbiB0aGUgbGlzdC5cblx0ICovXG5cdHNldHVwRm9jdXNPYnNlcnZhYmxlKCkge1xuXHRcdGlmICghdGhpcy5saXN0KSB7IHJldHVybjsgfVxuXHRcdGlmICh0aGlzLmZvY3VzSnVtcCkge1xuXHRcdFx0dGhpcy5mb2N1c0p1bXAudW5zdWJzY3JpYmUoKTtcblx0XHR9XG5cdFx0bGV0IGVsTGlzdCA9IEFycmF5LmZyb20odGhpcy5saXN0Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpXCIpKTtcblx0XHR0aGlzLmZvY3VzSnVtcCA9IHdhdGNoRm9jdXNKdW1wKHRoaXMubGlzdC5uYXRpdmVFbGVtZW50LCBlbExpc3QpXG5cdFx0XHQuc3Vic2NyaWJlKGVsID0+IHtcblx0XHRcdFx0ZWwuZm9jdXMoKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGBMaXN0SXRlbWAgdGhhdCBpcyBzdWJzZXF1ZW50IHRvIHRoZSBzZWxlY3RlZCBpdGVtIGluIHRoZSBgRHJvcGRvd25MaXN0YC5cblx0ICovXG5cdGdldE5leHRJdGVtKCk6IExpc3RJdGVtIHtcblx0XHRpZiAodGhpcy5pbmRleCA8IHRoaXMuZGlzcGxheUl0ZW1zLmxlbmd0aCAtIDEpIHtcblx0XHRcdHRoaXMuaW5kZXgrKztcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZGlzcGxheUl0ZW1zW3RoaXMuaW5kZXhdO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3RlZCBpdGVtIGlzIG5vdCB0aGUgbGFzdCBpdGVtIGluIHRoZSBgRHJvcGRvd25MaXN0YC5cblx0ICovXG5cdGhhc05leHRFbGVtZW50KCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmluZGV4IDwgdGhpcy5kaXNwbGF5SXRlbXMubGVuZ3RoIC0gMSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBgSFRNTEVsZW1lbnRgIGZvciB0aGUgaXRlbSB0aGF0IGlzIHN1YnNlcXVlbnQgdG8gdGhlIHNlbGVjdGVkIGl0ZW0uXG5cdCAqL1xuXHRnZXROZXh0RWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG5cdFx0aWYgKHRoaXMuaW5kZXggPCB0aGlzLmRpc3BsYXlJdGVtcy5sZW5ndGggLSAxKSB7XG5cdFx0XHR0aGlzLmluZGV4Kys7XG5cdFx0fVxuXHRcdGxldCBlbGVtID0gdGhpcy5saXN0RWxlbWVudExpc3QudG9BcnJheSgpW3RoaXMuaW5kZXhdLm5hdGl2ZUVsZW1lbnQ7XG5cdFx0bGV0IGl0ZW0gPSB0aGlzLmRpc3BsYXlJdGVtc1t0aGlzLmluZGV4XTtcblx0XHRpZiAoaXRlbS5kaXNhYmxlZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0TmV4dEVsZW1lbnQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYExpc3RJdGVtYCB0aGF0IHByZWNlZGVzIHRoZSBzZWxlY3RlZCBpdGVtIHdpdGhpbiBgRHJvcGRvd25MaXN0YC5cblx0ICovXG5cdGdldFByZXZJdGVtKCk6IExpc3RJdGVtIHtcblx0XHRpZiAodGhpcy5pbmRleCA+IDApIHtcblx0XHRcdHRoaXMuaW5kZXgtLTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZGlzcGxheUl0ZW1zW3RoaXMuaW5kZXhdO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3RlZCBpdGVtIGlzIG5vdCB0aGUgZmlyc3QgaW4gdGhlIGxpc3QuXG5cdCAqL1xuXHRoYXNQcmV2RWxlbWVudCgpOiBib29sZWFuIHtcblx0XHRpZiAodGhpcy5pbmRleCA+IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYEhUTUxFbGVtZW50YCBmb3IgdGhlIGl0ZW0gdGhhdCBwcmVjZWRlcyB0aGUgc2VsZWN0ZWQgaXRlbS5cblx0ICovXG5cdGdldFByZXZFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcblx0XHRpZiAodGhpcy5pbmRleCA+IDApIHtcblx0XHRcdHRoaXMuaW5kZXgtLTtcblx0XHR9XG5cdFx0bGV0IGVsZW0gPSB0aGlzLmxpc3RFbGVtZW50TGlzdC50b0FycmF5KClbdGhpcy5pbmRleF0ubmF0aXZlRWxlbWVudDtcblx0XHRsZXQgaXRlbSA9IHRoaXMuZGlzcGxheUl0ZW1zW3RoaXMuaW5kZXhdO1xuXHRcdGlmIChpdGVtLmRpc2FibGVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQcmV2RWxlbWVudCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBgTGlzdEl0ZW1gIHRoYXQgaXMgc2VsZWN0ZWQgd2l0aGluIGBEcm9wZG93bkxpc3RgLlxuXHQgKi9cblx0Z2V0Q3VycmVudEl0ZW0oKTogTGlzdEl0ZW0ge1xuXHRcdGlmICh0aGlzLmluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGlzcGxheUl0ZW1zWzBdO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5kaXNwbGF5SXRlbXNbdGhpcy5pbmRleF07XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYEhUTUxFbGVtZW50YCBmb3IgdGhlIGl0ZW0gdGhhdCBpcyBzZWxlY3RlZCB3aXRoaW4gdGhlIGBEcm9wZG93bkxpc3RgLlxuXHQgKi9cblx0Z2V0Q3VycmVudEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuXHRcdGlmICh0aGlzLmluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubGlzdEVsZW1lbnRMaXN0LmZpcnN0Lm5hdGl2ZUVsZW1lbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmxpc3RFbGVtZW50TGlzdC50b0FycmF5KClbdGhpcy5pbmRleF0ubmF0aXZlRWxlbWVudDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpdGVtcyBhcyBhbiBBcnJheVxuXHQgKi9cblx0Z2V0TGlzdEl0ZW1zKCk6IEFycmF5PExpc3RJdGVtPiB7XG5cdFx0cmV0dXJuIHRoaXMuX2l0ZW1zO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBsaXN0IGNvbnRhaW5pbmcgdGhlIHNlbGVjdGVkIGl0ZW0ocykgaW4gdGhlIGBEcm9wZG93bkxpc3RgLlxuXHQgKi9cblx0Z2V0U2VsZWN0ZWQoKTogTGlzdEl0ZW1bXSB7XG5cdFx0bGV0IHNlbGVjdGVkID0gdGhpcy5nZXRMaXN0SXRlbXMoKS5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKTtcblx0XHRpZiAoc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIGFycmF5IGlucHV0IGxpc3Qgb2YgaXRlbXMgdG8gdGhlIGNvcnJlY3Qgc3RhdGUgYnkgdXBkYXRpbmcgdGhlIHNlbGVjdGVkIGl0ZW0ocykuXG5cdCAqL1xuXHRwcm9wYWdhdGVTZWxlY3RlZCh2YWx1ZTogQXJyYXk8TGlzdEl0ZW0+KTogdm9pZCB7XG5cdFx0Ly8gaWYgd2UgZ2V0IGEgbm9uLWFycmF5LCBsb2cgb3V0IGFuIGVycm9yIChzaW5jZSBpdCBpcyBvbmUpXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LnByb3BhZ2F0ZVNlbGVjdGVkIGV4cGVjdHMgYW4gQXJyYXk8TGlzdEl0ZW0+LCBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG5cdFx0fVxuXHRcdHRoaXMub25JdGVtc1JlYWR5KCgpID0+IHtcblx0XHRcdC8vIGxvb3AgdGhyb3VnaCB0aGUgbGlzdCBpdGVtcyBhbmQgdXBkYXRlIHRoZSBgc2VsZWN0ZWRgIHN0YXRlIGZvciBtYXRjaGluZyBpdGVtcyBpbiBgdmFsdWVgXG5cdFx0XHRmb3IgKGxldCBvbGRJdGVtIG9mIHRoaXMuZ2V0TGlzdEl0ZW1zKCkpIHtcblx0XHRcdFx0Ly8gY29weSB0aGUgaXRlbVxuXHRcdFx0XHRsZXQgdGVtcE9sZEl0ZW06IHN0cmluZyB8IExpc3RJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgb2xkSXRlbSk7XG5cdFx0XHRcdC8vIGRlbGV0ZWQgc2VsZWN0ZWQgYmVjYXVzZSBpdCdzIHdoYXQgd2UgX3dhbnRfIHRvIGNoYW5nZVxuXHRcdFx0XHRkZWxldGUgdGVtcE9sZEl0ZW0uc2VsZWN0ZWQ7XG5cdFx0XHRcdC8vIHN0cmluZ2lmeSBmb3IgY29tcGFyZVxuXHRcdFx0XHR0ZW1wT2xkSXRlbSA9IEpTT04uc3RyaW5naWZ5KHRlbXBPbGRJdGVtKTtcblx0XHRcdFx0Zm9yIChsZXQgbmV3SXRlbSBvZiB2YWx1ZSkge1xuXHRcdFx0XHRcdC8vIGNvcHkgdGhlIGl0ZW1cblx0XHRcdFx0XHRsZXQgdGVtcE5ld0l0ZW06IHN0cmluZyB8IExpc3RJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgbmV3SXRlbSk7XG5cdFx0XHRcdFx0Ly8gZGVsZXRlZCBzZWxlY3RlZCBiZWNhdXNlIGl0J3Mgd2hhdCB3ZSBfd2FudF8gdG8gY2hhbmdlXG5cdFx0XHRcdFx0ZGVsZXRlIHRlbXBOZXdJdGVtLnNlbGVjdGVkO1xuXHRcdFx0XHRcdC8vIHN0cmluZ2lmeSBmb3IgY29tcGFyZVxuXHRcdFx0XHRcdHRlbXBOZXdJdGVtID0gSlNPTi5zdHJpbmdpZnkodGVtcE5ld0l0ZW0pO1xuXHRcdFx0XHRcdC8vIGRvIHRoZSBjb21wYXJlXG5cdFx0XHRcdFx0aWYgKHRlbXBPbGRJdGVtLmluY2x1ZGVzKHRlbXBOZXdJdGVtKSkge1xuXHRcdFx0XHRcdFx0b2xkSXRlbS5zZWxlY3RlZCA9IG5ld0l0ZW0uc2VsZWN0ZWQ7XG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSd2ZSBmb3VuZCBhIG1hdGNoaW5nIGl0ZW0sIHdlIGNhbiBzdG9wIGxvb3Bpbmdcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvbGRJdGVtLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgZm9jdXMgaW4gdGhlIGxpc3QsIGVmZmVjdGl2ZWx5IGEgd3JhcHBlciBmb3IgYGdldEN1cnJlbnRFbGVtZW50KCkuZm9jdXMoKWBcblx0ICovXG5cdGluaXRGb2N1cygpIHtcblx0XHQvLyBlbnN1cmUgd2Ugc3RhcnQgYXQgdGhpcyBmaXJzdCBpdGVtIGlmIG5vdGhpbmcgaXMgYWxyZWFkeSBzZWxlY3RlZFxuXHRcdGlmICh0aGlzLmluZGV4IDwgMCkge1xuXHRcdFx0dGhpcy5pbmRleCA9IDA7XG5cdFx0fVxuXHRcdC8vIHRoaXMuZ2V0Q3VycmVudEVsZW1lbnQoKS5mb2N1cygpO1xuXHRcdHRoaXMubGlzdC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdH1cblxuXHQvKipcblx0ICogTWFuYWdlcyB0aGUga2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3IgbmF2aWdhdGlvbiBhbmQgc2VsZWN0aW9uIHdpdGhpbiBhIGBEcm9wZG93bkxpc3RgLlxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2NFxuXHQgKi9cblx0ZG9LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50LCBpdGVtOiBMaXN0SXRlbSkge1xuXHRcdC8vIFwiU3BhY2ViYXJcIiwgXCJEb3duXCIsIGFuZCBcIlVwXCIgYXJlIElFIHNwZWNpZmljIHZhbHVlc1xuXHRcdGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiIFwiIHx8IGV2ZW50LmtleSA9PT0gXCJTcGFjZWJhclwiKSB7XG5cdFx0XHRcdGlmICh0aGlzLmxpc3RFbGVtZW50TGlzdC5zb21lKG9wdGlvbiA9PiBvcHRpb24ubmF0aXZlRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0KSkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG5cdFx0XHRcdFx0dGhpcy5kb0NsaWNrKGV2ZW50LCBpdGVtKTtcblx0XHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93RG93blwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnQua2V5ID09PSBcIkRvd25cIiB8fCBldmVudC5rZXkgPT09IFwiVXBcIikge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZXZlbnQua2V5ID09PSBcIkRvd25cIikge1xuXHRcdFx0XHRpZiAodGhpcy5oYXNOZXh0RWxlbWVudCgpKSB7XG5cdFx0XHRcdFx0Ly8gdGhpcy5nZXROZXh0RWxlbWVudCgpLmZvY3VzKCk7XG5cdFx0XHRcdFx0dGhpcy5nZXROZXh0RWxlbWVudCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuYmx1ckludGVudC5lbWl0KFwiYm90dG9tXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnQua2V5ID09PSBcIlVwXCIpIHtcblx0XHRcdFx0aWYgKHRoaXMuaGFzUHJldkVsZW1lbnQoKSkge1xuXHRcdFx0XHRcdC8vIHRoaXMuZ2V0UHJldkVsZW1lbnQoKS5mb2N1cygpO1xuXHRcdFx0XHRcdHRoaXMuZ2V0UHJldkVsZW1lbnQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmJsdXJJbnRlbnQuZW1pdChcInRvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYW5hZ2VzIHRoZSBrZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBuYXZpZ2F0aW9uIGFuZCBzZWxlY3Rpb24gd2l0aGluIGEgYERyb3Bkb3duTGlzdGAuXG5cdCAqL1xuXHRuYXZpZ2F0ZUxpc3QoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHQvLyBcIlNwYWNlYmFyXCIsIFwiRG93blwiLCBhbmQgXCJVcFwiIGFyZSBJRSBzcGVjaWZpYyB2YWx1ZXNcblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIgfHwgZXZlbnQua2V5ID09PSBcIiBcIiB8fCBldmVudC5rZXkgPT09IFwiU3BhY2ViYXJcIikge1xuXHRcdFx0aWYgKHRoaXMubGlzdEVsZW1lbnRMaXN0LnNvbWUob3B0aW9uID0+IG9wdGlvbi5uYXRpdmVFbGVtZW50ID09PSBldmVudC50YXJnZXQpKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcblx0XHRcdFx0dGhpcy5kb0NsaWNrKGV2ZW50LCB0aGlzLmdldEN1cnJlbnRJdGVtKCkpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93RG93blwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnQua2V5ID09PSBcIkRvd25cIiB8fCBldmVudC5rZXkgPT09IFwiVXBcIikge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZXZlbnQua2V5ID09PSBcIkRvd25cIikge1xuXHRcdFx0XHRpZiAodGhpcy5oYXNOZXh0RWxlbWVudCgpKSB7XG5cdFx0XHRcdFx0dGhpcy5nZXROZXh0RWxlbWVudCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuYmx1ckludGVudC5lbWl0KFwiYm90dG9tXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgfHwgZXZlbnQua2V5ID09PSBcIlVwXCIpIHtcblx0XHRcdFx0aWYgKHRoaXMuaGFzUHJldkVsZW1lbnQoKSkge1xuXHRcdFx0XHRcdHRoaXMuZ2V0UHJldkVsZW1lbnQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmJsdXJJbnRlbnQuZW1pdChcInRvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuaGlnaGxpZ2h0ZWRJdGVtID0gdGhpcy5nZXRJdGVtSWQodGhpcy5pbmRleCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW1pdHMgdGhlIHNlbGVjdGVkIGl0ZW0gb3IgaXRlbXMgYWZ0ZXIgYSBtb3VzZSBjbGljayBldmVudCBoYXMgb2NjdXJyZWQuXG5cdCAqL1xuXHRkb0NsaWNrKGV2ZW50LCBpdGVtKSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRpZiAoIWl0ZW0uZGlzYWJsZWQpIHtcblx0XHRcdGlmICh0aGlzLnR5cGUgPT09IFwic2luZ2xlXCIpIHtcblx0XHRcdFx0aXRlbS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdC8vIHJlc2V0IHRoZSBzZWxlY3Rpb25cblx0XHRcdFx0Zm9yIChsZXQgb3RoZXJJdGVtIG9mIHRoaXMuZ2V0TGlzdEl0ZW1zKCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbSAhPT0gb3RoZXJJdGVtKSB7IG90aGVySXRlbS5zZWxlY3RlZCA9IGZhbHNlOyB9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW0uc2VsZWN0ZWQgPSAhaXRlbS5zZWxlY3RlZDtcblx0XHRcdH1cblx0XHRcdHRoaXMuaW5kZXggPSB0aGlzLmRpc3BsYXlJdGVtcy5pbmRleE9mKGl0ZW0pO1xuXHRcdFx0dGhpcy5kb0VtaXRTZWxlY3QoZmFsc2UpO1xuXHRcdH1cblx0fVxuXG5cdG9uSXRlbUZvY3VzKGluZGV4KSB7XG5cdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMubGlzdEVsZW1lbnRMaXN0LnRvQXJyYXkoKVtpbmRleF0ubmF0aXZlRWxlbWVudDtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJieC0tbGlzdC1ib3hfX21lbnUtaXRlbS0taGlnaGxpZ2h0ZWRcIik7XG5cdFx0ZWxlbWVudC50YWJJbmRleCA9IDA7XG5cdH1cblxuXHRvbkl0ZW1CbHVyKGluZGV4KSB7XG5cdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMubGlzdEVsZW1lbnRMaXN0LnRvQXJyYXkoKVtpbmRleF0ubmF0aXZlRWxlbWVudDtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJieC0tbGlzdC1ib3hfX21lbnUtaXRlbS0taGlnaGxpZ2h0ZWRcIik7XG5cdFx0ZWxlbWVudC50YWJJbmRleCA9IC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVtaXRzIHRoZSBzY3JvbGwgZXZlbnQgb2YgdGhlIG9wdGlvbnMgbGlzdFxuXHQgKi9cblx0ZW1pdFNjcm9sbChldmVudCkge1xuXHRcdGNvbnN0IGF0VG9wOiBib29sZWFuID0gZXZlbnQuc3JjRWxlbWVudC5zY3JvbGxUb3AgPT09IDA7XG5cdFx0Y29uc3QgYXRCb3R0b206IGJvb2xlYW4gPSBldmVudC5zcmNFbGVtZW50LnNjcm9sbEhlaWdodCAtIGV2ZW50LnNyY0VsZW1lbnQuc2Nyb2xsVG9wID09PSBldmVudC5zcmNFbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRjb25zdCBjdXN0b21TY3JvbGxFdmVudCA9IHsgYXRUb3AsIGF0Qm90dG9tLCBldmVudCB9O1xuXHRcdHRoaXMuc2Nyb2xsLmVtaXQoY3VzdG9tU2Nyb2xsRXZlbnQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFN1YnNjcmliZSB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIGFuIGludGVybmFsIG9ic2VydmFibGUgdGhhdCB3aWxsIHJlc29sdmUgb25jZSB0aGUgaXRlbXMgYXJlIHJlYWR5XG5cdCAqL1xuXHRvbkl0ZW1zUmVhZHkoc3ViY3JpcHRpb246ICgpID0+IHZvaWQpOiB2b2lkIHtcblx0XHQvLyB0aGlzIHN1YnNjcmlwdGlvbiB3aWxsIGF1dG8gdW5zdWJzY3JpYmUgYmVjYXVzZSBvZiB0aGUgYGZpcnN0KClgIHBpcGVcblx0XHQodGhpcy5faXRlbXNSZWFkeSB8fCBvZih0cnVlKSkucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoc3ViY3JpcHRpb24pO1xuXHR9XG5cblx0cmVvcmRlclNlbGVjdGVkKG1vdmVGb2N1cyA9IGZhbHNlKTogdm9pZCB7XG5cdFx0dGhpcy5kaXNwbGF5SXRlbXMgPSBbLi4udGhpcy5nZXRTZWxlY3RlZCgpLCAuLi50aGlzLmdldExpc3RJdGVtcygpLmZpbHRlcihpdGVtID0+ICFpdGVtLnNlbGVjdGVkKV07XG5cdFx0aWYgKG1vdmVGb2N1cykge1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB0aGlzLmdldEN1cnJlbnRFbGVtZW50KCkuZm9jdXMoKSk7XG5cdFx0fVxuXHR9XG59XG4iXX0=