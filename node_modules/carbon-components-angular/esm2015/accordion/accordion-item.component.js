/**
 *
 * carbon-angular v0.0.0 | accordion-item.component.js
 *
 * Copyright 2014, 2022 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, Output, TemplateRef, EventEmitter } from "@angular/core";
export class AccordionItem {
    constructor() {
        this.context = null;
        this.id = `accordion-item-${AccordionItem.accordionItemCount}`;
        this.skeleton = false;
        this.selected = new EventEmitter();
        this.itemClass = true;
        this.expanded = false;
        this.disabled = false;
        this.itemType = "list-item";
        this.role = "heading";
        this.ariaLevel = 3;
        AccordionItem.accordionItemCount++;
    }
    toggleExpanded() {
        if (!this.skeleton) {
            this.expanded = !this.expanded;
            this.selected.emit({ id: this.id, expanded: this.expanded });
        }
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
AccordionItem.accordionItemCount = 0;
AccordionItem.decorators = [
    { type: Component, args: [{
                selector: "ibm-accordion-item",
                template: `
		<button
			type="button"
			[disabled]="disabled"
			[attr.aria-expanded]="expanded"
			[attr.aria-controls]="id"
			(click)="toggleExpanded()"
			class="bx--accordion__heading">
			<svg ibmIcon="chevron--right" size="16" class="bx--accordion__arrow"></svg>
			<p *ngIf="!isTemplate(title)"
				class="bx--accordion__title"
				[ngClass]="{
					'bx--skeleton__text': skeleton
				}">
				{{!skeleton ? title : null}}
			</p>
			<ng-template
				*ngIf="isTemplate(title)"
				[ngTemplateOutlet]="title"
				[ngTemplateOutletContext]="context">
			</ng-template>
		</button>
		<div [id]="id" class="bx--accordion__content">
			<ng-content *ngIf="!skeleton; else skeletonTemplate"></ng-content>
			<ng-template #skeletonTemplate>
				<p class="bx--skeleton__text" style="width: 90%"></p>
				<p class="bx--skeleton__text" style="width: 80%"></p>
				<p class="bx--skeleton__text" style="width: 95%"></p>
			</ng-template>
		</div>
	`
            }] }
];
/** @nocollapse */
AccordionItem.ctorParameters = () => [];
AccordionItem.propDecorators = {
    title: [{ type: Input }],
    context: [{ type: Input }],
    id: [{ type: Input }],
    skeleton: [{ type: Input }],
    selected: [{ type: Output }],
    itemClass: [{ type: HostBinding, args: ["class.bx--accordion__item",] }],
    expanded: [{ type: HostBinding, args: ["class.bx--accordion__item--active",] }, { type: Input }],
    disabled: [{ type: HostBinding, args: ["class.bx--accordion__item--disabled",] }, { type: Input }],
    itemType: [{ type: HostBinding, args: ["style.display",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    ariaLevel: [{ type: HostBinding, args: ["attr.aria-level",] }, { type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9hY2NvcmRpb24vIiwic291cmNlcyI6WyJhY2NvcmRpb24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLE1BQU0sRUFDTixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBb0N2QixNQUFNLE9BQU8sYUFBYTtJQWV6QjtRQVpTLFlBQU8sR0FBa0IsSUFBSSxDQUFDO1FBQzlCLE9BQUUsR0FBRyxrQkFBa0IsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNoQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVFLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDQSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2YsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNoRCxhQUFRLEdBQUcsV0FBVyxDQUFDO1FBQzNCLFNBQUksR0FBRyxTQUFTLENBQUM7UUFDRixjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBR3RELGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFTSxjQUFjO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO1NBQzNEO0lBQ0YsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFLO1FBQ3RCLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUNyQyxDQUFDOztBQTNCTSxnQ0FBa0IsR0FBRyxDQUFDLENBQUM7O1lBbkM5QixTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUE4QlQ7YUFDRDs7Ozs7b0JBR0MsS0FBSztzQkFDTCxLQUFLO2lCQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxNQUFNO3dCQUVOLFdBQVcsU0FBQywyQkFBMkI7dUJBQ3ZDLFdBQVcsU0FBQyxtQ0FBbUMsY0FBRyxLQUFLO3VCQUN2RCxXQUFXLFNBQUMscUNBQXFDLGNBQUcsS0FBSzt1QkFDekQsV0FBVyxTQUFDLGVBQWU7bUJBQzNCLFdBQVcsU0FBQyxXQUFXO3dCQUN2QixXQUFXLFNBQUMsaUJBQWlCLGNBQUcsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdEhvc3RCaW5kaW5nLFxuXHRPdXRwdXQsXG5cdFRlbXBsYXRlUmVmLFxuXHRFdmVudEVtaXR0ZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1hY2NvcmRpb24taXRlbVwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxidXR0b25cblx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiZXhwYW5kZWRcIlxuXHRcdFx0W2F0dHIuYXJpYS1jb250cm9sc109XCJpZFwiXG5cdFx0XHQoY2xpY2spPVwidG9nZ2xlRXhwYW5kZWQoKVwiXG5cdFx0XHRjbGFzcz1cImJ4LS1hY2NvcmRpb25fX2hlYWRpbmdcIj5cblx0XHRcdDxzdmcgaWJtSWNvbj1cImNoZXZyb24tLXJpZ2h0XCIgc2l6ZT1cIjE2XCIgY2xhc3M9XCJieC0tYWNjb3JkaW9uX19hcnJvd1wiPjwvc3ZnPlxuXHRcdFx0PHAgKm5nSWY9XCIhaXNUZW1wbGF0ZSh0aXRsZSlcIlxuXHRcdFx0XHRjbGFzcz1cImJ4LS1hY2NvcmRpb25fX3RpdGxlXCJcblx0XHRcdFx0W25nQ2xhc3NdPVwie1xuXHRcdFx0XHRcdCdieC0tc2tlbGV0b25fX3RleHQnOiBza2VsZXRvblxuXHRcdFx0XHR9XCI+XG5cdFx0XHRcdHt7IXNrZWxldG9uID8gdGl0bGUgOiBudWxsfX1cblx0XHRcdDwvcD5cblx0XHRcdDxuZy10ZW1wbGF0ZVxuXHRcdFx0XHQqbmdJZj1cImlzVGVtcGxhdGUodGl0bGUpXCJcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwidGl0bGVcIlxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwiY29udGV4dFwiPlxuXHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHQ8L2J1dHRvbj5cblx0XHQ8ZGl2IFtpZF09XCJpZFwiIGNsYXNzPVwiYngtLWFjY29yZGlvbl9fY29udGVudFwiPlxuXHRcdFx0PG5nLWNvbnRlbnQgKm5nSWY9XCIhc2tlbGV0b247IGVsc2Ugc2tlbGV0b25UZW1wbGF0ZVwiPjwvbmctY29udGVudD5cblx0XHRcdDxuZy10ZW1wbGF0ZSAjc2tlbGV0b25UZW1wbGF0ZT5cblx0XHRcdFx0PHAgY2xhc3M9XCJieC0tc2tlbGV0b25fX3RleHRcIiBzdHlsZT1cIndpZHRoOiA5MCVcIj48L3A+XG5cdFx0XHRcdDxwIGNsYXNzPVwiYngtLXNrZWxldG9uX190ZXh0XCIgc3R5bGU9XCJ3aWR0aDogODAlXCI+PC9wPlxuXHRcdFx0XHQ8cCBjbGFzcz1cImJ4LS1za2VsZXRvbl9fdGV4dFwiIHN0eWxlPVwid2lkdGg6IDk1JVwiPjwvcD5cblx0XHRcdDwvbmctdGVtcGxhdGU+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uSXRlbSB7XG5cdHN0YXRpYyBhY2NvcmRpb25JdGVtQ291bnQgPSAwO1xuXHRASW5wdXQoKSB0aXRsZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pjtcblx0QElucHV0KCkgY29udGV4dDogT2JqZWN0IHwgbnVsbCA9IG51bGw7XG5cdEBJbnB1dCgpIGlkID0gYGFjY29yZGlvbi1pdGVtLSR7QWNjb3JkaW9uSXRlbS5hY2NvcmRpb25JdGVtQ291bnR9YDtcblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblx0QE91dHB1dCgpIHNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1hY2NvcmRpb25fX2l0ZW1cIikgaXRlbUNsYXNzID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLWFjY29yZGlvbl9faXRlbS0tYWN0aXZlXCIpIEBJbnB1dCgpIGV4cGFuZGVkID0gZmFsc2U7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1hY2NvcmRpb25fX2l0ZW0tLWRpc2FibGVkXCIpIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cdEBIb3N0QmluZGluZyhcInN0eWxlLmRpc3BsYXlcIikgaXRlbVR5cGUgPSBcImxpc3QtaXRlbVwiO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgcm9sZSA9IFwiaGVhZGluZ1wiO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtbGV2ZWxcIikgQElucHV0KCkgYXJpYUxldmVsID0gMztcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRBY2NvcmRpb25JdGVtLmFjY29yZGlvbkl0ZW1Db3VudCsrO1xuXHR9XG5cblx0cHVibGljIHRvZ2dsZUV4cGFuZGVkKCkge1xuXHRcdGlmICghdGhpcy5za2VsZXRvbikge1xuXHRcdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHRcdFx0dGhpcy5zZWxlY3RlZC5lbWl0KHtpZDogdGhpcy5pZCwgZXhwYW5kZWQ6IHRoaXMuZXhwYW5kZWR9KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgaXNUZW1wbGF0ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuXHR9XG59XG4iXX0=