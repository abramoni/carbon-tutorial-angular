/**
 *
 * carbon-angular v0.0.0 | dialog.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ElementRef, OnInit, AfterViewInit, OnDestroy } from "@angular/core";
import { Subscription } from "rxjs";
import { AbsolutePosition, Positions } from "@carbon/utils-position";
import { CloseMeta, DialogConfig } from "./dialog-config.interface";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
/**
 * Implements a `Dialog` that can be positioned anywhere on the page.
 * Used to implement a popover or tooltip.
 */
import * as ɵngcc0 from '@angular/core';
export declare class Dialog implements OnInit, AfterViewInit, OnDestroy {
    protected elementRef: ElementRef;
    protected elementService: ElementService;
    protected animationFrameService: AnimationFrameService;
    /**
     * Emits event that handles the closing of a `Dialog` object.
     */
    close: EventEmitter<CloseMeta>;
    /**
     * Receives `DialogConfig` interface object with properties of `Dialog`
     * explicitly defined.
     */
    dialogConfig: DialogConfig;
    /**
     * Maintains a reference to the view DOM element of the `Dialog`.
     */
    dialog: ElementRef;
    /**
     * Stores the data received from `dialogConfig`.
     */
    data: {};
    /**
     * The placement of the `Dialog` is received from the `Position` service.
     */
    placement: string;
    protected visibilitySubscription: Subscription;
    protected animationFrameSubscription: Subscription;
    /**
     * Handles offsetting the `Dialog` item based on the defined position
     * to not obscure the content beneath.
     */
    protected addGap: {
        "left": (pos: any) => AbsolutePosition;
        "right": (pos: any) => AbsolutePosition;
        "top": (pos: any) => AbsolutePosition;
        "bottom": (pos: any) => AbsolutePosition;
        "left-bottom": (pos: any) => AbsolutePosition;
        "right-bottom": (pos: any) => AbsolutePosition;
    };
    /**
     * Extra placements. Child classes can add to this for use in `placeDialog`.
     */
    protected placements: Positions;
    /**
     * Creates an instance of `Dialog`.
     * @param elementRef
     * @param elementService
     */
    constructor(elementRef: ElementRef, elementService: ElementService, animationFrameService?: AnimationFrameService);
    /**
     * Initialize the `Dialog`, set the placement and gap, and add a `Subscription` to resize events.
     */
    ngOnInit(): void;
    /**
     * After the DOM is ready, focus is set and dialog is placed
     * in respect to the parent element.
     */
    ngAfterViewInit(): void;
    /**
     * Empty method to be overridden by consuming classes to run any additional initialization code.
     */
    onDialogInit(): void;
    /**
     * Empty method to be overridden by consuming classes to run any additional initialization code after the view is available.
     * NOTE: this does _not_ guarantee the dialog will be positioned, simply that it will exist in the DOM
     */
    afterDialogViewInit(): void;
    /**
     * Uses the position service to position the `Dialog` in screen space
     */
    placeDialog(): void;
    /**
     * Sets up a KeyboardEvent to close `Dialog` with Escape key.
     * @param event
     */
    escapeClose(event: KeyboardEvent): void;
    /**
     * Sets up a event Listener to close `Dialog` if click event occurs outside
     * `Dialog` object.
     * @param event
     */
    clickClose(event: any): void;
    /**
     * Closes `Dialog` object by emitting the close event upwards to parents.
     */
    doClose(meta?: CloseMeta): void;
    /**
     * At destruction of component, `Dialog` unsubscribes from all the subscriptions.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Dialog>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Dialog, "ibm-dialog", never, {
    "dialogConfig": "dialogConfig";
}, {
    "close": "close";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkaWFsb2cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgZGlhbG9nLmNvbXBvbmVudC5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBBYnNvbHV0ZVBvc2l0aW9uLCBQb3NpdGlvbnMgfSBmcm9tIFwiQGNhcmJvbi91dGlscy1wb3NpdGlvblwiO1xuaW1wb3J0IHsgQ2xvc2VNZXRhLCBEaWFsb2dDb25maWcgfSBmcm9tIFwiLi9kaWFsb2ctY29uZmlnLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgQW5pbWF0aW9uRnJhbWVTZXJ2aWNlLCBFbGVtZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG4vKipcbiAqIEltcGxlbWVudHMgYSBgRGlhbG9nYCB0aGF0IGNhbiBiZSBwb3NpdGlvbmVkIGFueXdoZXJlIG9uIHRoZSBwYWdlLlxuICogVXNlZCB0byBpbXBsZW1lbnQgYSBwb3BvdmVyIG9yIHRvb2x0aXAuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpYWxvZyBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFNlcnZpY2U6IEVsZW1lbnRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBhbmltYXRpb25GcmFtZVNlcnZpY2U6IEFuaW1hdGlvbkZyYW1lU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBFbWl0cyBldmVudCB0aGF0IGhhbmRsZXMgdGhlIGNsb3Npbmcgb2YgYSBgRGlhbG9nYCBvYmplY3QuXG4gICAgICovXG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjxDbG9zZU1ldGE+O1xuICAgIC8qKlxuICAgICAqIFJlY2VpdmVzIGBEaWFsb2dDb25maWdgIGludGVyZmFjZSBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIG9mIGBEaWFsb2dgXG4gICAgICogZXhwbGljaXRseSBkZWZpbmVkLlxuICAgICAqL1xuICAgIGRpYWxvZ0NvbmZpZzogRGlhbG9nQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIE1haW50YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgdmlldyBET00gZWxlbWVudCBvZiB0aGUgYERpYWxvZ2AuXG4gICAgICovXG4gICAgZGlhbG9nOiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIGBkaWFsb2dDb25maWdgLlxuICAgICAqL1xuICAgIGRhdGE6IHt9O1xuICAgIC8qKlxuICAgICAqIFRoZSBwbGFjZW1lbnQgb2YgdGhlIGBEaWFsb2dgIGlzIHJlY2VpdmVkIGZyb20gdGhlIGBQb3NpdGlvbmAgc2VydmljZS5cbiAgICAgKi9cbiAgICBwbGFjZW1lbnQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgdmlzaWJpbGl0eVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCBhbmltYXRpb25GcmFtZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgb2Zmc2V0dGluZyB0aGUgYERpYWxvZ2AgaXRlbSBiYXNlZCBvbiB0aGUgZGVmaW5lZCBwb3NpdGlvblxuICAgICAqIHRvIG5vdCBvYnNjdXJlIHRoZSBjb250ZW50IGJlbmVhdGguXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFkZEdhcDoge1xuICAgICAgICBcImxlZnRcIjogKHBvczogYW55KSA9PiBBYnNvbHV0ZVBvc2l0aW9uO1xuICAgICAgICBcInJpZ2h0XCI6IChwb3M6IGFueSkgPT4gQWJzb2x1dGVQb3NpdGlvbjtcbiAgICAgICAgXCJ0b3BcIjogKHBvczogYW55KSA9PiBBYnNvbHV0ZVBvc2l0aW9uO1xuICAgICAgICBcImJvdHRvbVwiOiAocG9zOiBhbnkpID0+IEFic29sdXRlUG9zaXRpb247XG4gICAgICAgIFwibGVmdC1ib3R0b21cIjogKHBvczogYW55KSA9PiBBYnNvbHV0ZVBvc2l0aW9uO1xuICAgICAgICBcInJpZ2h0LWJvdHRvbVwiOiAocG9zOiBhbnkpID0+IEFic29sdXRlUG9zaXRpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFeHRyYSBwbGFjZW1lbnRzLiBDaGlsZCBjbGFzc2VzIGNhbiBhZGQgdG8gdGhpcyBmb3IgdXNlIGluIGBwbGFjZURpYWxvZ2AuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHBsYWNlbWVudHM6IFBvc2l0aW9ucztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBEaWFsb2dgLlxuICAgICAqIEBwYXJhbSBlbGVtZW50UmVmXG4gICAgICogQHBhcmFtIGVsZW1lbnRTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZWxlbWVudFNlcnZpY2U6IEVsZW1lbnRTZXJ2aWNlLCBhbmltYXRpb25GcmFtZVNlcnZpY2U/OiBBbmltYXRpb25GcmFtZVNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGBEaWFsb2dgLCBzZXQgdGhlIHBsYWNlbWVudCBhbmQgZ2FwLCBhbmQgYWRkIGEgYFN1YnNjcmlwdGlvbmAgdG8gcmVzaXplIGV2ZW50cy5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFmdGVyIHRoZSBET00gaXMgcmVhZHksIGZvY3VzIGlzIHNldCBhbmQgZGlhbG9nIGlzIHBsYWNlZFxuICAgICAqIGluIHJlc3BlY3QgdG8gdGhlIHBhcmVudCBlbGVtZW50LlxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEVtcHR5IG1ldGhvZCB0byBiZSBvdmVycmlkZGVuIGJ5IGNvbnN1bWluZyBjbGFzc2VzIHRvIHJ1biBhbnkgYWRkaXRpb25hbCBpbml0aWFsaXphdGlvbiBjb2RlLlxuICAgICAqL1xuICAgIG9uRGlhbG9nSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEVtcHR5IG1ldGhvZCB0byBiZSBvdmVycmlkZGVuIGJ5IGNvbnN1bWluZyBjbGFzc2VzIHRvIHJ1biBhbnkgYWRkaXRpb25hbCBpbml0aWFsaXphdGlvbiBjb2RlIGFmdGVyIHRoZSB2aWV3IGlzIGF2YWlsYWJsZS5cbiAgICAgKiBOT1RFOiB0aGlzIGRvZXMgX25vdF8gZ3VhcmFudGVlIHRoZSBkaWFsb2cgd2lsbCBiZSBwb3NpdGlvbmVkLCBzaW1wbHkgdGhhdCBpdCB3aWxsIGV4aXN0IGluIHRoZSBET01cbiAgICAgKi9cbiAgICBhZnRlckRpYWxvZ1ZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNlcyB0aGUgcG9zaXRpb24gc2VydmljZSB0byBwb3NpdGlvbiB0aGUgYERpYWxvZ2AgaW4gc2NyZWVuIHNwYWNlXG4gICAgICovXG4gICAgcGxhY2VEaWFsb2coKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgS2V5Ym9hcmRFdmVudCB0byBjbG9zZSBgRGlhbG9nYCB3aXRoIEVzY2FwZSBrZXkuXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgZXNjYXBlQ2xvc2UoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdXAgYSBldmVudCBMaXN0ZW5lciB0byBjbG9zZSBgRGlhbG9nYCBpZiBjbGljayBldmVudCBvY2N1cnMgb3V0c2lkZVxuICAgICAqIGBEaWFsb2dgIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBjbGlja0Nsb3NlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyBgRGlhbG9nYCBvYmplY3QgYnkgZW1pdHRpbmcgdGhlIGNsb3NlIGV2ZW50IHVwd2FyZHMgdG8gcGFyZW50cy5cbiAgICAgKi9cbiAgICBkb0Nsb3NlKG1ldGE/OiBDbG9zZU1ldGEpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEF0IGRlc3RydWN0aW9uIG9mIGNvbXBvbmVudCwgYERpYWxvZ2AgdW5zdWJzY3JpYmVzIGZyb20gYWxsIHRoZSBzdWJzY3JpcHRpb25zLlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=