/**
 *
 * carbon-angular v0.0.0 | tooltip.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef } from "@angular/core";
import { Dialog } from "../dialog.component";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
/**
 * Extend the `Dialog` component to create a tooltip for exposing content.
 */
import * as ɵngcc0 from '@angular/core';
export declare class Tooltip extends Dialog {
    protected elementRef: ElementRef;
    protected elementService: ElementService;
    protected animationFrameService: AnimationFrameService;
    style: string;
    /**
     * Value is set to `true` if the `Tooltip` is to display a `TemplateRef` instead of a string.
     */
    hasContentTemplate: boolean;
    /**
     * Sets the role of the tooltip. If there's no focusable content we leave it as a `tooltip`,
     * if there _is_ focusable content we switch to the interactive `dialog` role.
     */
    role: string;
    constructor(elementRef: ElementRef, elementService: ElementService, animationFrameService?: AnimationFrameService);
    /**
     * Check whether there is a template for the `Tooltip` content.
     */
    onDialogInit(): void;
    getAdjustOffset(): {
        top: number;
        left: number;
    };
    afterDialogViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Tooltip>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Tooltip, "ibm-tooltip", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIGNhcmJvbi1hbmd1bGFyIHYwLjAuMCB8IHRvb2x0aXAuY29tcG9uZW50LmQudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCwgMjAyMSBJQk1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbmltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi4uL2RpYWxvZy5jb21wb25lbnRcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkZyYW1lU2VydmljZSwgRWxlbWVudFNlcnZpY2UgfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci91dGlsc1wiO1xuLyoqXG4gKiBFeHRlbmQgdGhlIGBEaWFsb2dgIGNvbXBvbmVudCB0byBjcmVhdGUgYSB0b29sdGlwIGZvciBleHBvc2luZyBjb250ZW50LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb29sdGlwIGV4dGVuZHMgRGlhbG9nIHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFNlcnZpY2U6IEVsZW1lbnRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBhbmltYXRpb25GcmFtZVNlcnZpY2U6IEFuaW1hdGlvbkZyYW1lU2VydmljZTtcbiAgICBzdHlsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFZhbHVlIGlzIHNldCB0byBgdHJ1ZWAgaWYgdGhlIGBUb29sdGlwYCBpcyB0byBkaXNwbGF5IGEgYFRlbXBsYXRlUmVmYCBpbnN0ZWFkIG9mIGEgc3RyaW5nLlxuICAgICAqL1xuICAgIGhhc0NvbnRlbnRUZW1wbGF0ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByb2xlIG9mIHRoZSB0b29sdGlwLiBJZiB0aGVyZSdzIG5vIGZvY3VzYWJsZSBjb250ZW50IHdlIGxlYXZlIGl0IGFzIGEgYHRvb2x0aXBgLFxuICAgICAqIGlmIHRoZXJlIF9pc18gZm9jdXNhYmxlIGNvbnRlbnQgd2Ugc3dpdGNoIHRvIHRoZSBpbnRlcmFjdGl2ZSBgZGlhbG9nYCByb2xlLlxuICAgICAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBlbGVtZW50U2VydmljZTogRWxlbWVudFNlcnZpY2UsIGFuaW1hdGlvbkZyYW1lU2VydmljZT86IEFuaW1hdGlvbkZyYW1lU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGVyZSBpcyBhIHRlbXBsYXRlIGZvciB0aGUgYFRvb2x0aXBgIGNvbnRlbnQuXG4gICAgICovXG4gICAgb25EaWFsb2dJbml0KCk6IHZvaWQ7XG4gICAgZ2V0QWRqdXN0T2Zmc2V0KCk6IHtcbiAgICAgICAgdG9wOiBudW1iZXI7XG4gICAgICAgIGxlZnQ6IG51bWJlcjtcbiAgICB9O1xuICAgIGFmdGVyRGlhbG9nVmlld0luaXQoKTogdm9pZDtcbn1cbiJdfQ==