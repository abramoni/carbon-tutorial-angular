/**
 *
 * carbon-angular v0.0.0 | overflow-menu-option.component.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, EventEmitter, AfterViewInit } from "@angular/core";
/**
 * Available HTML anchor targets
 */
import * as ɵngcc0 from '@angular/core';
export declare enum Target {
    self = "_self",
    blank = "_blank",
    parent = "_parent",
    top = "_top"
}
/**
 * `OverflowMenuOption` represents a single option in an overflow menu
 *
 * Presently it has three possible states - normal, disabled, and danger:
 * ```
 * <ibm-overflow-menu-option>Simple option</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option disabled="true">Disabled</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option type="danger">Danger option</ibm-overflow-menu-option>
 * ```
 *
 * For content that expands beyond the overflow menu `OverflowMenuOption` automatically adds a title attribute.
 */
export declare class OverflowMenuOption implements AfterViewInit {
    protected elementRef: ElementRef;
    optionClass: boolean;
    role: string;
    readonly isDanger: Boolean;
    readonly isDisabled: Boolean;
    /**
     * Set to `true` to display a dividing line above this option
     */
    divider: boolean;
    /**
     * toggles between `normal` and `danger` states
     */
    type: "normal" | "danger";
    /**
     * disable/enable interactions
     */
    disabled: boolean;
    /**
     * If it's an anchor, this is its location
     */
    href: string;
    /**
     * Allows to add a target to the anchor
     */
    target: Target;
    /**
     * Apply a custom class to the inner button/anchor
     */
    innerClass: string;
    /**
     * rel only returns its value if target is defined
     */
    readonly rel: string;
    selected: EventEmitter<any>;
    tabIndex: number;
    title: any;
    protected _target: Target;
    constructor(elementRef: ElementRef);
    onClick(): void;
    onFocus(): void;
    onBlur(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OverflowMenuOption>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OverflowMenuOption, "ibm-overflow-menu-option", never, {
    "divider": "divider";
    "type": "type";
    "disabled": "disabled";
    "innerClass": "innerClass";
    "target": "target";
    "href": "href";
}, {
    "selected": "selected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1vcHRpb24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm92ZXJmbG93LW1lbnUtb3B0aW9uLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2REEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBvdmVyZmxvdy1tZW51LW9wdGlvbi5jb21wb25lbnQuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogQXZhaWxhYmxlIEhUTUwgYW5jaG9yIHRhcmdldHNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgZW51bSBUYXJnZXQge1xuICAgIHNlbGYgPSBcIl9zZWxmXCIsXG4gICAgYmxhbmsgPSBcIl9ibGFua1wiLFxuICAgIHBhcmVudCA9IFwiX3BhcmVudFwiLFxuICAgIHRvcCA9IFwiX3RvcFwiXG59XG4vKipcbiAqIGBPdmVyZmxvd01lbnVPcHRpb25gIHJlcHJlc2VudHMgYSBzaW5nbGUgb3B0aW9uIGluIGFuIG92ZXJmbG93IG1lbnVcbiAqXG4gKiBQcmVzZW50bHkgaXQgaGFzIHRocmVlIHBvc3NpYmxlIHN0YXRlcyAtIG5vcm1hbCwgZGlzYWJsZWQsIGFuZCBkYW5nZXI6XG4gKiBgYGBcbiAqIDxpYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24+U2ltcGxlIG9wdGlvbjwvaWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPlxuICogPGlibS1vdmVyZmxvdy1tZW51LW9wdGlvbiBkaXNhYmxlZD1cInRydWVcIj5EaXNhYmxlZDwvaWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPlxuICogPGlibS1vdmVyZmxvdy1tZW51LW9wdGlvbiB0eXBlPVwiZGFuZ2VyXCI+RGFuZ2VyIG9wdGlvbjwvaWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPlxuICogYGBgXG4gKlxuICogRm9yIGNvbnRlbnQgdGhhdCBleHBhbmRzIGJleW9uZCB0aGUgb3ZlcmZsb3cgbWVudSBgT3ZlcmZsb3dNZW51T3B0aW9uYCBhdXRvbWF0aWNhbGx5IGFkZHMgYSB0aXRsZSBhdHRyaWJ1dGUuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE92ZXJmbG93TWVudU9wdGlvbiBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIG9wdGlvbkNsYXNzOiBib29sZWFuO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICByZWFkb25seSBpc0RhbmdlcjogQm9vbGVhbjtcbiAgICByZWFkb25seSBpc0Rpc2FibGVkOiBCb29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCB0byBgdHJ1ZWAgdG8gZGlzcGxheSBhIGRpdmlkaW5nIGxpbmUgYWJvdmUgdGhpcyBvcHRpb25cbiAgICAgKi9cbiAgICBkaXZpZGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIHRvZ2dsZXMgYmV0d2VlbiBgbm9ybWFsYCBhbmQgYGRhbmdlcmAgc3RhdGVzXG4gICAgICovXG4gICAgdHlwZTogXCJub3JtYWxcIiB8IFwiZGFuZ2VyXCI7XG4gICAgLyoqXG4gICAgICogZGlzYWJsZS9lbmFibGUgaW50ZXJhY3Rpb25zXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWYgaXQncyBhbiBhbmNob3IsIHRoaXMgaXMgaXRzIGxvY2F0aW9uXG4gICAgICovXG4gICAgaHJlZjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBhZGQgYSB0YXJnZXQgdG8gdGhlIGFuY2hvclxuICAgICAqL1xuICAgIHRhcmdldDogVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgY3VzdG9tIGNsYXNzIHRvIHRoZSBpbm5lciBidXR0b24vYW5jaG9yXG4gICAgICovXG4gICAgaW5uZXJDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIHJlbCBvbmx5IHJldHVybnMgaXRzIHZhbHVlIGlmIHRhcmdldCBpcyBkZWZpbmVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVsOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRhYkluZGV4OiBudW1iZXI7XG4gICAgdGl0bGU6IGFueTtcbiAgICBwcm90ZWN0ZWQgX3RhcmdldDogVGFyZ2V0O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG59XG4iXX0=