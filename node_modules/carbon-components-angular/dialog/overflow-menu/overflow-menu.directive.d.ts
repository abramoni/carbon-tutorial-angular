/**
 *
 * carbon-angular v0.0.0 | overflow-menu.directive.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ElementRef, ViewContainerRef, TemplateRef, AfterContentInit } from "@angular/core";
import { DialogDirective } from "../dialog.directive";
import { DialogService } from "../dialog.service";
import { EventService } from "carbon-components-angular/utils";
/**
 * Directive for extending `Dialog` to create overflow menus.
 *
 * class: OverflowMenuDirective (extends DialogDirective)
 *
 *
 * selector: `ibmOverflowMenu`
 *
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef"></div>
 * <ng-template #templateRef>
 * 	<!-- overflow menu options here -->
 * </ng-template>
 * ```
 *
 * ```html
 * <div [ibmOverflowMenu]="templateRef" [customPane]="true"></div>
 * <ng-template #templateRef>
 *  <!-- custom content goes here -->
 * </ng-template>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class OverflowMenuDirective extends DialogDirective implements AfterContentInit {
    protected elementRef: ElementRef;
    protected viewContainerRef: ViewContainerRef;
    protected dialogService: DialogService;
    protected eventService: EventService;
    /**
     * Takes a template ref of `OverflowMenuOptions`s
     */
    ibmOverflowMenu: TemplateRef<any>;
    /**
     * Controls wether the overflow menu is flipped
     */
    flip: boolean;
    /**
     * This specifies any vertical and horizontal offset for the position of the dialog
     */
    offset: {
        x: number;
        y: number;
    };
    /**
     * Classes to add to the dialog container
     */
    wrapperClass: string;
    /**
     * Set to true to for custom content
     */
    customPane: boolean;
    /**
     * Creates an instance of `OverflowMenuDirective`.
     */
    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef, dialogService: DialogService, eventService: EventService);
    ngAfterContentInit(): void;
    updateConfig(): void;
    hostkeys(event: KeyboardEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OverflowMenuDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<OverflowMenuDirective, "[ibmOverflowMenu]", ["ibmOverflowMenu"], {
    "flip": "flip";
    "wrapperClass": "wrapperClass";
    "customPane": "customPane";
    "ibmOverflowMenu": "ibmOverflowMenu";
    "offset": "offset";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsib3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogY2FyYm9uLWFuZ3VsYXIgdjAuMC4wIHwgb3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUuZC50c1xuICpcbiAqIENvcHlyaWdodCAyMDE0LCAyMDIxIElCTVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWYsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpYWxvZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tIFwiLi4vZGlhbG9nLnNlcnZpY2VcIjtcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3V0aWxzXCI7XG4vKipcbiAqIERpcmVjdGl2ZSBmb3IgZXh0ZW5kaW5nIGBEaWFsb2dgIHRvIGNyZWF0ZSBvdmVyZmxvdyBtZW51cy5cbiAqXG4gKiBjbGFzczogT3ZlcmZsb3dNZW51RGlyZWN0aXZlIChleHRlbmRzIERpYWxvZ0RpcmVjdGl2ZSlcbiAqXG4gKlxuICogc2VsZWN0b3I6IGBpYm1PdmVyZmxvd01lbnVgXG4gKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgW2libU92ZXJmbG93TWVudV09XCJ0ZW1wbGF0ZVJlZlwiPjwvZGl2PlxuICogPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZVJlZj5cbiAqIFx0PCEtLSBvdmVyZmxvdyBtZW51IG9wdGlvbnMgaGVyZSAtLT5cbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IFtpYm1PdmVyZmxvd01lbnVdPVwidGVtcGxhdGVSZWZcIiBbY3VzdG9tUGFuZV09XCJ0cnVlXCI+PC9kaXY+XG4gKiA8bmctdGVtcGxhdGUgI3RlbXBsYXRlUmVmPlxuICogIDwhLS0gY3VzdG9tIGNvbnRlbnQgZ29lcyBoZXJlIC0tPlxuICogPC9uZy10ZW1wbGF0ZT5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPdmVyZmxvd01lbnVEaXJlY3RpdmUgZXh0ZW5kcyBEaWFsb2dEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcm90ZWN0ZWQgZGlhbG9nU2VydmljZTogRGlhbG9nU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogVGFrZXMgYSB0ZW1wbGF0ZSByZWYgb2YgYE92ZXJmbG93TWVudU9wdGlvbnNgc1xuICAgICAqL1xuICAgIGlibU92ZXJmbG93TWVudTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB3ZXRoZXIgdGhlIG92ZXJmbG93IG1lbnUgaXMgZmxpcHBlZFxuICAgICAqL1xuICAgIGZsaXA6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhpcyBzcGVjaWZpZXMgYW55IHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIG9mZnNldCBmb3IgdGhlIHBvc2l0aW9uIG9mIHRoZSBkaWFsb2dcbiAgICAgKi9cbiAgICBvZmZzZXQ6IHtcbiAgICAgICAgeDogbnVtYmVyO1xuICAgICAgICB5OiBudW1iZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGFzc2VzIHRvIGFkZCB0byB0aGUgZGlhbG9nIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHdyYXBwZXJDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB0byB0cnVlIHRvIGZvciBjdXN0b20gY29udGVudFxuICAgICAqL1xuICAgIGN1c3RvbVBhbmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgT3ZlcmZsb3dNZW51RGlyZWN0aXZlYC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlLCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZSk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgdXBkYXRlQ29uZmlnKCk6IHZvaWQ7XG4gICAgaG9zdGtleXMoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xufVxuIl19