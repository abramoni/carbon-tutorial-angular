/**
 *
 * carbon-angular v0.0.0 | dialog.service.d.ts
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injector, ComponentRef, ComponentFactory, ComponentFactoryResolver, ViewContainerRef } from "@angular/core";
import { DialogConfig } from "./dialog-config.interface";
import { PlaceholderService } from "carbon-components-angular/placeholder";
import { Dialog } from "./dialog.component";
/**
 * `Dialog` object to be injected into other components.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DialogService {
    protected componentFactoryResolver: ComponentFactoryResolver;
    protected injector: Injector;
    protected placeholderService: PlaceholderService;
    /**
     * Used in `singletonClickListen`, don't count on its existence and values.
     */
    protected static listeningForBodyClicks: boolean;
    /**
     * A set of all known dialog components
     */
    protected static dialogRefs: Set<ComponentRef<Dialog>>;
    /**
     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct
     */
    static closeAll(): void;
    /**
     * The default component factory to use when creating dialogs
     */
    componentFactory: ComponentFactory<any>;
    /**
     * Creates an instance of `DialogService`.
     */
    constructor(componentFactoryResolver: ComponentFactoryResolver, injector: Injector, placeholderService: PlaceholderService);
    /**
     * Set the context for the service. For example, the `component` property can be used to set the
     * default component that should be created by the service, for a given instance of the service.
     * @param options `{ component: any }` where `component` is a component that extends `dialog.component`
     */
    setContext(options: {
        component: any;
    }): void;
    /**
     * If `dialogRef` is defined, the Dialog is already open. If
     * `dialogRef` is undefined, we create the `Dialog` component and reference to it.
     * A subscription is created to track if the `Dialog` should close.
     *
     * @param viewContainer a `ViewContainerRef` to instantiate the component against.
     * May be `null` if an `ibm-placeholder` exists and `dialogConfig.appendInline` is false
     * @param dialogConfig the `DialogConfig` for the component
     */
    open(viewContainer: ViewContainerRef, dialogConfig: DialogConfig, component?: any): ComponentRef<Dialog>;
    /**
     * On close of `Dialog` item, sets focus back to previous item, unsets
     * the current `dialogRef` item. Unsubscribes to the event of `Dialog` close.
     *
     * @param dialogRef the dialogRef to close
     */
    close(dialogRef: ComponentRef<Dialog>): void;
    /**
     * Closes all known `Dialog`s. Does not focus any previous elements, since we can't know which would be correct
     *
     * @deprecated since v4. Use the static `DialogService.closeAll` instead
     */
    closeAll(): void;
    /**
     * Fix for safari hijacking clicks.
     *
     * Runs on `ngOnInit` of every dialog. Ensures we don't have multiple listeners
     * because having many of them could degrade performance in certain cases (and is
     * not necessary for our use case)
     *
     * This is an internally used function, can change at any point (even get removed)
     * and changes to it won't be considered a breaking change. Use at your own risk.
     */
    singletonClickListen(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DialogService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DialogService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBjYXJib24tYW5ndWxhciB2MC4wLjAgfCBkaWFsb2cuc2VydmljZS5kLnRzXG4gKlxuICogQ29weXJpZ2h0IDIwMTQsIDIwMjEgSUJNXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBJbmplY3RvciwgQ29tcG9uZW50UmVmLCBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGlhbG9nQ29uZmlnIH0gZnJvbSBcIi4vZGlhbG9nLWNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFBsYWNlaG9sZGVyU2VydmljZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3BsYWNlaG9sZGVyXCI7XG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tIFwiLi9kaWFsb2cuY29tcG9uZW50XCI7XG4vKipcbiAqIGBEaWFsb2dgIG9iamVjdCB0byBiZSBpbmplY3RlZCBpbnRvIG90aGVyIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpYWxvZ1NlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yO1xuICAgIHByb3RlY3RlZCBwbGFjZWhvbGRlclNlcnZpY2U6IFBsYWNlaG9sZGVyU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBVc2VkIGluIGBzaW5nbGV0b25DbGlja0xpc3RlbmAsIGRvbid0IGNvdW50IG9uIGl0cyBleGlzdGVuY2UgYW5kIHZhbHVlcy5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc3RhdGljIGxpc3RlbmluZ0ZvckJvZHlDbGlja3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgYWxsIGtub3duIGRpYWxvZyBjb21wb25lbnRzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBkaWFsb2dSZWZzOiBTZXQ8Q29tcG9uZW50UmVmPERpYWxvZz4+O1xuICAgIC8qKlxuICAgICAqIENsb3NlcyBhbGwga25vd24gYERpYWxvZ2BzLiBEb2VzIG5vdCBmb2N1cyBhbnkgcHJldmlvdXMgZWxlbWVudHMsIHNpbmNlIHdlIGNhbid0IGtub3cgd2hpY2ggd291bGQgYmUgY29ycmVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBjbG9zZUFsbCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGNvbXBvbmVudCBmYWN0b3J5IHRvIHVzZSB3aGVuIGNyZWF0aW5nIGRpYWxvZ3NcbiAgICAgKi9cbiAgICBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgRGlhbG9nU2VydmljZWAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGluamVjdG9yOiBJbmplY3RvciwgcGxhY2Vob2xkZXJTZXJ2aWNlOiBQbGFjZWhvbGRlclNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY29udGV4dCBmb3IgdGhlIHNlcnZpY2UuIEZvciBleGFtcGxlLCB0aGUgYGNvbXBvbmVudGAgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gc2V0IHRoZVxuICAgICAqIGRlZmF1bHQgY29tcG9uZW50IHRoYXQgc2hvdWxkIGJlIGNyZWF0ZWQgYnkgdGhlIHNlcnZpY2UsIGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGB7IGNvbXBvbmVudDogYW55IH1gIHdoZXJlIGBjb21wb25lbnRgIGlzIGEgY29tcG9uZW50IHRoYXQgZXh0ZW5kcyBgZGlhbG9nLmNvbXBvbmVudGBcbiAgICAgKi9cbiAgICBzZXRDb250ZXh0KG9wdGlvbnM6IHtcbiAgICAgICAgY29tcG9uZW50OiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSWYgYGRpYWxvZ1JlZmAgaXMgZGVmaW5lZCwgdGhlIERpYWxvZyBpcyBhbHJlYWR5IG9wZW4uIElmXG4gICAgICogYGRpYWxvZ1JlZmAgaXMgdW5kZWZpbmVkLCB3ZSBjcmVhdGUgdGhlIGBEaWFsb2dgIGNvbXBvbmVudCBhbmQgcmVmZXJlbmNlIHRvIGl0LlxuICAgICAqIEEgc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgdG8gdHJhY2sgaWYgdGhlIGBEaWFsb2dgIHNob3VsZCBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2aWV3Q29udGFpbmVyIGEgYFZpZXdDb250YWluZXJSZWZgIHRvIGluc3RhbnRpYXRlIHRoZSBjb21wb25lbnQgYWdhaW5zdC5cbiAgICAgKiBNYXkgYmUgYG51bGxgIGlmIGFuIGBpYm0tcGxhY2Vob2xkZXJgIGV4aXN0cyBhbmQgYGRpYWxvZ0NvbmZpZy5hcHBlbmRJbmxpbmVgIGlzIGZhbHNlXG4gICAgICogQHBhcmFtIGRpYWxvZ0NvbmZpZyB0aGUgYERpYWxvZ0NvbmZpZ2AgZm9yIHRoZSBjb21wb25lbnRcbiAgICAgKi9cbiAgICBvcGVuKHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsIGRpYWxvZ0NvbmZpZzogRGlhbG9nQ29uZmlnLCBjb21wb25lbnQ/OiBhbnkpOiBDb21wb25lbnRSZWY8RGlhbG9nPjtcbiAgICAvKipcbiAgICAgKiBPbiBjbG9zZSBvZiBgRGlhbG9nYCBpdGVtLCBzZXRzIGZvY3VzIGJhY2sgdG8gcHJldmlvdXMgaXRlbSwgdW5zZXRzXG4gICAgICogdGhlIGN1cnJlbnQgYGRpYWxvZ1JlZmAgaXRlbS4gVW5zdWJzY3JpYmVzIHRvIHRoZSBldmVudCBvZiBgRGlhbG9nYCBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkaWFsb2dSZWYgdGhlIGRpYWxvZ1JlZiB0byBjbG9zZVxuICAgICAqL1xuICAgIGNsb3NlKGRpYWxvZ1JlZjogQ29tcG9uZW50UmVmPERpYWxvZz4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyBhbGwga25vd24gYERpYWxvZ2BzLiBEb2VzIG5vdCBmb2N1cyBhbnkgcHJldmlvdXMgZWxlbWVudHMsIHNpbmNlIHdlIGNhbid0IGtub3cgd2hpY2ggd291bGQgYmUgY29ycmVjdFxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjQuIFVzZSB0aGUgc3RhdGljIGBEaWFsb2dTZXJ2aWNlLmNsb3NlQWxsYCBpbnN0ZWFkXG4gICAgICovXG4gICAgY2xvc2VBbGwoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGaXggZm9yIHNhZmFyaSBoaWphY2tpbmcgY2xpY2tzLlxuICAgICAqXG4gICAgICogUnVucyBvbiBgbmdPbkluaXRgIG9mIGV2ZXJ5IGRpYWxvZy4gRW5zdXJlcyB3ZSBkb24ndCBoYXZlIG11bHRpcGxlIGxpc3RlbmVyc1xuICAgICAqIGJlY2F1c2UgaGF2aW5nIG1hbnkgb2YgdGhlbSBjb3VsZCBkZWdyYWRlIHBlcmZvcm1hbmNlIGluIGNlcnRhaW4gY2FzZXMgKGFuZCBpc1xuICAgICAqIG5vdCBuZWNlc3NhcnkgZm9yIG91ciB1c2UgY2FzZSlcbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYW4gaW50ZXJuYWxseSB1c2VkIGZ1bmN0aW9uLCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCAoZXZlbiBnZXQgcmVtb3ZlZClcbiAgICAgKiBhbmQgY2hhbmdlcyB0byBpdCB3b24ndCBiZSBjb25zaWRlcmVkIGEgYnJlYWtpbmcgY2hhbmdlLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAgICAgKi9cbiAgICBzaW5nbGV0b25DbGlja0xpc3RlbigpOiB2b2lkO1xufVxuIl19