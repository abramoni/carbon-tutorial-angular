{"ast":null,"code":"'use strict';\n/**\n * @license Angular v14.2.0-next.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (factory) {\n  typeof define === 'function' && define.amd ? define(factory) : factory();\n})(function () {\n  'use strict';\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  Zone.__load_patch('jasmine', function (global, Zone, api) {\n    var __extends = function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n      function __() {\n        this.constructor = d;\n      }\n\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }; // Patch jasmine's describe/it/beforeEach/afterEach functions so test code always runs\n    // in a testZone (ProxyZone). (See: angular/zone.js#91 & angular/angular#10503)\n\n\n    if (!Zone) throw new Error('Missing: zone.js');\n\n    if (typeof jest !== 'undefined') {\n      // return if jasmine is a light implementation inside jest\n      // in this case, we are running inside jest not jasmine\n      return;\n    }\n\n    if (typeof jasmine == 'undefined' || jasmine['__zone_patch__']) {\n      return;\n    }\n\n    jasmine['__zone_patch__'] = true;\n    var SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (!SyncTestZoneSpec) throw new Error('Missing: SyncTestZoneSpec');\n    if (!ProxyZoneSpec) throw new Error('Missing: ProxyZoneSpec');\n    var ambientZone = Zone.current;\n    var symbol = Zone.__symbol__; // whether patch jasmine clock when in fakeAsync\n\n    var disablePatchingJasmineClock = global[symbol('fakeAsyncDisablePatchingClock')] === true; // the original variable name fakeAsyncPatchLock is not accurate, so the name will be\n    // fakeAsyncAutoFakeAsyncWhenClockPatched and if this enablePatchingJasmineClock is false, we also\n    // automatically disable the auto jump into fakeAsync feature\n\n    var enableAutoFakeAsyncWhenClockPatched = !disablePatchingJasmineClock && (global[symbol('fakeAsyncPatchLock')] === true || global[symbol('fakeAsyncAutoFakeAsyncWhenClockPatched')] === true);\n    var ignoreUnhandledRejection = global[symbol('ignoreUnhandledRejection')] === true;\n\n    if (!ignoreUnhandledRejection) {\n      var globalErrors_1 = jasmine.GlobalErrors;\n\n      if (globalErrors_1 && !jasmine[symbol('GlobalErrors')]) {\n        jasmine[symbol('GlobalErrors')] = globalErrors_1;\n\n        jasmine.GlobalErrors = function () {\n          var instance = new globalErrors_1();\n          var originalInstall = instance.install;\n\n          if (originalInstall && !instance[symbol('install')]) {\n            instance[symbol('install')] = originalInstall;\n\n            instance.install = function () {\n              var isNode = typeof process !== 'undefined' && !!process.on; // Note: Jasmine checks internally if `process` and `process.on` is defined. Otherwise,\n              // it installs the browser rejection handler through the `global.addEventListener`.\n              // This code may be run in the browser environment where `process` is not defined, and\n              // this will lead to a runtime exception since Webpack 5 removed automatic Node.js\n              // polyfills. Note, that events are named differently, it's `unhandledRejection` in\n              // Node.js and `unhandledrejection` in the browser.\n\n              var originalHandlers = isNode ? process.listeners('unhandledRejection') : global.eventListeners('unhandledrejection');\n              var result = originalInstall.apply(this, arguments);\n              isNode ? process.removeAllListeners('unhandledRejection') : global.removeAllListeners('unhandledrejection');\n\n              if (originalHandlers) {\n                originalHandlers.forEach(function (handler) {\n                  if (isNode) {\n                    process.on('unhandledRejection', handler);\n                  } else {\n                    global.addEventListener('unhandledrejection', handler);\n                  }\n                });\n              }\n\n              return result;\n            };\n          }\n\n          return instance;\n        };\n      }\n    } // Monkey patch all of the jasmine DSL so that each function runs in appropriate zone.\n\n\n    var jasmineEnv = jasmine.getEnv();\n    ['describe', 'xdescribe', 'fdescribe'].forEach(function (methodName) {\n      var originalJasmineFn = jasmineEnv[methodName];\n\n      jasmineEnv[methodName] = function (description, specDefinitions) {\n        return originalJasmineFn.call(this, description, wrapDescribeInZone(description, specDefinitions));\n      };\n    });\n    ['it', 'xit', 'fit'].forEach(function (methodName) {\n      var originalJasmineFn = jasmineEnv[methodName];\n      jasmineEnv[symbol(methodName)] = originalJasmineFn;\n\n      jasmineEnv[methodName] = function (description, specDefinitions, timeout) {\n        arguments[1] = wrapTestInZone(specDefinitions);\n        return originalJasmineFn.apply(this, arguments);\n      };\n    });\n    ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'].forEach(function (methodName) {\n      var originalJasmineFn = jasmineEnv[methodName];\n      jasmineEnv[symbol(methodName)] = originalJasmineFn;\n\n      jasmineEnv[methodName] = function (specDefinitions, timeout) {\n        arguments[0] = wrapTestInZone(specDefinitions);\n        return originalJasmineFn.apply(this, arguments);\n      };\n    });\n\n    if (!disablePatchingJasmineClock) {\n      // need to patch jasmine.clock().mockDate and jasmine.clock().tick() so\n      // they can work properly in FakeAsyncTest\n      var originalClockFn_1 = jasmine[symbol('clock')] = jasmine['clock'];\n\n      jasmine['clock'] = function () {\n        var clock = originalClockFn_1.apply(this, arguments);\n\n        if (!clock[symbol('patched')]) {\n          clock[symbol('patched')] = symbol('patched');\n          var originalTick_1 = clock[symbol('tick')] = clock.tick;\n\n          clock.tick = function () {\n            var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n\n            if (fakeAsyncZoneSpec) {\n              return fakeAsyncZoneSpec.tick.apply(fakeAsyncZoneSpec, arguments);\n            }\n\n            return originalTick_1.apply(this, arguments);\n          };\n\n          var originalMockDate_1 = clock[symbol('mockDate')] = clock.mockDate;\n\n          clock.mockDate = function () {\n            var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n\n            if (fakeAsyncZoneSpec) {\n              var dateTime = arguments.length > 0 ? arguments[0] : new Date();\n              return fakeAsyncZoneSpec.setFakeBaseSystemTime.apply(fakeAsyncZoneSpec, dateTime && typeof dateTime.getTime === 'function' ? [dateTime.getTime()] : arguments);\n            }\n\n            return originalMockDate_1.apply(this, arguments);\n          }; // for auto go into fakeAsync feature, we need the flag to enable it\n\n\n          if (enableAutoFakeAsyncWhenClockPatched) {\n            ['install', 'uninstall'].forEach(function (methodName) {\n              var originalClockFn = clock[symbol(methodName)] = clock[methodName];\n\n              clock[methodName] = function () {\n                var FakeAsyncTestZoneSpec = Zone['FakeAsyncTestZoneSpec'];\n\n                if (FakeAsyncTestZoneSpec) {\n                  jasmine[symbol('clockInstalled')] = 'install' === methodName;\n                  return;\n                }\n\n                return originalClockFn.apply(this, arguments);\n              };\n            });\n          }\n        }\n\n        return clock;\n      };\n    } // monkey patch createSpyObj to make properties enumerable to true\n\n\n    if (!jasmine[Zone.__symbol__('createSpyObj')]) {\n      var originalCreateSpyObj_1 = jasmine.createSpyObj;\n      jasmine[Zone.__symbol__('createSpyObj')] = originalCreateSpyObj_1;\n\n      jasmine.createSpyObj = function () {\n        var args = Array.prototype.slice.call(arguments);\n        var propertyNames = args.length >= 3 ? args[2] : null;\n        var spyObj;\n\n        if (propertyNames) {\n          var defineProperty_1 = Object.defineProperty;\n\n          Object.defineProperty = function (obj, p, attributes) {\n            return defineProperty_1.call(this, obj, p, Object.assign(Object.assign({}, attributes), {\n              configurable: true,\n              enumerable: true\n            }));\n          };\n\n          try {\n            spyObj = originalCreateSpyObj_1.apply(this, args);\n          } finally {\n            Object.defineProperty = defineProperty_1;\n          }\n        } else {\n          spyObj = originalCreateSpyObj_1.apply(this, args);\n        }\n\n        return spyObj;\n      };\n    }\n    /**\n     * Gets a function wrapping the body of a Jasmine `describe` block to execute in a\n     * synchronous-only zone.\n     */\n\n\n    function wrapDescribeInZone(description, describeBody) {\n      return function () {\n        // Create a synchronous-only zone in which to run `describe` blocks in order to raise an\n        // error if any asynchronous operations are attempted inside of a `describe`.\n        var syncZone = ambientZone.fork(new SyncTestZoneSpec(\"jasmine.describe#\".concat(description)));\n        return syncZone.run(describeBody, this, arguments);\n      };\n    }\n\n    function runInTestZone(testBody, applyThis, queueRunner, done) {\n      var isClockInstalled = !!jasmine[symbol('clockInstalled')];\n      queueRunner.testProxyZoneSpec;\n      var testProxyZone = queueRunner.testProxyZone;\n\n      if (isClockInstalled && enableAutoFakeAsyncWhenClockPatched) {\n        // auto run a fakeAsync\n        var fakeAsyncModule = Zone[Zone.__symbol__('fakeAsyncTest')];\n\n        if (fakeAsyncModule && typeof fakeAsyncModule.fakeAsync === 'function') {\n          testBody = fakeAsyncModule.fakeAsync(testBody);\n        }\n      }\n\n      if (done) {\n        return testProxyZone.run(testBody, applyThis, [done]);\n      } else {\n        return testProxyZone.run(testBody, applyThis);\n      }\n    }\n    /**\n     * Gets a function wrapping the body of a Jasmine `it/beforeEach/afterEach` block to\n     * execute in a ProxyZone zone.\n     * This will run in `testProxyZone`. The `testProxyZone` will be reset by the `ZoneQueueRunner`\n     */\n\n\n    function wrapTestInZone(testBody) {\n      // The `done` callback is only passed through if the function expects at least one argument.\n      // Note we have to make a function with correct number of arguments, otherwise jasmine will\n      // think that all functions are sync or async.\n      return testBody && (testBody.length ? function (done) {\n        return runInTestZone(testBody, this, this.queueRunner, done);\n      } : function () {\n        return runInTestZone(testBody, this, this.queueRunner);\n      });\n    }\n\n    var QueueRunner = jasmine.QueueRunner;\n\n    jasmine.QueueRunner = function (_super) {\n      __extends(ZoneQueueRunner, _super);\n\n      function ZoneQueueRunner(attrs) {\n        var _this = this;\n\n        if (attrs.onComplete) {\n          attrs.onComplete = function (fn) {\n            return function () {\n              // All functions are done, clear the test zone.\n              _this.testProxyZone = null;\n              _this.testProxyZoneSpec = null;\n              ambientZone.scheduleMicroTask('jasmine.onComplete', fn);\n            };\n          }(attrs.onComplete);\n        }\n\n        var nativeSetTimeout = global[Zone.__symbol__('setTimeout')];\n\n        var nativeClearTimeout = global[Zone.__symbol__('clearTimeout')];\n\n        if (nativeSetTimeout) {\n          // should run setTimeout inside jasmine outside of zone\n          attrs.timeout = {\n            setTimeout: nativeSetTimeout ? nativeSetTimeout : global.setTimeout,\n            clearTimeout: nativeClearTimeout ? nativeClearTimeout : global.clearTimeout\n          };\n        } // create a userContext to hold the queueRunner itself\n        // so we can access the testProxy in it/xit/beforeEach ...\n\n\n        if (jasmine.UserContext) {\n          if (!attrs.userContext) {\n            attrs.userContext = new jasmine.UserContext();\n          }\n\n          attrs.userContext.queueRunner = this;\n        } else {\n          if (!attrs.userContext) {\n            attrs.userContext = {};\n          }\n\n          attrs.userContext.queueRunner = this;\n        } // patch attrs.onException\n\n\n        var onException = attrs.onException;\n\n        attrs.onException = function (error) {\n          if (error && error.message === 'Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.') {\n            // jasmine timeout, we can make the error message more\n            // reasonable to tell what tasks are pending\n            var proxyZoneSpec = this && this.testProxyZoneSpec;\n\n            if (proxyZoneSpec) {\n              var pendingTasksInfo = proxyZoneSpec.getAndClearPendingTasksInfo();\n\n              try {\n                // try catch here in case error.message is not writable\n                error.message += pendingTasksInfo;\n              } catch (err) {}\n            }\n          }\n\n          if (onException) {\n            onException.call(this, error);\n          }\n        };\n\n        _super.call(this, attrs);\n      }\n\n      ZoneQueueRunner.prototype.execute = function () {\n        var _this = this;\n\n        var zone = Zone.current;\n        var isChildOfAmbientZone = false;\n\n        while (zone) {\n          if (zone === ambientZone) {\n            isChildOfAmbientZone = true;\n            break;\n          }\n\n          zone = zone.parent;\n        }\n\n        if (!isChildOfAmbientZone) throw new Error('Unexpected Zone: ' + Zone.current.name); // This is the zone which will be used for running individual tests.\n        // It will be a proxy zone, so that the tests function can retroactively install\n        // different zones.\n        // Example:\n        //   - In beforeEach() do childZone = Zone.current.fork(...);\n        //   - In it() try to do fakeAsync(). The issue is that because the beforeEach forked the\n        //     zone outside of fakeAsync it will be able to escape the fakeAsync rules.\n        //   - Because ProxyZone is parent fo `childZone` fakeAsync can retroactively add\n        //     fakeAsync behavior to the childZone.\n\n        this.testProxyZoneSpec = new ProxyZoneSpec();\n        this.testProxyZone = ambientZone.fork(this.testProxyZoneSpec);\n\n        if (!Zone.currentTask) {\n          // if we are not running in a task then if someone would register a\n          // element.addEventListener and then calling element.click() the\n          // addEventListener callback would think that it is the top most task and would\n          // drain the microtask queue on element.click() which would be incorrect.\n          // For this reason we always force a task when running jasmine tests.\n          Zone.current.scheduleMicroTask('jasmine.execute().forceTask', function () {\n            return QueueRunner.prototype.execute.call(_this);\n          });\n        } else {\n          _super.prototype.execute.call(this);\n        }\n      };\n\n      return ZoneQueueRunner;\n    }(QueueRunner);\n  });\n});","map":{"version":3,"sources":["C:/Users/07545G744/Documents/projects/carbon-tutorial-angular/node_modules/zone.js/dist/jasmine-patch.js"],"names":["factory","define","amd","Zone","__load_patch","global","api","__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Error","jest","jasmine","SyncTestZoneSpec","ProxyZoneSpec","ambientZone","current","symbol","__symbol__","disablePatchingJasmineClock","enableAutoFakeAsyncWhenClockPatched","ignoreUnhandledRejection","globalErrors_1","GlobalErrors","instance","originalInstall","install","isNode","process","on","originalHandlers","listeners","eventListeners","result","apply","arguments","removeAllListeners","forEach","handler","addEventListener","jasmineEnv","getEnv","methodName","originalJasmineFn","description","specDefinitions","call","wrapDescribeInZone","timeout","wrapTestInZone","originalClockFn_1","clock","originalTick_1","tick","fakeAsyncZoneSpec","get","originalMockDate_1","mockDate","dateTime","length","Date","setFakeBaseSystemTime","getTime","originalClockFn","FakeAsyncTestZoneSpec","originalCreateSpyObj_1","createSpyObj","args","Array","slice","propertyNames","spyObj","defineProperty_1","defineProperty","obj","attributes","assign","configurable","enumerable","describeBody","syncZone","fork","concat","run","runInTestZone","testBody","applyThis","queueRunner","done","isClockInstalled","testProxyZoneSpec","testProxyZone","fakeAsyncModule","fakeAsync","QueueRunner","_super","ZoneQueueRunner","attrs","_this","onComplete","fn","scheduleMicroTask","nativeSetTimeout","nativeClearTimeout","setTimeout","clearTimeout","UserContext","userContext","onException","error","message","proxyZoneSpec","pendingTasksInfo","getAndClearPendingTasksInfo","err","execute","zone","isChildOfAmbientZone","parent","name","currentTask"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @license Angular v14.2.0-next.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n    typeof define === 'function' && define.amd ? define(factory) :\n        factory();\n})((function () {\n    'use strict';\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    Zone.__load_patch('jasmine', function (global, Zone, api) {\n        var __extends = function (d, b) {\n            for (var p in b)\n                if (b.hasOwnProperty(p))\n                    d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());\n        };\n        // Patch jasmine's describe/it/beforeEach/afterEach functions so test code always runs\n        // in a testZone (ProxyZone). (See: angular/zone.js#91 & angular/angular#10503)\n        if (!Zone)\n            throw new Error('Missing: zone.js');\n        if (typeof jest !== 'undefined') {\n            // return if jasmine is a light implementation inside jest\n            // in this case, we are running inside jest not jasmine\n            return;\n        }\n        if (typeof jasmine == 'undefined' || jasmine['__zone_patch__']) {\n            return;\n        }\n        jasmine['__zone_patch__'] = true;\n        var SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (!SyncTestZoneSpec)\n            throw new Error('Missing: SyncTestZoneSpec');\n        if (!ProxyZoneSpec)\n            throw new Error('Missing: ProxyZoneSpec');\n        var ambientZone = Zone.current;\n        var symbol = Zone.__symbol__;\n        // whether patch jasmine clock when in fakeAsync\n        var disablePatchingJasmineClock = global[symbol('fakeAsyncDisablePatchingClock')] === true;\n        // the original variable name fakeAsyncPatchLock is not accurate, so the name will be\n        // fakeAsyncAutoFakeAsyncWhenClockPatched and if this enablePatchingJasmineClock is false, we also\n        // automatically disable the auto jump into fakeAsync feature\n        var enableAutoFakeAsyncWhenClockPatched = !disablePatchingJasmineClock &&\n            ((global[symbol('fakeAsyncPatchLock')] === true) ||\n                (global[symbol('fakeAsyncAutoFakeAsyncWhenClockPatched')] === true));\n        var ignoreUnhandledRejection = global[symbol('ignoreUnhandledRejection')] === true;\n        if (!ignoreUnhandledRejection) {\n            var globalErrors_1 = jasmine.GlobalErrors;\n            if (globalErrors_1 && !jasmine[symbol('GlobalErrors')]) {\n                jasmine[symbol('GlobalErrors')] = globalErrors_1;\n                jasmine.GlobalErrors = function () {\n                    var instance = new globalErrors_1();\n                    var originalInstall = instance.install;\n                    if (originalInstall && !instance[symbol('install')]) {\n                        instance[symbol('install')] = originalInstall;\n                        instance.install = function () {\n                            var isNode = typeof process !== 'undefined' && !!process.on;\n                            // Note: Jasmine checks internally if `process` and `process.on` is defined. Otherwise,\n                            // it installs the browser rejection handler through the `global.addEventListener`.\n                            // This code may be run in the browser environment where `process` is not defined, and\n                            // this will lead to a runtime exception since Webpack 5 removed automatic Node.js\n                            // polyfills. Note, that events are named differently, it's `unhandledRejection` in\n                            // Node.js and `unhandledrejection` in the browser.\n                            var originalHandlers = isNode ? process.listeners('unhandledRejection') :\n                                global.eventListeners('unhandledrejection');\n                            var result = originalInstall.apply(this, arguments);\n                            isNode ? process.removeAllListeners('unhandledRejection') :\n                                global.removeAllListeners('unhandledrejection');\n                            if (originalHandlers) {\n                                originalHandlers.forEach(function (handler) {\n                                    if (isNode) {\n                                        process.on('unhandledRejection', handler);\n                                    }\n                                    else {\n                                        global.addEventListener('unhandledrejection', handler);\n                                    }\n                                });\n                            }\n                            return result;\n                        };\n                    }\n                    return instance;\n                };\n            }\n        }\n        // Monkey patch all of the jasmine DSL so that each function runs in appropriate zone.\n        var jasmineEnv = jasmine.getEnv();\n        ['describe', 'xdescribe', 'fdescribe'].forEach(function (methodName) {\n            var originalJasmineFn = jasmineEnv[methodName];\n            jasmineEnv[methodName] = function (description, specDefinitions) {\n                return originalJasmineFn.call(this, description, wrapDescribeInZone(description, specDefinitions));\n            };\n        });\n        ['it', 'xit', 'fit'].forEach(function (methodName) {\n            var originalJasmineFn = jasmineEnv[methodName];\n            jasmineEnv[symbol(methodName)] = originalJasmineFn;\n            jasmineEnv[methodName] = function (description, specDefinitions, timeout) {\n                arguments[1] = wrapTestInZone(specDefinitions);\n                return originalJasmineFn.apply(this, arguments);\n            };\n        });\n        ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'].forEach(function (methodName) {\n            var originalJasmineFn = jasmineEnv[methodName];\n            jasmineEnv[symbol(methodName)] = originalJasmineFn;\n            jasmineEnv[methodName] = function (specDefinitions, timeout) {\n                arguments[0] = wrapTestInZone(specDefinitions);\n                return originalJasmineFn.apply(this, arguments);\n            };\n        });\n        if (!disablePatchingJasmineClock) {\n            // need to patch jasmine.clock().mockDate and jasmine.clock().tick() so\n            // they can work properly in FakeAsyncTest\n            var originalClockFn_1 = (jasmine[symbol('clock')] = jasmine['clock']);\n            jasmine['clock'] = function () {\n                var clock = originalClockFn_1.apply(this, arguments);\n                if (!clock[symbol('patched')]) {\n                    clock[symbol('patched')] = symbol('patched');\n                    var originalTick_1 = (clock[symbol('tick')] = clock.tick);\n                    clock.tick = function () {\n                        var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                        if (fakeAsyncZoneSpec) {\n                            return fakeAsyncZoneSpec.tick.apply(fakeAsyncZoneSpec, arguments);\n                        }\n                        return originalTick_1.apply(this, arguments);\n                    };\n                    var originalMockDate_1 = (clock[symbol('mockDate')] = clock.mockDate);\n                    clock.mockDate = function () {\n                        var fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                        if (fakeAsyncZoneSpec) {\n                            var dateTime = arguments.length > 0 ? arguments[0] : new Date();\n                            return fakeAsyncZoneSpec.setFakeBaseSystemTime.apply(fakeAsyncZoneSpec, dateTime && typeof dateTime.getTime === 'function' ? [dateTime.getTime()] :\n                                arguments);\n                        }\n                        return originalMockDate_1.apply(this, arguments);\n                    };\n                    // for auto go into fakeAsync feature, we need the flag to enable it\n                    if (enableAutoFakeAsyncWhenClockPatched) {\n                        ['install', 'uninstall'].forEach(function (methodName) {\n                            var originalClockFn = (clock[symbol(methodName)] = clock[methodName]);\n                            clock[methodName] = function () {\n                                var FakeAsyncTestZoneSpec = Zone['FakeAsyncTestZoneSpec'];\n                                if (FakeAsyncTestZoneSpec) {\n                                    jasmine[symbol('clockInstalled')] = 'install' === methodName;\n                                    return;\n                                }\n                                return originalClockFn.apply(this, arguments);\n                            };\n                        });\n                    }\n                }\n                return clock;\n            };\n        }\n        // monkey patch createSpyObj to make properties enumerable to true\n        if (!jasmine[Zone.__symbol__('createSpyObj')]) {\n            var originalCreateSpyObj_1 = jasmine.createSpyObj;\n            jasmine[Zone.__symbol__('createSpyObj')] = originalCreateSpyObj_1;\n            jasmine.createSpyObj = function () {\n                var args = Array.prototype.slice.call(arguments);\n                var propertyNames = args.length >= 3 ? args[2] : null;\n                var spyObj;\n                if (propertyNames) {\n                    var defineProperty_1 = Object.defineProperty;\n                    Object.defineProperty = function (obj, p, attributes) {\n                        return defineProperty_1.call(this, obj, p, Object.assign(Object.assign({}, attributes), { configurable: true, enumerable: true }));\n                    };\n                    try {\n                        spyObj = originalCreateSpyObj_1.apply(this, args);\n                    }\n                    finally {\n                        Object.defineProperty = defineProperty_1;\n                    }\n                }\n                else {\n                    spyObj = originalCreateSpyObj_1.apply(this, args);\n                }\n                return spyObj;\n            };\n        }\n        /**\n         * Gets a function wrapping the body of a Jasmine `describe` block to execute in a\n         * synchronous-only zone.\n         */\n        function wrapDescribeInZone(description, describeBody) {\n            return function () {\n                // Create a synchronous-only zone in which to run `describe` blocks in order to raise an\n                // error if any asynchronous operations are attempted inside of a `describe`.\n                var syncZone = ambientZone.fork(new SyncTestZoneSpec(\"jasmine.describe#\".concat(description)));\n                return syncZone.run(describeBody, this, arguments);\n            };\n        }\n        function runInTestZone(testBody, applyThis, queueRunner, done) {\n            var isClockInstalled = !!jasmine[symbol('clockInstalled')];\n            queueRunner.testProxyZoneSpec;\n            var testProxyZone = queueRunner.testProxyZone;\n            if (isClockInstalled && enableAutoFakeAsyncWhenClockPatched) {\n                // auto run a fakeAsync\n                var fakeAsyncModule = Zone[Zone.__symbol__('fakeAsyncTest')];\n                if (fakeAsyncModule && typeof fakeAsyncModule.fakeAsync === 'function') {\n                    testBody = fakeAsyncModule.fakeAsync(testBody);\n                }\n            }\n            if (done) {\n                return testProxyZone.run(testBody, applyThis, [done]);\n            }\n            else {\n                return testProxyZone.run(testBody, applyThis);\n            }\n        }\n        /**\n         * Gets a function wrapping the body of a Jasmine `it/beforeEach/afterEach` block to\n         * execute in a ProxyZone zone.\n         * This will run in `testProxyZone`. The `testProxyZone` will be reset by the `ZoneQueueRunner`\n         */\n        function wrapTestInZone(testBody) {\n            // The `done` callback is only passed through if the function expects at least one argument.\n            // Note we have to make a function with correct number of arguments, otherwise jasmine will\n            // think that all functions are sync or async.\n            return (testBody && (testBody.length ? function (done) {\n                return runInTestZone(testBody, this, this.queueRunner, done);\n            } : function () {\n                return runInTestZone(testBody, this, this.queueRunner);\n            }));\n        }\n        var QueueRunner = jasmine.QueueRunner;\n        jasmine.QueueRunner = (function (_super) {\n            __extends(ZoneQueueRunner, _super);\n            function ZoneQueueRunner(attrs) {\n                var _this = this;\n                if (attrs.onComplete) {\n                    attrs.onComplete = (function (fn) { return function () {\n                        // All functions are done, clear the test zone.\n                        _this.testProxyZone = null;\n                        _this.testProxyZoneSpec = null;\n                        ambientZone.scheduleMicroTask('jasmine.onComplete', fn);\n                    }; })(attrs.onComplete);\n                }\n                var nativeSetTimeout = global[Zone.__symbol__('setTimeout')];\n                var nativeClearTimeout = global[Zone.__symbol__('clearTimeout')];\n                if (nativeSetTimeout) {\n                    // should run setTimeout inside jasmine outside of zone\n                    attrs.timeout = {\n                        setTimeout: nativeSetTimeout ? nativeSetTimeout : global.setTimeout,\n                        clearTimeout: nativeClearTimeout ? nativeClearTimeout : global.clearTimeout\n                    };\n                }\n                // create a userContext to hold the queueRunner itself\n                // so we can access the testProxy in it/xit/beforeEach ...\n                if (jasmine.UserContext) {\n                    if (!attrs.userContext) {\n                        attrs.userContext = new jasmine.UserContext();\n                    }\n                    attrs.userContext.queueRunner = this;\n                }\n                else {\n                    if (!attrs.userContext) {\n                        attrs.userContext = {};\n                    }\n                    attrs.userContext.queueRunner = this;\n                }\n                // patch attrs.onException\n                var onException = attrs.onException;\n                attrs.onException = function (error) {\n                    if (error &&\n                        error.message ===\n                            'Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.') {\n                        // jasmine timeout, we can make the error message more\n                        // reasonable to tell what tasks are pending\n                        var proxyZoneSpec = this && this.testProxyZoneSpec;\n                        if (proxyZoneSpec) {\n                            var pendingTasksInfo = proxyZoneSpec.getAndClearPendingTasksInfo();\n                            try {\n                                // try catch here in case error.message is not writable\n                                error.message += pendingTasksInfo;\n                            }\n                            catch (err) {\n                            }\n                        }\n                    }\n                    if (onException) {\n                        onException.call(this, error);\n                    }\n                };\n                _super.call(this, attrs);\n            }\n            ZoneQueueRunner.prototype.execute = function () {\n                var _this = this;\n                var zone = Zone.current;\n                var isChildOfAmbientZone = false;\n                while (zone) {\n                    if (zone === ambientZone) {\n                        isChildOfAmbientZone = true;\n                        break;\n                    }\n                    zone = zone.parent;\n                }\n                if (!isChildOfAmbientZone)\n                    throw new Error('Unexpected Zone: ' + Zone.current.name);\n                // This is the zone which will be used for running individual tests.\n                // It will be a proxy zone, so that the tests function can retroactively install\n                // different zones.\n                // Example:\n                //   - In beforeEach() do childZone = Zone.current.fork(...);\n                //   - In it() try to do fakeAsync(). The issue is that because the beforeEach forked the\n                //     zone outside of fakeAsync it will be able to escape the fakeAsync rules.\n                //   - Because ProxyZone is parent fo `childZone` fakeAsync can retroactively add\n                //     fakeAsync behavior to the childZone.\n                this.testProxyZoneSpec = new ProxyZoneSpec();\n                this.testProxyZone = ambientZone.fork(this.testProxyZoneSpec);\n                if (!Zone.currentTask) {\n                    // if we are not running in a task then if someone would register a\n                    // element.addEventListener and then calling element.click() the\n                    // addEventListener callback would think that it is the top most task and would\n                    // drain the microtask queue on element.click() which would be incorrect.\n                    // For this reason we always force a task when running jasmine tests.\n                    Zone.current.scheduleMicroTask('jasmine.execute().forceTask', function () { return QueueRunner.prototype.execute.call(_this); });\n                }\n                else {\n                    _super.prototype.execute.call(this);\n                }\n            };\n            return ZoneQueueRunner;\n        })(QueueRunner);\n    });\n}));\n"]},"metadata":{},"sourceType":"script"}