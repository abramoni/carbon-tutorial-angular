{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-content-switcher.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFocusInLastItem, isFocusInFirstItem } from 'carbon-components-angular/common';\nimport { Directive, HostBinding, Input, HostListener, Output, EventEmitter, ElementRef, Renderer2, Component, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"bx--content-switcher--light\": a0,\n    \"bx--content-switcher--sm\": a1,\n    \"bx--content-switcher--md\": a2,\n    \"bx--content-switcher--lg\": a3\n  };\n};\n\nconst _c1 = [\"*\"];\nlet ContentSwitcherOption = /*#__PURE__*/(() => {\n  class ContentSwitcherOption {\n    constructor(renderer, hostElement) {\n      this.renderer = renderer;\n      this.hostElement = hostElement;\n      /**\n       * Internal name for the option.\n       * Should be something that identifies the option to the application.\n       * Accessible from the `ContentSwitcher` `selected` emitter\n       */\n\n      this.name = \"option\";\n      /**\n       * Emits when the option is selected.\n       */\n\n      this.selected = new EventEmitter();\n      this.onClick = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.switcherClass = \"bx--content-switcher-btn\";\n      this.selectedClass = false;\n      this.role = \"tab\";\n      this.ariaSelected = false;\n      this.tabindex = \"-1\";\n      this._active = false;\n    }\n    /**\n     * Used to activate the option. Only one option may be `active` at a time\n     */\n\n\n    set active(value) {\n      this._active = value;\n      this.selectedClass = value;\n      this.ariaSelected = value;\n      this.tabindex = value ? \"0\" : \"-1\";\n    }\n\n    get active() {\n      return this._active;\n    }\n\n    hostClick(event) {\n      this.onClick.emit(event); // skip setting and emitting if the option is already active\n\n      if (this.active) {\n        return;\n      }\n\n      this.active = true;\n      this.selected.emit(true);\n    }\n\n    doFocus(event) {\n      this.onFocus.emit(event); // skip setting and emitting if the option is already active\n\n      if (this.active) {\n        return;\n      }\n\n      this.active = true;\n      this.selected.emit(true);\n    }\n    /*\n    * encapsulating the content in a span with bx--content-switcher__label class\n    * to mimic what is done in the react version\n    */\n\n\n    ngOnInit() {\n      const hostNativeElement = this.hostElement.nativeElement;\n      const spanWrapper = this.renderer.createElement(\"span\");\n      this.renderer.addClass(spanWrapper, \"bx--content-switcher__label\");\n      const hostChildren = [];\n      hostNativeElement.childNodes.forEach(node => hostChildren.push(node));\n      hostChildren.forEach(node => {\n        this.renderer.removeChild(hostNativeElement, node);\n        this.renderer.appendChild(spanWrapper, node);\n      });\n      this.renderer.appendChild(hostNativeElement, spanWrapper);\n    }\n\n  }\n\n  ContentSwitcherOption.ɵfac = function ContentSwitcherOption_Factory(t) {\n    return new (t || ContentSwitcherOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ContentSwitcherOption.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ContentSwitcherOption,\n    selectors: [[\"\", \"ibmContentOption\", \"\"]],\n    hostVars: 7,\n    hostBindings: function ContentSwitcherOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ContentSwitcherOption_click_HostBindingHandler($event) {\n          return ctx.hostClick($event);\n        })(\"focus\", function ContentSwitcherOption_focus_HostBindingHandler($event) {\n          return ctx.doFocus($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"aria-selected\", ctx.ariaSelected)(\"tabIndex\", ctx.tabindex);\n        ɵngcc0.ɵɵclassMap(ctx.switcherClass);\n        ɵngcc0.ɵɵclassProp(\"bx--content-switcher--selected\", ctx.selectedClass);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      active: \"active\"\n    },\n    outputs: {\n      selected: \"selected\",\n      onClick: \"onClick\",\n      onFocus: \"onFocus\"\n    }\n  });\n  /** @nocollapse */\n\n  return ContentSwitcherOption;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The content switcher can be used for toggling between distinct options.\n * Similar to tabs, but without an associated content panel\n *\n * [See demo](../../?path=/story/components-content-switcher--basic)\n *\n * ```html\n * <ibm-content-switcher (selected)=\"selected($event)\">\n *\t\t<button ibmContentOption>First section</button>\n *\t\t<button ibmContentOption>Second section</button>\n *\t\t<button ibmContentOption>Third section</button>\n *\t</ibm-content-switcher>\n *\t```\n *\n * <example-url>../../iframe.html?id=components-content-switcher--basic</example-url>\n */\n\n\nlet ContentSwitcher = /*#__PURE__*/(() => {\n  class ContentSwitcher {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.ariaLabel = \"content switcher\";\n      /**\n       * `light` or `dark` content switcher theme\n       */\n\n      this.theme = \"dark\";\n      /**\n       * Set content switcher size\n       */\n\n      this.size = \"md\";\n      /**\n       * Emits the activated `ContentSwitcherOption`\n       */\n\n      this.selected = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      const firstActive = this.options.find(option => option.active); // delay setting active until the DOM has settled\n\n      if (!firstActive) {\n        setTimeout(() => this.options.first.active = true);\n      } // subscribe to each item, emit when one is selected, and reset the active states\n\n\n      this.options.forEach(option => {\n        option.selected.subscribe(_ => {\n          const active = option;\n          this.options.forEach(option => {\n            if (option !== active) {\n              option.active = false;\n            }\n          });\n          this.selected.emit(active);\n        });\n      });\n    }\n\n    hostkeys(event) {\n      const buttonList = Array.from(this.elementRef.nativeElement.querySelectorAll(\"[ibmContentOption]\"));\n\n      switch (event.key) {\n        case \"Right\": // IE specific value\n\n        case \"ArrowRight\":\n          event.preventDefault();\n\n          if (!isFocusInLastItem(event, buttonList)) {\n            const index = buttonList.findIndex(item => item === event.target);\n            buttonList[index + 1].focus();\n          } else {\n            buttonList[0].focus();\n          }\n\n          break;\n\n        case \"Left\": // IE specific value\n\n        case \"ArrowLeft\":\n          event.preventDefault();\n\n          if (!isFocusInFirstItem(event, buttonList)) {\n            const index = buttonList.findIndex(item => item === event.target);\n            buttonList[index - 1].focus();\n          } else {\n            buttonList[buttonList.length - 1].focus();\n          }\n\n          break;\n\n        case \"Home\":\n          event.preventDefault();\n          buttonList[0].focus();\n          break;\n\n        case \"End\":\n          event.preventDefault();\n          buttonList[buttonList.length - 1].focus();\n          break;\n      }\n    }\n\n  }\n\n  ContentSwitcher.ɵfac = function ContentSwitcher_Factory(t) {\n    return new (t || ContentSwitcher)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ContentSwitcher.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContentSwitcher,\n    selectors: [[\"ibm-content-switcher\"]],\n    contentQueries: function ContentSwitcher_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ContentSwitcherOption, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostBindings: function ContentSwitcher_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ContentSwitcher_keydown_HostBindingHandler($event) {\n          return ctx.hostkeys($event);\n        });\n      }\n    },\n    inputs: {\n      ariaLabel: \"ariaLabel\",\n      theme: \"theme\",\n      size: \"size\"\n    },\n    outputs: {\n      selected: \"selected\"\n    },\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 7,\n    consts: [[\"role\", \"tablist\", 1, \"bx--content-switcher\", 3, \"ngClass\"]],\n    template: function ContentSwitcher_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(2, _c0, ctx.theme === \"light\", ctx.size === \"sm\", ctx.size === \"md\", ctx.size === \"lg\"));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return ContentSwitcher;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContentSwitcherModule = /*#__PURE__*/(() => {\n  class ContentSwitcherModule {}\n\n  ContentSwitcherModule.ɵfac = function ContentSwitcherModule_Factory(t) {\n    return new (t || ContentSwitcherModule)();\n  };\n\n  ContentSwitcherModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ContentSwitcherModule\n  });\n  ContentSwitcherModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ContentSwitcherModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentSwitcherModule, {\n    declarations: function () {\n      return [ContentSwitcher, ContentSwitcherOption];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ContentSwitcher, ContentSwitcherOption];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ContentSwitcher, ContentSwitcherOption, ContentSwitcherModule }; //# sourceMappingURL=carbon-components-angular-content-switcher.js.map","map":null,"metadata":{},"sourceType":"module"}