{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-i18n.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BehaviorSubject, isObservable, iif } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { merge } from 'carbon-components-angular/utils';\nimport { Injectable, Pipe, NgModule, SkipSelf, Optional } from '@angular/core';\nimport * as Éµngcc0 from '@angular/core';\nvar EN = {\n  \"BANNER\": {\n    \"CLOSE_BUTTON\": \"Close alert banner\"\n  },\n  \"BREADCRUMB\": {\n    \"LABEL\": \"Breadcrumb\"\n  },\n  \"CALENDAR\": {\n    \"MONTHS\": {\n      \"JANUARY\": \"January\",\n      \"FEBRUARY\": \"February\",\n      \"MARCH\": \"March\",\n      \"APRIL\": \"April\",\n      \"MAY\": \"May\",\n      \"JUNE\": \"June\",\n      \"JULY\": \"July\",\n      \"AUGUST\": \"August\",\n      \"SEPTEMBER\": \"September\",\n      \"OCTOBER\": \"October\",\n      \"NOVEMBER\": \"November\",\n      \"DECEMBER\": \"December\"\n    },\n    \"SHORTWEEKDAYS\": {\n      \"SUNDAY\": \"Sun\",\n      \"MONDAY\": \"Mon\",\n      \"TUESDAY\": \"Tue\",\n      \"WEDNESDAY\": \"Wed\",\n      \"THURSDAY\": \"Thu\",\n      \"FRIDAY\": \"Fri\",\n      \"SATURDAY\": \"Sat\"\n    },\n    \"QUARTERS\": [{\n      \"name\": \"Q1\",\n      \"months\": \"January-March\"\n    }, {\n      \"name\": \"Q2\",\n      \"months\": \"April-June\"\n    }, {\n      \"name\": \"Q3\",\n      \"months\": \"July-September\"\n    }, {\n      \"name\": \"Q4\",\n      \"months\": \"October-December\"\n    }]\n  },\n  \"CODE_SNIPPET\": {\n    \"CODE_SNIPPET_TEXT\": \"Code Snippet Text\",\n    \"SHOW_MORE\": \"Show more\",\n    \"SHOW_LESS\": \"Show less\",\n    \"SHOW_MORE_ICON\": \"Show more icon\",\n    \"COPY_CODE\": \"Copy code\",\n    \"COPIED\": \"Copied!\"\n  },\n  \"COMBOBOX\": {\n    \"PLACEHOLDER\": \"Filter...\",\n    \"CLEAR_SELECTIONS\": \"Clear all selected items\",\n    \"CLEAR_SELECTED\": \"Clear selected item\",\n    \"A11Y\": {\n      \"OPEN_MENU\": \"open menu\",\n      \"CLOSE_MENU\": \"close menu\",\n      \"CLEAR_SELECTIONS\": \"Clear all selected items\",\n      \"CLEAR_SELECTED\": \"Clear Selection\"\n    }\n  },\n  \"DIALOG\": {\n    \"POPOVER\": {\n      \"CLOSE\": \"Close popover\"\n    }\n  },\n  \"DROPDOWN\": {\n    \"OPEN\": \"Open menu\",\n    \"SELECTED\": \"selected\",\n    \"CLEAR\": \"Clear all selected items\",\n    \"FILTER\": {\n      \"SELECTED_ONLY\": \"Show selected only\",\n      \"SEARCH\": \"Search\",\n      \"NO_RESULTS\": \"No search results\",\n      \"RESET_SEARCH\": \"Reset search\"\n    }\n  },\n  \"DROPDOWN_LIST\": {\n    \"LABEL\": \"Listbox\"\n  },\n  \"FILE_UPLOADER\": {\n    \"CHECKMARK\": \"Checkmark\",\n    \"CHECKMARK_TITLE\": \"File uploaded!\",\n    \"OPEN\": \"Add file\",\n    \"REMOVE_BUTTON\": \"Close button\",\n    \"REMOVE_TITLE\": \"Delete File\"\n  },\n  \"LOADING\": {\n    \"TITLE\": \"Loading\"\n  },\n  \"MODAL\": {\n    \"CLOSE\": \"Close modal\"\n  },\n  \"NOTIFICATION\": {\n    \"CLOSE_BUTTON\": \"Close alert notification\"\n  },\n  \"NUMBER\": {\n    \"INCREMENT\": \"increment value\",\n    \"DECREMENT\": \"decrement value\"\n  },\n  \"OVERFLOW_MENU\": {\n    \"OVERFLOW\": \"Overflow\"\n  },\n  \"SEARCH\": {\n    \"LABEL\": \"Search\",\n    \"PLACEHOLDER\": \"Search\",\n    \"CLEAR_BUTTON\": \"Clear search input\",\n    \"TOOLBAR_SEARCH\": \"Toolbar search\"\n  },\n  \"PAGINATION\": {\n    \"ITEMS_PER_PAGE\": \"Items per page:\",\n    \"OPEN_LIST_OF_OPTIONS\": \"Open list of options\",\n    \"BACKWARD\": \"Backward\",\n    \"FORWARD\": \"Forward\",\n    \"TOTAL_ITEMS_UNKNOWN\": \"{{start}}-{{end}} items\",\n    \"TOTAL_ITEMS\": \"{{start}}-{{end}} of {{total}} items\",\n    \"TOTAL_ITEM\": \"{{start}}-{{end}} of {{total}} item\",\n    \"PAGE\": \"page\",\n    \"OF_LAST_PAGES\": \"of {{last}} pages\",\n    \"OF_LAST_PAGE\": \"of {{last}} page\",\n    \"NEXT\": \"Next\",\n    \"PREVIOUS\": \"Previous\",\n    \"SELECT_ARIA\": \"Select page number\"\n  },\n  \"TABLE\": {\n    \"GO_TO_PAGE\": \"Go to page\",\n    \"PREVIOUS_PAGE\": \"Previous page\",\n    \"NEXT_PAGE\": \"Next page\",\n    \"PREVIOUS_3\": \"Scroll to previous 3 pages\",\n    \"NEXT_3\": \"Scroll to next 3 pages\",\n    \"FILTER\": \"Filter\",\n    \"END_OF_DATA\": \"You've reached the end of your content\",\n    \"SCROLL_TOP\": \"Scroll to top\",\n    \"CHECKBOX_HEADER\": \"Select all rows\",\n    \"CHECKBOX_ROW\": \"Select {{value}}\",\n    \"EXPAND_BUTTON\": \"Expand row\",\n    \"SORT_DESCENDING\": \"Sort rows by this header in descending order\",\n    \"SORT_ASCENDING\": \"Sort rows by this header in ascending order\",\n    \"ROW\": \"row\"\n  },\n  \"TABLE_TOOLBAR\": {\n    \"ACTION_BAR\": \"Table action bar\",\n    \"BATCH_TEXT\": \"\",\n    \"BATCH_TEXT_SINGLE\": \"1 item selected\",\n    \"BATCH_TEXT_MULTIPLE\": \"{{count}} items selected\",\n    \"CANCEL\": \"Cancel\"\n  },\n  \"TABS\": {\n    \"BUTTON_ARIA_LEFT\": \"Go to the previous tab\",\n    \"BUTTON_ARIA_RIGHT\": \"Go to the next tab\"\n  },\n  \"TILES\": {\n    \"TILE\": \"tile\",\n    \"EXPAND\": \"Expand\",\n    \"COLLAPSE\": \"Collapse\"\n  },\n  \"TOGGLE\": {\n    \"OFF\": \"Off\",\n    \"ON\": \"On\"\n  },\n  \"UI_SHELL\": {\n    \"SKIP_TO\": \"Skip to content\",\n    \"HEADER\": {\n      \"OPEN_MENU\": \"Open menu\",\n      \"CLOSE_MENU\": \"Close menu\"\n    },\n    \"SIDE_NAV\": {\n      \"LABEL\": \"Side navigation\",\n      \"SWITCHER\": \"Switcher\",\n      \"TOGGLE_OPEN\": \"Open\",\n      \"TOGGLE_CLOSE\": \"Close\"\n    }\n  }\n};\n/**\n * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n *\n * The keys specify the variable name in the string.\n *\n * Example:\n * ```typescript\n * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n *\n * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n * ```\n *\n * Produces: `\"test asdf\"`\n *\n * @param subject the translation to replace variables on\n * @param variables object of variables to replace\n */\n\nconst replace = (subject, variables) => subject.pipe(map(str => {\n  const keys = Object.keys(variables);\n\n  for (const key of keys) {\n    const value = variables[key];\n    str = str.replace(new RegExp(`{{\\\\s*${key}\\\\s*}}`, \"g\"), value);\n  }\n\n  return str;\n}));\n/**\n * Represents an \"overridable\" translation value.\n *\n * Largely an internal usecase. There are situations where we want an `Observable` that\n * can emit events from a centralized source **OR** an `Observable` that will emit events\n * from a component local source. The key example being on/off text in a `Toggle` - In some cases\n * we want the `Toggle` to use `I18n`s global translations, but in others we'd prefer to use a local\n * override. We don't ever need to return to a non-overridden state, but we do need the ability to\n * switch _to_ an overridden sate.\n */\n\n\nclass Overridable {\n  constructor(path, i18n) {\n    this.path = path;\n    this.i18n = i18n;\n    /**\n     * Our base non-overridden translation.\n     */\n\n    this.baseTranslation = this.i18n.get(this.path);\n    /**\n     * A boolean to flip between overridden and non-overridden states.\n     */\n\n    this.isOverridden = false;\n    /**\n     * ensure `$override` is initialized with the correct default value\n     * in some cases `_value` can get changed for an `Observable` before `$override` is created\n     */\n\n    const value = this.i18n.getValueFromPath(this.path);\n    this.$override = new BehaviorSubject(value);\n    this._value = value;\n  }\n  /**\n   * The raw value of the translation. Defaults to the string value, but will return the value passed to `override`\n   *\n   * @readonly\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(v) {\n    this.override(v);\n  }\n  /**\n   * The translation subject. Returns either a stream of overridden values, or our base translation values.\n   *\n   * @readonly\n   */\n\n\n  get subject() {\n    /**\n     * since inputs are bound on template instantiation (and thusly will always have _some_ value)\n     * We can use a simple boolean and the `iif` function to determine which subject to return on subscription\n     */\n    return iif(() => this.isOverridden, this.$override, this.baseTranslation);\n  }\n  /**\n   * Takes a string or an `Observable` that emits strings.\n   * Overrides the value provided by the `I18n` service.\n   */\n\n\n  override(value) {\n    this.isOverridden = true; // To ensure that there are not multiple subscriptions created for the same observable, we\n    // unsubscribe if a subscription already exists for an observable before creating a new one.\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n\n    this._value = value;\n\n    if (isObservable(value)) {\n      this.subscription = value.subscribe(v => {\n        this.$override.next(v);\n      });\n    } else {\n      this.$override.next(value);\n    }\n  }\n\n}\n/**\n * The I18n service is a minimal internal singleton service used to supply our components with translated strings.\n *\n * All the components that support I18n also support directly passed strings.\n * Usage of I18n is optional, and it is not recommended for application use (libraries like ngx-translate\n * are a better choice)\n *\n */\n\n\nlet I18n = /*#__PURE__*/(() => {\n  class I18n {\n    constructor() {\n      this.translationStrings = EN;\n      this.translations = new Map();\n      this.locale = new BehaviorSubject(\"en\");\n    }\n    /**\n     * Sets the locale and optionally the translation strings. Locale is used by components that\n     * are already locale aware (datepicker for example) while the translation strings are used\n     * for components that are not.\n     *\n     * Locales set here will override locales/languages set in components\n     * @param language an ISO 639-1 language code - https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n     * @param strings an object of strings, optional\n     */\n\n\n    setLocale(language, strings) {\n      this.locale.next(language);\n\n      if (strings) {\n        this.set(strings);\n      }\n    }\n    /**\n     * Returns the current locale\n     */\n\n\n    getLocale() {\n      return this.locale.value;\n    }\n    /**\n     * Returns an observable that resolves to the current locale, and will update when changed\n     */\n\n\n    getLocaleObservable() {\n      return this.locale.asObservable();\n    }\n    /**\n     * Set/update the translations from an object. Also notifies all participating components of the update.\n     *\n     * @param strings an object of strings, should follow the same format as src/i18n/en.json\n     */\n\n\n    set(strings) {\n      this.translationStrings = merge({}, EN, strings); // iterate over all our tracked translations and update each observable\n\n      const translations = Array.from(this.translations);\n\n      for (const [path, subject] of translations) {\n        subject.next(this.getValueFromPath(path));\n      }\n    }\n    /**\n     * When a path is specified returns an observable that will resolve to the translation string value.\n     *\n     * Returns the full translations object if path is not specified.\n     *\n     * @param path optional, looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n\n\n    get(path) {\n      if (!path) {\n        return this.translationStrings;\n      }\n\n      return this.getSubject(path);\n    }\n    /**\n     * Returns all descendents of some path fragment as an object.\n     *\n     * @param partialPath a path fragment, for example `\"NOTIFICATION\"`\n     */\n\n\n    getMultiple(partialPath) {\n      const values = this.getValueFromPath(partialPath);\n      const subjects = {};\n\n      for (const key of Object.keys(values)) {\n        if (values[key] === Object(values[key])) {\n          subjects[key] = this.getMultiple(`${partialPath}.${key}`);\n        } else {\n          subjects[key] = this.getSubject(`${partialPath}.${key}`);\n        }\n      }\n\n      return subjects;\n    }\n    /**\n     * Returns an instance of `Overridable` that can be used to optionally override the value provided by `I18n`\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n\n\n    getOverridable(path) {\n      return new Overridable(path, this);\n    }\n    /**\n     * Takes the `Observable` returned from `i18n.get` and an object of variables to replace.\n     *\n     * The keys specify the variable name in the string.\n     *\n     * Example:\n     * ```\n     * service.set({ \"TEST\": \"{{foo}} {{bar}}\" });\n     *\n     * service.replace(service.get(\"TEST\"), { foo: \"test\", bar: \"asdf\" })\n     * ```\n     *\n     * Produces: `\"test asdf\"`\n     *\n     * @param subject the translation to replace variables on\n     * @param variables object of variables to replace\n     */\n\n\n    replace(subject, variables) {\n      return replace(subject, variables);\n    }\n    /**\n     * Trys to resolve a value from the provided path.\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n\n\n    getValueFromPath(path) {\n      let value = this.translationStrings;\n\n      for (const segment of path.split(\".\")) {\n        if (value[segment] !== undefined && value[segment] !== null) {\n          value = value[segment];\n        } else {\n          throw new Error(`no key ${segment} at ${path}`);\n        }\n      }\n\n      return value;\n    }\n    /**\n     * Helper method that returns an observable from the internal cache based on the path\n     *\n     * @param path looks like `\"NOTIFICATION.CLOSE_BUTTON\"`\n     */\n\n\n    getSubject(path) {\n      try {\n        // we run this here to validate the path exists before adding it to the translation map\n        const value = this.getValueFromPath(path);\n\n        if (this.translations.has(path)) {\n          return this.translations.get(path);\n        }\n\n        const translation = new BehaviorSubject(value);\n        this.translations.set(path, translation);\n        return translation;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n\n  I18n.Éµfac = function I18n_Factory(t) {\n    return new (t || I18n)();\n  };\n\n  I18n.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: I18n,\n    factory: I18n.Éµfac\n  });\n  return I18n;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ReplacePipe = /*#__PURE__*/(() => {\n  class ReplacePipe {\n    transform(value, variables) {\n      return replace(value, variables);\n    }\n\n  }\n\n  ReplacePipe.Éµfac = function ReplacePipe_Factory(t) {\n    return new (t || ReplacePipe)();\n  };\n\n  ReplacePipe.Éµpipe = /*@__PURE__*/Éµngcc0.ÉµÉµdefinePipe({\n    name: \"i18nReplace\",\n    type: ReplacePipe,\n    pure: true\n  });\n  return ReplacePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // either provides a new instance of I18n, or returns the parent\n\n\nfunction I18N_SERVICE_PROVIDER_FACTORY(parentService) {\n  return parentService || new I18n();\n} // I18n should provide a single instance of itself to ensure that translations are consistent through the app\n\n\nconst I18N_SERVICE_PROVIDER = {\n  provide: I18n,\n  deps: [[new Optional(), new SkipSelf(), I18n]],\n  useFactory: I18N_SERVICE_PROVIDER_FACTORY\n};\nlet I18nModule = /*#__PURE__*/(() => {\n  class I18nModule {}\n\n  I18nModule.Éµfac = function I18nModule_Factory(t) {\n    return new (t || I18nModule)();\n  };\n\n  I18nModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: I18nModule\n  });\n  I18nModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    providers: [I18n, I18N_SERVICE_PROVIDER]\n  });\n  return I18nModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(I18nModule, {\n    declarations: [ReplacePipe],\n    exports: [ReplacePipe]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { I18n, replace, Overridable, ReplacePipe, I18N_SERVICE_PROVIDER_FACTORY, I18N_SERVICE_PROVIDER, I18nModule }; //# sourceMappingURL=carbon-components-angular-i18n.js.map","map":null,"metadata":{},"sourceType":"module"}