{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-toggle.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Checkbox } from 'carbon-components-angular/checkbox';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, TemplateRef, HostBinding, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\n/**\n * Defines the set of states for a toggle component.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'carbon-components-angular/i18n';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction Toggle_label_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nfunction Toggle_label_0_2_ng_template_0_Template(rf, ctx) {}\n\nfunction Toggle_label_0_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, Toggle_label_0_2_ng_template_0_Template, 0, 0, \"ng-template\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.label);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"bx--label--disabled\": a0\n  };\n};\n\nfunction Toggle_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"label\", 6);\n    ɵngcc0.ɵɵtemplate(1, Toggle_label_0_ng_container_1_Template, 2, 1, \"ng-container\", 7);\n    ɵngcc0.ɵɵtemplate(2, Toggle_label_0_2_Template, 1, 1, null, 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.ariaLabelledby)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r0.disabled));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isTemplate(ctx_r0.label));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isTemplate(ctx_r0.label));\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"bx--toggle-input--small\": a0,\n    \"bx--skeleton\": a1\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"bx--skeleton\": a0\n  };\n};\n\nvar ToggleState = /*#__PURE__*/(() => {\n  (function (ToggleState) {\n    ToggleState[ToggleState[\"Init\"] = 0] = \"Init\";\n    ToggleState[ToggleState[\"Indeterminate\"] = 1] = \"Indeterminate\";\n    ToggleState[ToggleState[\"Checked\"] = 2] = \"Checked\";\n    ToggleState[ToggleState[\"Unchecked\"] = 3] = \"Unchecked\";\n  })(ToggleState || (ToggleState = {}));\n\n  return ToggleState;\n})();\n\n/**\n * Used to emit changes performed on toggle components.\n *\n * @deprecated since v4\n */\nclass ToggleChange {}\n/**\n * [See demo](../../?path=/story/components-toggle--basic)\n *\n * ```html\n * <ibm-toggle [(ngModel)]=\"toggleState\">Toggle</ibm-toggle>\n * ```\n *\n * <example-url>../../iframe.html?id=components-toggle--basic</example-url>\n */\n\n\nlet Toggle = /*#__PURE__*/(() => {\n  class Toggle extends Checkbox {\n    /**\n     * Creates an instance of Toggle.\n     */\n    constructor(changeDetectorRef, i18n) {\n      super(changeDetectorRef);\n      this.changeDetectorRef = changeDetectorRef;\n      this.i18n = i18n;\n      /**\n       * Size of the toggle component.\n       */\n\n      this.size = \"md\";\n      /**\n       * Set to `true` for a loading toggle.\n       */\n\n      this.skeleton = false;\n      this.formItem = true;\n      /**\n       * The unique id allocated to the `Toggle`.\n       */\n\n      this.id = \"toggle-\" + Toggle.toggleCount;\n      /**\n       * Emits event notifying other classes when a change in state occurs on a toggle after a\n       * click.\n       *\n       * @deprecated since v4\n       */\n\n      this.change = new EventEmitter();\n      this._offValues = this.i18n.getOverridable(\"TOGGLE.OFF\");\n      this._onValues = this.i18n.getOverridable(\"TOGGLE.ON\");\n      Toggle.toggleCount++;\n    }\n    /**\n     * Text that is set on the left side of the toggle.\n     */\n\n\n    set offText(value) {\n      this._offValues.override(value);\n    }\n\n    get offText() {\n      return this._offValues.value;\n    }\n    /**\n     * Text that is set on the right side of the toggle.\n     */\n\n\n    set onText(value) {\n      this._onValues.override(value);\n    }\n\n    get onText() {\n      return this._onValues.value;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the toggle input.\n     *\n     * ex: `this.formGroup.get(\"myToggle\").disable();`\n     *\n     * @param isDisabled `true` to disable the input\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    getOffText() {\n      return this._offValues.subject;\n    }\n\n    getOnText() {\n      return this._onValues.subject;\n    }\n    /**\n     * Creates instance of `ToggleChange` used to propagate the change event.\n     */\n\n\n    emitChangeEvent() {\n      /* begin deprecation */\n      let event = new ToggleChange();\n      event.source = this;\n      event.checked = this.checked;\n      this.change.emit(event);\n      /* end deprecation */\n\n      this.checkedChange.emit(this.checked);\n      this.propagateChange(this.checked);\n    }\n\n    isTemplate(value) {\n      return value instanceof TemplateRef;\n    }\n\n  }\n\n  Toggle.ɵfac = function Toggle_Factory(t) {\n    return new (t || Toggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n));\n  };\n\n  Toggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Toggle,\n    selectors: [[\"ibm-toggle\"]],\n    hostVars: 2,\n    hostBindings: function Toggle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--form-item\", ctx.formItem);\n      }\n    },\n    inputs: {\n      size: \"size\",\n      skeleton: \"skeleton\",\n      offText: \"offText\",\n      onText: \"onText\",\n      label: \"label\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: Toggle,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 22,\n    consts: [[\"class\", \"bx--label\", 3, \"id\", \"ngClass\", 4, \"ngIf\"], [\"type\", \"checkbox\", 1, \"bx--toggle-input\", 3, \"ngClass\", \"id\", \"required\", \"checked\", \"disabled\", \"change\", \"click\", \"keyup.enter\"], [1, \"bx--toggle-input__label\", 3, \"for\", \"ngClass\"], [1, \"bx--toggle__switch\"], [1, \"bx--toggle__text--off\"], [1, \"bx--toggle__text--on\"], [1, \"bx--label\", 3, \"id\", \"ngClass\"], [4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function Toggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, Toggle_label_0_Template, 3, 6, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1);\n        ɵngcc0.ɵɵlistener(\"change\", function Toggle_Template_input_change_1_listener($event) {\n          return ctx.onChange($event);\n        })(\"click\", function Toggle_Template_input_click_1_listener($event) {\n          return ctx.onClick($event);\n        })(\"keyup.enter\", function Toggle_Template_input_keyup_enter_1_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"label\", 2)(3, \"span\", 3)(4, \"span\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵpipe(6, \"async\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 5);\n        ɵngcc0.ɵɵtext(8);\n        ɵngcc0.ɵɵpipe(9, \"async\");\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(17, _c1, ctx.size === \"sm\", ctx.skeleton))(\"id\", ctx.id)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(20, _c2, ctx.skeleton));\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 13, !ctx.skeleton ? ctx.getOffText() : null));\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 15, !ctx.skeleton ? ctx.getOnText() : null));\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc2.AsyncPipe],\n    encapsulation: 2\n  });\n  /**\n   * Variable used for creating unique ids for toggle components.\n   */\n\n  Toggle.toggleCount = 0;\n  /** @nocollapse */\n\n  return Toggle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n\n\nlet ToggleModule = /*#__PURE__*/(() => {\n  class ToggleModule {}\n\n  ToggleModule.ɵfac = function ToggleModule_Factory(t) {\n    return new (t || ToggleModule)();\n  };\n\n  ToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ToggleModule\n  });\n  ToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, I18nModule]\n  });\n  return ToggleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToggleModule, {\n    declarations: function () {\n      return [Toggle];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, I18nModule];\n    },\n    exports: function () {\n      return [Toggle];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ToggleState, ToggleChange, Toggle, ToggleModule }; //# sourceMappingURL=carbon-components-angular-toggle.js.map","map":null,"metadata":{},"sourceType":"module"}