{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-structured-list.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Component, HostBinding, Input, ContentChildren, HostListener, ViewChild, EventEmitter, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from 'carbon-components-angular/icon';\n/**\n * `ListColumn` represents a single column in a `StructuredList`.\n *\n * `ListColumn`s can be used in a `ListHeader` to specify the column headers, or in `ListRow`s to specify the column data.\n *\n * Example:\n * ```html\n * <ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'carbon-components-angular/icon';\n\nfunction ListColumn_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\");\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction ListHeader_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 2);\n  }\n}\n\nconst _c1 = [\"input\"];\n\nfunction ListRow_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n    ɵngcc0.ɵɵlistener(\"change\", function ListRow_ng_container_1_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r2.onChange($event));\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(4, \"svg\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r0.value)(\"name\", ctx_r0.name)(\"title\", ctx_r0.label)(\"checked\", ctx_r0.selected);\n  }\n}\n\nconst _c2 = [[[\"ibm-list-header\"]], \"*\"];\n\nconst _c3 = function (a0, a1, a2, a3, a4) {\n  return {\n    \"bx--structured-list--border\": a0,\n    \"bx--structured-list--selection\": a1,\n    \"bx--structured-list--condensed\": a2,\n    \"bx--structured-list-content--nowrap\": a3,\n    \"bx--skeleton\": a4\n  };\n};\n\nconst _c4 = [\"ibm-list-header\", \"*\"];\nlet ListColumn = /*#__PURE__*/(() => {\n  class ListColumn {\n    constructor() {\n      this.skeleton = false;\n      this.isHeaderColumn = true;\n      this.isBodyColumn = true;\n      /**\n       * Applies `white-space: nowrap` to the content of this `ListColumn`\n       */\n\n      this.nowrap = false;\n    }\n\n  }\n\n  ListColumn.ɵfac = function ListColumn_Factory(t) {\n    return new (t || ListColumn)();\n  };\n\n  ListColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ListColumn,\n    selectors: [[\"ibm-list-column\"]],\n    hostVars: 6,\n    hostBindings: function ListColumn_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--structured-list-th\", ctx.isHeaderColumn)(\"bx--structured-list-td\", ctx.isBodyColumn)(\"bx--structured-list-content--nowrap\", ctx.nowrap);\n      }\n    },\n    inputs: {\n      skeleton: \"skeleton\",\n      nowrap: \"nowrap\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function ListColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ListColumn_span_0_Template, 1, 0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.skeleton);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ListColumn;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `ListHeader` provides a container for the `ListColumn`s that make up the header of a structured list.\n *\n * Example:\n * ```html\n * \t<ibm-list-header>\n *\t\t<ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n *\t\t<ibm-list-column nowrap=\"true\">Column 2</ibm-list-column>\n *\t\t<ibm-list-column>Column 3</ibm-list-column>\n *\t</ibm-list-header>\n * ```\n */\n\n\nlet ListHeader = /*#__PURE__*/(() => {\n  class ListHeader {\n    constructor() {\n      this.wrapper = true;\n      /**\n       * Set by the containing `StructuredList`. Adds a dummy header for the selection column when set to true.\n       */\n\n      this.selection = false;\n      this._skeleton = false;\n    }\n\n    set skeleton(value) {\n      this._skeleton = value;\n      this.updateChildren();\n    }\n\n    get skeleton() {\n      return this._skeleton;\n    }\n\n    ngAfterContentInit() {\n      this.columns.forEach(column => {\n        column.isBodyColumn = false;\n        column.isHeaderColumn = true;\n      });\n      this.updateChildren();\n    }\n\n    updateChildren() {\n      if (this.columns) {\n        this.columns.toArray().forEach(child => child.skeleton = this.skeleton);\n      }\n    }\n\n  }\n\n  ListHeader.ɵfac = function ListHeader_Factory(t) {\n    return new (t || ListHeader)();\n  };\n\n  ListHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ListHeader,\n    selectors: [[\"ibm-list-header\"]],\n    contentQueries: function ListHeader_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ListColumn, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ListHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--structured-list-thead\", ctx.wrapper);\n      }\n    },\n    inputs: {\n      skeleton: \"skeleton\"\n    },\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"bx--structured-list-row\", \"bx--structured-list-row--header-row\"], [\"class\", \"bx--structured-list-th\", 4, \"ngIf\"], [1, \"bx--structured-list-th\"]],\n    template: function ListHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, ListHeader_div_2_Template, 1, 0, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ListHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `ListRow` provides a container for the `ListColumn`s that make up the body of a structured list.\n *\n * Example:\n * ```html\n * \t<ibm-list-row>\n *\t\t<ibm-list-column>Row 1</ibm-list-column>\n *\t\t<ibm-list-column nowrap=\"true\">Row One</ibm-list-column>\n *\t\t<ibm-list-column>\n *\t\t\tLorem ipsum dolor sit amet,\n *\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t</ibm-list-column>\n *\t</ibm-list-row>\n * ```\n */\n\n\nlet ListRow = /*#__PURE__*/(() => {\n  class ListRow {\n    constructor() {\n      this.selected = false;\n      /**\n       * Internal event used to notify the containing `StructuredList` of changes.\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Set by the containing `StructuredList`. Enables or disables row level selection features.\n       */\n\n      this.selection = false;\n      /**\n       * Set by the containing `StructuredList`. When `selection = true`, used for the `name` property on the radio input.\n       */\n\n      this.name = \"list\";\n      this.wrapper = true;\n      this.tabindex = this.selection ? \"0\" : null;\n    }\n\n    ngAfterContentInit() {\n      this.columns.forEach(column => {\n        column.isBodyColumn = true;\n        column.isHeaderColumn = false;\n      });\n    }\n\n    onclick() {\n      if (this.selection) {\n        this.input.nativeElement.click();\n      }\n    }\n\n    onChange(event) {\n      this.change.emit(event);\n    }\n\n  }\n\n  ListRow.ɵfac = function ListRow_Factory(t) {\n    return new (t || ListRow)();\n  };\n\n  ListRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ListRow,\n    selectors: [[\"ibm-list-row\"]],\n    contentQueries: function ListRow_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ListColumn, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);\n      }\n    },\n    viewQuery: function ListRow_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function ListRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ListRow_click_HostBindingHandler() {\n          return ctx.onclick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.tabindex)(\"aria-label\", ctx.label);\n        ɵngcc0.ɵɵclassProp(\"bx--structured-list-row--selected\", ctx.selected)(\"bx--structured-list-row\", ctx.wrapper);\n      }\n    },\n    inputs: {\n      selected: \"selected\",\n      label: \"label\",\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"tabindex\", \"-1\", \"type\", \"radio\", 1, \"bx--structured-list-input\", 3, \"value\", \"name\", \"title\", \"checked\", \"change\"], [\"input\", \"\"], [1, \"bx--structured-list-td\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"16\", 1, \"bx--structured-list-svg\"]],\n    template: function ListRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ListRow_ng_container_1_Template, 5, 4, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc2.IconDirective],\n    encapsulation: 2\n  });\n  return ListRow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Structured Lists represent related tabular data. For larger datasets consider a full `Table`.\n *\n * [See demo](../../?path=/story/components-structured-list--basic)\n *\n * See [structured-list/usage](https://www.carbondesignsystem.com/components/structured-list/usage) for usage guidance.\n *\n * A basic structued list looks something like:\n * ```html\n *\t<ibm-structured-list>\n *\t\t<ibm-list-header>\n *\t\t\t<ibm-list-column nowrap=\"true\">Column 1</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Column 2</ibm-list-column>\n *\t\t\t<ibm-list-column>Column 3</ibm-list-column>\n *\t\t</ibm-list-header>\n *\t\t<ibm-list-row>\n *\t\t\t<ibm-list-column>Row 1</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Row One</ibm-list-column>\n *\t\t\t<ibm-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</ibm-list-column>\n *\t\t</ibm-list-row>\n *\t\t<ibm-list-row>\n *\t\t\t<ibm-list-column>Row 2</ibm-list-column>\n *\t\t\t<ibm-list-column nowrap=\"true\">Row Two</ibm-list-column>\n *\t\t\t<ibm-list-column>\n *\t\t\t\tLorem ipsum dolor sit amet,\n *\t\t\t\tconsectetur adipiscing elit. Nunc dui magna,\n *\t\t\t\tfinibus id tortor sed, aliquet bibendum augue.\n *\t\t\t\tAenean posuere sem vel euismod dignissim. Nulla ut cursus dolor.\n *\t\t\t\tPellentesque vulputate nisl a porttitor interdum.\n *\t\t\t</ibm-list-column>\n *\t\t</ibm-list-row>\n *\t</ibm-structured-list>\n * ```\n *\n * <example-url>../../iframe.html?id=components-structured-list--basic</example-url>\n */\n\n\nlet StructuredList = /*#__PURE__*/(() => {\n  class StructuredList {\n    constructor() {\n      /**\n       * Set to `true` to enable radio like selection of the rows.\n       */\n      this.selection = false;\n      /**\n       * Set to `true` to apply a border and white background.\n       */\n\n      this.border = false;\n      /**\n       * Set to `true` to apply a condensed style to the headers and rows.\n       */\n\n      this.condensed = false;\n      /**\n       * Set to `true` to apply `white-space: nowrap` on _all_ conent.\n       */\n\n      this.nowrap = false;\n      /**\n       * Used when `selection = true` as the row radio group `name`\n       */\n\n      this.name = `structured-list-${StructuredList.listCount++}`;\n      /**\n       * Emits an event when the row selection changes.\n       *\n       * Emits an object that looks like:\n       * ```javascript\n       * {\n       * \tvalue: \"something\",\n       * \tselected: true,\n       * \tname: \"structured-list-1\"\n       * }\n       * ```\n       */\n\n      this.selected = new EventEmitter();\n      this._skeleton = false;\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n    }\n    /**\n     * Sets the skeleton value for all `ListHeader` to the skeleton value of `StructuredList`.\n     */\n\n\n    set skeleton(value) {\n      this._skeleton = value;\n      this.updateChildren();\n    }\n    /**\n     * Returns the skeleton value in the `StructuredList` if there is one.\n     */\n\n\n    get skeleton() {\n      return this._skeleton;\n    }\n\n    ngAfterContentInit() {\n      const setSelection = rowOrHeader => {\n        rowOrHeader.selection = this.selection;\n      };\n\n      this.headers.forEach(setSelection);\n      this.rows.forEach(row => {\n        setSelection(row);\n        row.name = this.name;\n        row.tabindex = this.selection ? \"0\" : \"null\";\n        row.change.subscribe(() => {\n          this.selected.emit({\n            value: row.value,\n            selected: row.selected,\n            name: this.name\n          });\n          this.onChange(row.value);\n        });\n      });\n      this.updateChildren();\n    }\n\n    writeValue(value) {\n      if (!this.rows) {\n        return;\n      }\n\n      this.rows.forEach(row => {\n        if (row.value === value) {\n          row.selected = true;\n        } else {\n          row.selected = false;\n        }\n      });\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    updateChildren() {\n      if (this.headers) {\n        this.headers.toArray().forEach(child => child.skeleton = this.skeleton);\n      }\n    }\n\n  }\n\n  StructuredList.ɵfac = function StructuredList_Factory(t) {\n    return new (t || StructuredList)();\n  };\n\n  StructuredList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StructuredList,\n    selectors: [[\"ibm-structured-list\"]],\n    contentQueries: function StructuredList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ListRow, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ListHeader, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headers = _t);\n      }\n    },\n    inputs: {\n      selection: \"selection\",\n      border: \"border\",\n      condensed: \"condensed\",\n      nowrap: \"nowrap\",\n      name: \"name\",\n      skeleton: \"skeleton\"\n    },\n    outputs: {\n      selected: \"selected\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: StructuredList,\n      multi: true\n    }])],\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 7,\n    consts: [[1, \"bx--structured-list\", 3, \"ngClass\"], [1, \"bx--structured-list-tbody\"]],\n    template: function StructuredList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"section\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction5(1, _c3, ctx.border, ctx.selection, ctx.condensed, ctx.nowrap, ctx.skeleton));\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    encapsulation: 2\n  });\n  /**\n   * A counter to provide unique default values.\n   */\n\n  StructuredList.listCount = 0;\n  return StructuredList;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StructuredListModule = /*#__PURE__*/(() => {\n  class StructuredListModule {}\n\n  StructuredListModule.ɵfac = function StructuredListModule_Factory(t) {\n    return new (t || StructuredListModule)();\n  };\n\n  StructuredListModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: StructuredListModule\n  });\n  StructuredListModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule]\n  });\n  return StructuredListModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StructuredListModule, {\n    declarations: function () {\n      return [StructuredList, ListRow, ListHeader, ListColumn];\n    },\n    imports: function () {\n      return [CommonModule, IconModule];\n    },\n    exports: function () {\n      return [StructuredList, ListRow, ListHeader, ListColumn];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ListColumn, ListHeader, ListRow, StructuredList, StructuredListModule }; //# sourceMappingURL=carbon-components-angular-structured-list.js.map","map":null,"metadata":{},"sourceType":"module"}