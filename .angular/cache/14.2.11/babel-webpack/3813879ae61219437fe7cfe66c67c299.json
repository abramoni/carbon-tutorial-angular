{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-checkbox.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * Defines the set of states for a checkbox component.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"inputCheckbox\"];\n\nconst _c1 = function (a0) {\n  return {\n    \"bx--skeleton\": a0\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"bx--visually-hidden\": a0\n  };\n};\n\nconst _c3 = [\"*\"];\nvar CheckboxState = /*#__PURE__*/(() => {\n  (function (CheckboxState) {\n    CheckboxState[CheckboxState[\"Init\"] = 0] = \"Init\";\n    CheckboxState[CheckboxState[\"Indeterminate\"] = 1] = \"Indeterminate\";\n    CheckboxState[CheckboxState[\"Checked\"] = 2] = \"Checked\";\n    CheckboxState[CheckboxState[\"Unchecked\"] = 3] = \"Unchecked\";\n  })(CheckboxState || (CheckboxState = {}));\n\n  return CheckboxState;\n})();\n\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nclass CheckboxChange {}\n/**\n * [See demo](../../?path=/story/components-checkbox--basic)\n *\n * <example-url>../../iframe.html?id=components-checkbox--basic</example-url>\n */\n\n\nlet Checkbox = /*#__PURE__*/(() => {\n  class Checkbox {\n    /**\n     * Creates an instance of `Checkbox`.\n     */\n    constructor(changeDetectorRef) {\n      this.changeDetectorRef = changeDetectorRef;\n      /**\n       * Size of the checkbox.\n       *\n       * @deprecated since v4\n       */\n\n      this.size = \"md\";\n      /**\n       * Set to `true` for checkbox to be rendered without any classes on the host element.\n       */\n\n      this.inline = false;\n      /**\n       * Set to `true` for a disabled checkbox.\n       */\n\n      this.disabled = false;\n      /**\n       * Set to `true` for a loading checkbox.\n       */\n\n      this.skeleton = false;\n      /**\n       * Set to `true` to hide the checkbox labels.\n       */\n\n      this.hideLabel = false;\n      /**\n       * The unique id for the checkbox component.\n       */\n\n      this.id = `checkbox-${Checkbox.checkboxCount}`; // TODO: drop the `_`\n      // tslint:disable-next-line:no-input-rename\n\n      this._ariaLabel = \"\";\n      /**\n       * Emits click event.\n       */\n\n      this.click = new EventEmitter();\n      /**\n       * Emits event notifying other classes when a change in state occurs on a checkbox after a\n       * click.\n       *\n       * @deprecated since v4 use `checked` and `checkedChange` instead\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Emits an event when the value of the checkbox changes.\n       *\n       * Allows double biding with the `checked` Input.\n       */\n\n      this.checkedChange = new EventEmitter();\n      /**\n       * Emits event notifying other classes when a change in state occurs specifically\n       * on an indeterminate checkbox.\n       */\n\n      this.indeterminateChange = new EventEmitter();\n      /**\n       * Set to `true` if the input checkbox is selected (or checked).\n       */\n\n      this._checked = false;\n      /**\n       * Set to `true` if the input checkbox is in state indeterminate.\n       */\n\n      this._indeterminate = false;\n      /**\n       * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n       */\n\n      this.currentCheckboxState = CheckboxState.Init;\n      /**\n       * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n       */\n\n      this.onTouched = () => {};\n      /**\n       * Method set in `registerOnChange` to propagate changes back to the form.\n       */\n\n\n      this.propagateChange = _ => {};\n\n      Checkbox.checkboxCount++;\n    }\n    /**\n     * Used to set the `aria-label` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabel` input instead\n     */\n    // tslint:disable-next-line:no-input-rename\n\n\n    set ariaLabel(value) {\n      this._ariaLabel = value;\n    }\n\n    get ariaLabel() {\n      return this._ariaLabel;\n    }\n    /**\n     * Used to set the `aria-labelledby` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabelledby` input instead\n     */\n    // tslint:disable-next-line:no-input-rename\n\n\n    set ariaLabelledby(value) {\n      this._ariaLabelledby = value;\n    }\n\n    get ariaLabelledby() {\n      return this._ariaLabelledby;\n    }\n    /**\n     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n     *\n     * Allows double binding with the `indeterminateChange` Output.\n     */\n\n\n    set indeterminate(indeterminate) {\n      if (indeterminate === this._indeterminate) {\n        return;\n      }\n\n      this._indeterminate = indeterminate;\n\n      if (this._indeterminate) {\n        this.transitionCheckboxState(CheckboxState.Indeterminate);\n      } else {\n        this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n      }\n\n      if (this.inputCheckbox && this.inputCheckbox.nativeElement) {\n        this.inputCheckbox.nativeElement.indeterminate = indeterminate;\n      }\n\n      this.changeDetectorRef.markForCheck();\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n    /**\n     * Reflects whether the checkbox state is indeterminate.\n     */\n\n\n    get indeterminate() {\n      return this._indeterminate;\n    }\n    /**\n     * Sets the `checked` state. `true` for checked, `false` for unchecked\n     *\n     * Allows double binding with the `checkedChange` Output.\n     */\n\n\n    set checked(checked) {\n      this.setChecked(checked, false);\n    }\n    /**\n     * Returns value `true` if state is selected for the checkbox.\n     */\n\n\n    get checked() {\n      return this._checked;\n    }\n    /**\n     * Toggle the selected state of the checkbox.\n     */\n\n\n    toggle() {\n      // Flip checked and reset indeterminate\n      this.setChecked(!this.checked, true);\n    }\n    /**\n     * Writes a value from `ngModel` to the component.\n     *\n     * In this case the value is the `checked` property.\n     *\n     * @param value boolean, corresponds to the `checked` property.\n     */\n\n\n    writeValue(value) {\n      // Set checked and reset indeterminate\n      this.setChecked(!!value, true);\n    }\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n\n\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the checkbox.\n     *\n     * ex: `this.formGroup.get(\"myCheckbox\").disable();`\n     *\n     * @param isDisabled `true` to disable the checkbox\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.changeDetectorRef.markForCheck();\n    }\n\n    focusOut() {\n      this.onTouched();\n    }\n    /**\n     * Executes on the event of a change within `Checkbox` to block propagation.\n     */\n\n\n    onChange(event) {\n      event.stopPropagation();\n    }\n    /**\n     * Handles click events on the `Checkbox` and emits changes to other classes.\n     */\n\n\n    onClick(event) {\n      if (this.click.observers.length) {\n        // Disable default checkbox activation behavior which flips checked and resets indeterminate.\n        // This allows the parent component to control the checked/indeterminate properties.\n        event.preventDefault();\n        this.click.emit();\n        return;\n      }\n\n      if (!this.disabled) {\n        this.toggle();\n        this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n        this.emitChangeEvent();\n      }\n    }\n    /**\n     * Handles changes between checkbox states.\n     */\n\n\n    transitionCheckboxState(newState) {\n      this.currentCheckboxState = newState;\n    }\n    /**\n     * Creates instance of `CheckboxChange` used to propagate the change event.\n     */\n\n\n    emitChangeEvent() {\n      /* begin deprecation */\n      let event = new CheckboxChange();\n      event.source = this;\n      event.checked = this.checked;\n      this.change.emit(event);\n      /* end deprecation */\n\n      this.checkedChange.emit(this.checked);\n      this.propagateChange(this.checked);\n    }\n    /**\n     * Updates the checkbox if it is in the indeterminate state.\n     */\n\n\n    ngAfterViewInit() {\n      if (this.indeterminate && this.inputCheckbox && this.inputCheckbox.nativeElement) {\n        this.inputCheckbox.nativeElement.indeterminate = true;\n      }\n    }\n    /**\n     * Sets checked state and optionally resets indeterminate state.\n     */\n\n\n    setChecked(checked, resetIndeterminate) {\n      if (checked === this._checked) {\n        return;\n      }\n\n      this._checked = checked; // Reset indeterminate if requested\n\n      if (resetIndeterminate && this._indeterminate) {\n        this._indeterminate = false;\n        Promise.resolve().then(() => {\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  Checkbox.ɵfac = function Checkbox_Factory(t) {\n    return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  Checkbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Checkbox,\n    selectors: [[\"ibm-checkbox\"]],\n    viewQuery: function Checkbox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);\n      }\n    },\n    hostBindings: function Checkbox_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusout\", function Checkbox_focusout_HostBindingHandler() {\n          return ctx.focusOut();\n        });\n      }\n    },\n    inputs: {\n      size: \"size\",\n      inline: \"inline\",\n      disabled: \"disabled\",\n      skeleton: \"skeleton\",\n      hideLabel: \"hideLabel\",\n      id: \"id\",\n      _ariaLabel: [\"ariaLabel\", \"_ariaLabel\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      _ariaLabelledby: [\"ariaLabelledby\", \"_ariaLabelledby\"],\n      indeterminate: \"indeterminate\",\n      checked: \"checked\",\n      nested: \"nested\",\n      name: \"name\",\n      required: \"required\",\n      value: \"value\"\n    },\n    outputs: {\n      click: \"click\",\n      change: \"change\",\n      checkedChange: \"checkedChange\",\n      indeterminateChange: \"indeterminateChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: Checkbox,\n      multi: true\n    }])],\n    ngContentSelectors: _c3,\n    decls: 6,\n    vars: 15,\n    consts: [[1, \"bx--form-item\", \"bx--checkbox-wrapper\"], [\"type\", \"checkbox\", 1, \"bx--checkbox\", 3, \"id\", \"value\", \"name\", \"required\", \"checked\", \"disabled\", \"change\", \"click\"], [\"inputCheckbox\", \"\"], [1, \"bx--checkbox-label\", 3, \"for\", \"ngClass\"], [1, \"bx--checkbox-label-text\", 3, \"ngClass\"]],\n    template: function Checkbox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"change\", function Checkbox_Template_input_change_1_listener($event) {\n          return ctx.onChange($event);\n        })(\"click\", function Checkbox_Template_input_click_1_listener($event) {\n          return ctx.onClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"label\", 3)(4, \"span\", 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id + \"_input\")(\"value\", ctx.value)(\"name\", ctx.name)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id + \"_input\")(\"ngClass\", ɵngcc0.ɵɵpureFunction1(11, _c1, ctx.skeleton));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(13, _c2, ctx.hideLabel));\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /**\n   * Variable used for creating unique ids for checkbox components.\n   */\n\n  Checkbox.checkboxCount = 0;\n  /** @nocollapse */\n\n  return Checkbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n\n\nlet CheckboxModule = /*#__PURE__*/(() => {\n  class CheckboxModule {}\n\n  CheckboxModule.ɵfac = function CheckboxModule_Factory(t) {\n    return new (t || CheckboxModule)();\n  };\n\n  CheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CheckboxModule\n  });\n  CheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule]\n  });\n  return CheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxModule, {\n    declarations: function () {\n      return [Checkbox];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [Checkbox];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Checkbox, CheckboxState, CheckboxChange, CheckboxModule }; //# sourceMappingURL=carbon-components-angular-checkbox.js.map","map":null,"metadata":{},"sourceType":"module"}