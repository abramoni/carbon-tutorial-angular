{"ast":null,"code":"/**\n * Utilites to manipulate the position of elements relative to other elements\n */\nvar _a;\n\nexport var PLACEMENTS = /*#__PURE__*/(() => {\n  (function (PLACEMENTS) {\n    PLACEMENTS[\"LEFT\"] = \"left\";\n    PLACEMENTS[\"RIGHT\"] = \"right\";\n    PLACEMENTS[\"TOP\"] = \"top\";\n    PLACEMENTS[\"BOTTOM\"] = \"bottom\";\n  })(PLACEMENTS || (PLACEMENTS = {}));\n\n  return PLACEMENTS;\n})();\nexport var defaultPositions = (_a = {}, _a[PLACEMENTS.LEFT] = function (referenceOffset, target, referenceRect) {\n  return {\n    top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),\n    left: Math.round(referenceOffset.left - target.offsetWidth)\n  };\n}, _a[PLACEMENTS.RIGHT] = function (referenceOffset, target, referenceRect) {\n  return {\n    top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),\n    left: Math.round(referenceOffset.left + referenceRect.width)\n  };\n}, _a[PLACEMENTS.TOP] = function (referenceOffset, target, referenceRect) {\n  return {\n    top: Math.round(referenceOffset.top - target.offsetHeight),\n    left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)\n  };\n}, _a[PLACEMENTS.BOTTOM] = function (referenceOffset, target, referenceRect) {\n  return {\n    top: Math.round(referenceOffset.top + referenceRect.height),\n    left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)\n  };\n}, _a);\nvar windowRef = typeof window !== \"undefined\" ? window : {\n  innerHeight: 0,\n  scrollY: 0,\n  innerWidth: 0,\n  scrollX: 0\n};\n\nvar Position =\n/** @class */\nfunction () {\n  function Position(positions) {\n    if (positions === void 0) {\n      positions = {};\n    }\n\n    this.positions = defaultPositions;\n    this.positions = Object.assign({}, defaultPositions, positions);\n  }\n\n  Position.prototype.getRelativeOffset = function (target) {\n    // start with the initial element offsets\n    var offsets = {\n      left: target.offsetLeft,\n      top: target.offsetTop\n    }; // get each static (i.e. not absolute or relative) offsetParent and sum the left/right offsets\n\n    while (target.offsetParent && getComputedStyle(target.offsetParent).position === \"static\") {\n      offsets.left += target.offsetLeft;\n      offsets.top += target.offsetTop;\n      target = target.offsetParent;\n    }\n\n    return offsets;\n  };\n\n  Position.prototype.getAbsoluteOffset = function (target) {\n    var currentNode = target;\n    var margins = {\n      top: 0,\n      left: 0\n    }; // searches for containing elements with additional margins\n\n    while (currentNode.offsetParent) {\n      var computed = getComputedStyle(currentNode.offsetParent); // find static elements with additional margins\n      // since they tend to throw off our positioning\n      // (usually this is just the body)\n\n      if (computed.position === \"static\" && computed.marginLeft && computed.marginTop) {\n        if (parseInt(computed.marginTop, 10)) {\n          margins.top += parseInt(computed.marginTop, 10);\n        }\n\n        if (parseInt(computed.marginLeft, 10)) {\n          margins.left += parseInt(computed.marginLeft, 10);\n        }\n      }\n\n      currentNode = currentNode.offsetParent;\n    }\n\n    var targetRect = target.getBoundingClientRect();\n    var relativeRect = document.body.getBoundingClientRect();\n    return {\n      top: targetRect.top - relativeRect.top + margins.top,\n      left: targetRect.left - relativeRect.left + margins.left\n    };\n  }; // finds the position relative to the `reference` element\n\n\n  Position.prototype.findRelative = function (reference, target, placement) {\n    var referenceOffset = this.getRelativeOffset(reference);\n    var referenceRect = reference.getBoundingClientRect();\n    return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n  };\n\n  Position.prototype.findAbsolute = function (reference, target, placement) {\n    var referenceOffset = this.getAbsoluteOffset(reference);\n    var referenceRect = reference.getBoundingClientRect();\n    return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n  };\n\n  Position.prototype.findPosition = function (reference, target, placement, offsetFunction) {\n    if (offsetFunction === void 0) {\n      offsetFunction = this.getAbsoluteOffset.bind(this);\n    }\n\n    var referenceOffset = offsetFunction(reference);\n    var referenceRect = reference.getBoundingClientRect();\n    return this.calculatePosition(referenceOffset, referenceRect, target, placement);\n  };\n\n  Position.prototype.findPositionAt = function (offset, target, placement) {\n    return this.calculatePosition(offset, {\n      top: 0,\n      left: 0,\n      height: 0,\n      width: 0\n    }, target, placement);\n  };\n  /**\n   * Get the dimensions of an element from an AbsolutePosition and a reference element\n   */\n\n\n  Position.prototype.getPlacementBox = function (target, position) {\n    var targetBottom = target.offsetHeight + position.top;\n    var targetRight = target.offsetWidth + position.left;\n    return {\n      top: position.top,\n      bottom: targetBottom,\n      left: position.left,\n      right: targetRight\n    };\n  };\n\n  Position.prototype.addOffset = function (position, top, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    return Object.assign({}, position, {\n      top: position.top + top,\n      left: position.left + left\n    });\n  };\n\n  Position.prototype.setElement = function (element, position) {\n    element.style.top = position.top + \"px\";\n    element.style.left = position.left + \"px\";\n  };\n\n  Position.prototype.findBestPlacement = function (reference, target, placements, containerFunction, positionFunction) {\n    var _this = this;\n\n    if (containerFunction === void 0) {\n      containerFunction = this.defaultContainerFunction.bind(this);\n    }\n\n    if (positionFunction === void 0) {\n      positionFunction = this.findPosition.bind(this);\n    }\n    /**\n     * map over the array of placements and weight them based on the percentage of visible area\n     * where visible area is defined as the area not obscured by the window borders\n     */\n\n\n    var weightedPlacements = placements.map(function (placement) {\n      var pos = positionFunction(reference, target, placement);\n\n      var box = _this.getPlacementBox(target, pos);\n\n      var hiddenHeight = 0;\n      var hiddenWidth = 0;\n      var container = containerFunction(); // the element is exceeding from top or bottom of its container\n\n      if (box.top < container.top) {\n        hiddenHeight = container.top - box.top;\n      } else if (box.bottom > container.height) {\n        hiddenHeight = box.bottom - container.height;\n      } // the element is exceeding from left or right of its container\n\n\n      if (box.left < container.left) {\n        hiddenWidth = container.left - box.left;\n      } else if (box.right > container.width) {\n        hiddenWidth = box.right - container.width;\n      } // if one of the hidden dimensions is 0 but the other is > 0\n      // we want to have a positive area, so setting the null one to 1\n\n\n      if (hiddenHeight && !hiddenWidth) {\n        hiddenWidth = 1;\n      } else if (hiddenWidth && !hiddenHeight) {\n        hiddenHeight = 1;\n      }\n\n      var area = target.offsetHeight * target.offsetWidth;\n      var hiddenArea = hiddenHeight * hiddenWidth; // if visibleArea is 0 it means the element is fully outside container bounds\n      // and visiblePercent will then be 0\n\n      var visibleArea = area - hiddenArea;\n      var visiblePercent = visibleArea / area;\n      return {\n        placement: placement,\n        weight: visiblePercent\n      };\n    }); // sort the placements from best to worst\n\n    weightedPlacements.sort(function (a, b) {\n      return b.weight - a.weight;\n    }); // pick the best!\n\n    return weightedPlacements[0].placement;\n  };\n\n  Position.prototype.findBestPlacementAt = function (offset, target, placements, containerFunction) {\n    var _this = this;\n\n    if (containerFunction === void 0) {\n      containerFunction = this.defaultContainerFunction.bind(this);\n    }\n\n    var positionAt = function (_, target, placement) {\n      return _this.findPositionAt(offset, target, placement);\n    };\n\n    return this.findBestPlacement(null, target, placements, containerFunction, positionAt);\n  };\n\n  Position.prototype.defaultContainerFunction = function () {\n    return {\n      // we go with window here, because that's going to be the simple/common case\n      top: 0,\n      left: 0,\n      height: windowRef.innerHeight,\n      width: windowRef.innerWidth\n    };\n  };\n\n  Position.prototype.calculatePosition = function (referenceOffset, referenceRect, target, placement) {\n    if (this.positions[placement]) {\n      return this.positions[placement](referenceOffset, target, referenceRect);\n    }\n\n    console.error(\"No function found for placement, defaulting to 0,0\");\n    return {\n      left: 0,\n      top: 0\n    };\n  };\n\n  return Position;\n}();\n\nexport { Position };\nexport var position = new Position();\nexport default Position; //# sourceMappingURL=../src/index.js.map","map":null,"metadata":{},"sourceType":"module"}