{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-icon.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { toString, getAttributes } from '@carbon/icon-helpers';\nimport { Injectable, Directive, ElementRef, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport Add16 from '@carbon/icons/es/add/16';\nimport Add20 from '@carbon/icons/es/add/20';\nimport Bee16 from '@carbon/icons/es/bee/16';\nimport Bee20 from '@carbon/icons/es/bee/20';\nimport Calendar16 from '@carbon/icons/es/calendar/16';\nimport Carbon16 from '@carbon/icons/es/carbon/16';\nimport Carbon20 from '@carbon/icons/es/carbon/20';\nimport CaretDown16 from '@carbon/icons/es/caret--down/16';\nimport CaretLeft16 from '@carbon/icons/es/caret--left/16';\nimport CaretRight16 from '@carbon/icons/es/caret--right/16';\nimport CaretUp16 from '@carbon/icons/es/caret--up/16';\nimport Checkmark16 from '@carbon/icons/es/checkmark/16';\nimport CheckmarkFilled16 from '@carbon/icons/es/checkmark--filled/16';\nimport CheckmarkFilled20 from '@carbon/icons/es/checkmark--filled/20';\nimport CheckmarkOutline16 from '@carbon/icons/es/checkmark--outline/16';\nimport ChevronDown16 from '@carbon/icons/es/chevron--down/16';\nimport ChevronRight16 from '@carbon/icons/es/chevron--right/16';\nimport CircleDash16 from '@carbon/icons/es/circle-dash/16';\nimport Close16 from '@carbon/icons/es/close/16';\nimport Close20 from '@carbon/icons/es/close/20';\nimport Copy16 from '@carbon/icons/es/copy/16';\nimport Copy20 from '@carbon/icons/es/copy/20';\nimport Data216 from '@carbon/icons/es/data--2/16';\nimport Data220 from '@carbon/icons/es/data--2/20';\nimport Delete16 from '@carbon/icons/es/delete/16';\nimport Document16 from '@carbon/icons/es/document/16';\nimport Document20 from '@carbon/icons/es/document/20';\nimport Download16 from '@carbon/icons/es/download/16';\nimport ErrorFilled16 from '@carbon/icons/es/error--filled/16';\nimport ErrorFilled20 from '@carbon/icons/es/error--filled/20';\nimport Fade16 from '@carbon/icons/es/fade/16';\nimport Fade20 from '@carbon/icons/es/fade/20';\nimport Incomplete16 from '@carbon/icons/es/incomplete/16';\nimport InformationFilled16 from '@carbon/icons/es/information--filled/16';\nimport InformationFilled20 from '@carbon/icons/es/information--filled/20';\nimport Menu16 from '@carbon/icons/es/menu/16';\nimport Menu20 from '@carbon/icons/es/menu/20';\nimport OverflowMenuVertical16 from '@carbon/icons/es/overflow-menu--vertical/16';\nimport OverflowMenuHorizontal16 from '@carbon/icons/es/overflow-menu--horizontal/16';\nimport Save16 from '@carbon/icons/es/save/16';\nimport Search16 from '@carbon/icons/es/search/16';\nimport Settings16 from '@carbon/icons/es/settings/16';\nimport SettingsAdjust16 from '@carbon/icons/es/settings--adjust/16';\nimport Subtract16 from '@carbon/icons/es/subtract/16';\nimport Warning16 from '@carbon/icons/es/warning/16';\nimport WarningFilled16 from '@carbon/icons/es/warning--filled/16';\nimport WarningFilled20 from '@carbon/icons/es/warning--filled/20';\nimport WarningAltFilled16 from '@carbon/icons/es/warning--alt--filled/16';\n/**\n * Abstract class that represent a cache of icons.\n *\n * The actual caching mechanism will be implementation specific,\n * but it's likely a good idea to key by the icons name and/or size.\n * Icon name and size will always be strings, and they will be the two consistent\n * identifiers of an icon. For the purposes of storage additonal descriptor properties may\n * be used, but the name and size are the only ones guarenteed to be passed for lookup purposes.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass IconCache {}\n/**\n * Custom error for when a name can't be found\n */\n\n\nclass IconNameNotFoundError extends Error {\n  constructor(name) {\n    super(`Icon ${name} not found`);\n  }\n\n}\n/**\n * Custom error for when a specific size can't be found\n */\n\n\nclass IconSizeNotFoundError extends Error {\n  constructor(size, name) {\n    super(\"Size ${size} for ${name} not found\");\n  }\n\n}\n/**\n * Concrete implementation of `IconCache` as a simple in memory cache\n */\n\n\nclass IconMemoryCache extends IconCache {\n  constructor() {\n    super(...arguments);\n    this.iconMap = new Map();\n  }\n\n  get(name, size) {\n    if (!this.iconMap.has(name)) {\n      throw new IconNameNotFoundError(name);\n    }\n\n    const sizeMap = this.iconMap.get(name);\n\n    if (!sizeMap.has(size)) {\n      throw new IconSizeNotFoundError(size, name);\n    }\n\n    return sizeMap.get(size);\n  }\n\n  set(name, size, descriptor) {\n    if (!this.iconMap.has(name)) {\n      this.iconMap.set(name, new Map());\n    }\n\n    const sizeMap = this.iconMap.get(name);\n    sizeMap.set(size, descriptor);\n  }\n\n}\n/**\n * The icon service is a singleton service responsible for registering and retriving icons from `@carbon/icons`.\n *\n * It's important to register icons before use. It's reccommended to register your icons early, likely in your app.component.\n *\n * To allow for improved tree shaking _do not_ import all the icons from `@carbon/icons` and register them.\n * Instead register only the icons in use by your application. If your application makes use of lazy loaded\n * modules you may also lazy load the icons used in that module by registering them early on in that module.\n *\n * `ngOnInit` should be sufficiantly early to register icons.\n *\n * Example:\n * ```\n * import { Accessibility16 } from \"@carbon/icons\";\n *\n * // ...\n *\n * class MyComponent implements OnInit {\n * \tconstructor(protected iconService: IconService) {}\n *\n * \t// ...\n *\n * \tngOnInit() {\n * \t\tthis.iconService.register(Accessibility16);\n * \t}\n *\n * \t// ...\n * }\n * ```\n *\n * If needed it is possible to register an icon under a different name, via `registerAs`.\n */\n\n\nlet IconService = /*#__PURE__*/(() => {\n  class IconService {\n    constructor() {\n      this.iconCache = new IconMemoryCache();\n    }\n    /**\n     * Registers an array of icons based on the metadata provided by `@carbon/icons`\n     */\n\n\n    registerAll(descriptors) {\n      descriptors.forEach(icon => this.register(icon));\n    }\n    /**\n     * Registers an icon based on the metadata provided by `@carbon/icons`\n     */\n\n\n    register(descriptor) {\n      const {\n        name\n      } = descriptor;\n      this.registerAs(name, descriptor);\n    }\n    /**\n     * Registers an icon based on a uniqe name and metadata provided by `@carbon/icons`\n     */\n\n\n    registerAs(name, descriptor) {\n      const {\n        size\n      } = descriptor;\n      this.iconCache.set(name, size.toString(), descriptor);\n    }\n    /**\n     * Gets an icon, converts it to a string, and caches the result\n     */\n\n\n    get(name, size) {\n      try {\n        const icon = this.iconCache.get(name, size.toString());\n\n        if (!icon.svg) {\n          icon.svg = toString(icon);\n        }\n\n        return icon;\n      } catch (e) {\n        throw e;\n      }\n    }\n    /**\n     * Configure various service settings (caching strategy ...)\n     */\n\n\n    configure(options) {\n      this.iconCache = options.cache;\n    }\n\n  }\n\n  IconService.ɵfac = function IconService_Factory(t) {\n    return new (t || IconService)();\n  };\n\n  IconService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: IconService,\n    factory: IconService.ɵfac\n  });\n  return IconService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive for applying styling to an input element.\n *\n * Example:\n *\n * ```html\n * <input ibmText/>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/text-input/code) for more detail.\n */\n\n\nlet IconDirective = /*#__PURE__*/(() => {\n  class IconDirective {\n    constructor(elementRef, iconService) {\n      this.elementRef = elementRef;\n      this.iconService = iconService;\n      this.ibmIcon = \"\";\n      this.size = \"16\";\n      this.title = \"\";\n      this.ariaLabel = \"\";\n      this.ariaLabelledBy = \"\";\n      this.ariaHidden = \"\";\n      this.isFocusable = false;\n    }\n\n    ngAfterViewInit() {\n      const root = this.elementRef.nativeElement;\n      let icon;\n\n      try {\n        icon = this.iconService.get(this.ibmIcon, this.size.toString());\n      } catch (error) {\n        console.warn(error); // bail out\n\n        return;\n      }\n\n      const domParser = new DOMParser();\n      const rawSVG = icon.svg;\n      const svgElement = domParser.parseFromString(rawSVG, \"image/svg+xml\").documentElement;\n      let node = root.tagName.toUpperCase() !== \"SVG\" ? svgElement : svgElement.firstChild;\n\n      while (node) {\n        // importNode makes a clone of the node\n        // this ensures we keep looping over the nodes in the parsed document\n        root.appendChild(root.ownerDocument.importNode(node, true)); // type the node because the angular compiler freaks out if it\n        // ends up thinking it's a `Node` instead of a `ChildNode`\n\n        node = node.nextSibling;\n      }\n\n      const svg = root.tagName.toUpperCase() !== \"SVG\" ? svgElement : root;\n      svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n      const attributes = getAttributes({\n        width: icon.attrs.width,\n        height: icon.attrs.height,\n        viewBox: icon.attrs.viewBox,\n        title: this.title,\n        \"aria-label\": this.ariaLabel,\n        \"aria-labelledby\": this.ariaLabelledBy,\n        \"aria-hidden\": this.ariaHidden,\n        focusable: this.isFocusable.toString()\n      });\n      const attrKeys = Object.keys(attributes);\n\n      for (let i = 0; i < attrKeys.length; i++) {\n        const key = attrKeys[i];\n        const value = attributes[key];\n\n        if (key === \"title\") {\n          continue;\n        }\n\n        if (value) {\n          svg.setAttribute(key, value);\n        }\n      }\n\n      if (attributes[\"title\"]) {\n        const title = document.createElement(\"title\");\n        title.textContent = attributes.title;\n        IconDirective.titleIdCounter++;\n        title.setAttribute(\"id\", `${icon.name}-title-${IconDirective.titleIdCounter}`); // title must be first for screen readers\n\n        svg.insertBefore(title, svg.firstElementChild);\n        svg.setAttribute(\"aria-labelledby\", `${icon.name}-title-${IconDirective.titleIdCounter}`);\n      }\n    }\n\n  }\n\n  IconDirective.ɵfac = function IconDirective_Factory(t) {\n    return new (t || IconDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(IconService));\n  };\n\n  IconDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: IconDirective,\n    selectors: [[\"\", \"ibmIcon\", \"\"]],\n    inputs: {\n      ibmIcon: \"ibmIcon\",\n      size: \"size\",\n      title: \"title\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      ariaHidden: \"ariaHidden\",\n      isFocusable: \"isFocusable\"\n    }\n  });\n  IconDirective.titleIdCounter = 0;\n  /** @nocollapse */\n\n  return IconDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n// either provides a new instance of IconService, or returns the parent\n\n\nfunction ICON_SERVICE_PROVIDER_FACTORY(parentService) {\n  return parentService || new IconService();\n} // icon service *must* be a singleton to ensure that icons are accessible globally and not duplicated\n\n\nconst ICON_SERVICE_PROVIDER = {\n  provide: IconService,\n  deps: [[new Optional(), new SkipSelf(), IconService]],\n  useFactory: ICON_SERVICE_PROVIDER_FACTORY\n};\nlet IconModule = /*#__PURE__*/(() => {\n  class IconModule {\n    constructor(iconService) {\n      this.iconService = iconService;\n      iconService.registerAll([Add16, Add20, Bee16, Bee20, Calendar16, Carbon16, Carbon20, CaretDown16, CaretLeft16, CaretRight16, CaretUp16, Checkmark16, CheckmarkFilled16, CheckmarkFilled20, CheckmarkOutline16, ChevronDown16, ChevronRight16, CircleDash16, Close16, Close20, Copy16, Copy20, Data216, Data220, Delete16, Document16, Document20, Download16, ErrorFilled16, ErrorFilled20, Fade16, Fade20, Incomplete16, InformationFilled16, InformationFilled20, Menu16, Menu20, OverflowMenuVertical16, OverflowMenuHorizontal16, Save16, Search16, Settings16, SettingsAdjust16, Subtract16, Warning16, WarningFilled16, WarningFilled20, WarningAltFilled16]);\n    }\n\n  }\n\n  IconModule.ɵfac = function IconModule_Factory(t) {\n    return new (t || IconModule)(ɵngcc0.ɵɵinject(IconService));\n  };\n\n  IconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: IconModule\n  });\n  IconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ICON_SERVICE_PROVIDER],\n    imports: [CommonModule]\n  });\n  /** @nocollapse */\n\n  return IconModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IconModule, {\n    declarations: function () {\n      return [IconDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [IconDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { IconDirective, ICON_SERVICE_PROVIDER, ICON_SERVICE_PROVIDER_FACTORY, IconModule, IconCache, IconMemoryCache, IconNameNotFoundError, IconService, IconSizeNotFoundError }; //# sourceMappingURL=carbon-components-angular-icon.js.map","map":null,"metadata":{},"sourceType":"module"}