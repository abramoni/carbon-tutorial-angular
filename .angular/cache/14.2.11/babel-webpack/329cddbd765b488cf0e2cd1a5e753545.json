{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-context-menu.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { Component, HostBinding, Injectable, EventEmitter, Input, Output, ElementRef, HostListener, ContentChild, Optional, NgModule } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'carbon-components-angular/icon';\nconst _c0 = [\"*\"];\nconst _c1 = \"[_nghost-%COMP%] {\\n\\t\\t\\tdisplay: list-item;\\n\\t\\t\\tlist-style: none;\\n\\t\\t}\";\n\nconst _c2 = function (a0, a1, a2, a3) {\n  return {\n    \"bx--context-menu--root\": a0,\n    \"bx--menu--root\": a1,\n    \"bx--context-menu--open\": a2,\n    \"bx--menu--open\": a3\n  };\n};\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"left.px\": a0,\n    \"top.px\": a1\n  };\n};\n\nfunction ContextMenuItemComponent__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 7);\n  }\n}\n\nfunction ContextMenuItemComponent__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ibmIcon\", ctx_r1.icon);\n  }\n}\n\nfunction ContextMenuItemComponent__svg_svg_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 9);\n  }\n}\n\nlet ContextMenuDividerComponent = /*#__PURE__*/(() => {\n  class ContextMenuDividerComponent {\n    constructor() {\n      this.dividerContextClass = true; // deprecated\n\n      this.dividerClass = true;\n      this.role = \"separator\";\n    }\n\n  }\n\n  ContextMenuDividerComponent.ɵfac = function ContextMenuDividerComponent_Factory(t) {\n    return new (t || ContextMenuDividerComponent)();\n  };\n\n  ContextMenuDividerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContextMenuDividerComponent,\n    selectors: [[\"ibm-context-menu-divider\"]],\n    hostVars: 5,\n    hostBindings: function ContextMenuDividerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role);\n        ɵngcc0.ɵɵclassProp(\"bx--context-menu-divider\", ctx.dividerContextClass)(\"bx--menu-divider\", ctx.dividerClass);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function ContextMenuDividerComponent_Template(rf, ctx) {},\n    styles: [_c1]\n  });\n  return ContextMenuDividerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContextMenuSelectionService = /*#__PURE__*/(() => {\n  class ContextMenuSelectionService {\n    constructor() {\n      this.selectionSubject = new ReplaySubject(1);\n      this.value = [];\n      this.selectionObservable = this.selectionSubject.asObservable();\n    }\n\n    selectRadio(value) {\n      if (!value) {\n        return;\n      }\n\n      this.selectionSubject.next(value);\n      this.value = [value];\n    }\n\n    selectCheckbox(value) {\n      if (!value) {\n        return;\n      }\n\n      if (this.value.includes(value)) {\n        this.value = this.value.filter(v => v !== value);\n      } else {\n        this.value.push(value);\n      }\n\n      this.selectionSubject.next(this.value);\n    }\n\n    selectCheckboxes(value) {\n      if (!value) {\n        return;\n      }\n\n      this.value = value;\n      this.selectionSubject.next(value);\n    }\n\n  }\n\n  ContextMenuSelectionService.ɵfac = function ContextMenuSelectionService_Factory(t) {\n    return new (t || ContextMenuSelectionService)();\n  };\n\n  ContextMenuSelectionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ContextMenuSelectionService,\n    factory: ContextMenuSelectionService.ɵfac\n  });\n  /** @nocollapse */\n\n  return ContextMenuSelectionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContextMenuGroupComponent = /*#__PURE__*/(() => {\n  class ContextMenuGroupComponent {\n    constructor(contextMenuSelectionService) {\n      this.contextMenuSelectionService = contextMenuSelectionService;\n      this.role = \"none\";\n      this.label = null;\n      this.value = [];\n      this.type = null;\n      this.valueChange = new EventEmitter();\n      this.subscription = new Subscription();\n    }\n\n    ngOnInit() {\n      const {\n        selectionObservable\n      } = this.contextMenuSelectionService;\n      const subscription = selectionObservable.subscribe(value => {\n        this.valueChange.emit(value);\n      });\n      this.subscription.add(subscription);\n    }\n\n    ngOnChanges(changes) {\n      if (changes.value) {\n        if (this.type === \"radio\") {\n          this.contextMenuSelectionService.selectRadio(changes.value.currentValue);\n        }\n\n        if (this.type === \"checkbox\") {\n          this.contextMenuSelectionService.selectCheckboxes(changes.value.currentValue);\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  ContextMenuGroupComponent.ɵfac = function ContextMenuGroupComponent_Factory(t) {\n    return new (t || ContextMenuGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ContextMenuSelectionService));\n  };\n\n  ContextMenuGroupComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContextMenuGroupComponent,\n    selectors: [[\"ibm-context-menu-group\"]],\n    hostVars: 1,\n    hostBindings: function ContextMenuGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      label: \"label\",\n      value: \"value\",\n      type: \"type\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ContextMenuSelectionService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[\"role\", \"group\"]],\n    template: function ContextMenuGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.label);\n      }\n    },\n    styles: [_c1]\n  });\n  /** @nocollapse */\n\n  return ContextMenuGroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContextMenuComponent = /*#__PURE__*/(() => {\n  class ContextMenuComponent {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      /**\n       * @deprecated since v4 - In v5, you will not have to specify root\n       */\n\n      this.root = true;\n      this.open = false;\n      this.position = {\n        left: 0,\n        top: 0\n      };\n    }\n\n    ngOnChanges(changes) {\n      if (changes.open && changes.open.currentValue) {\n        this.focusMenu();\n      }\n    }\n\n    focusMenu() {\n      // wait until the next tick to let the DOM settle before changing the focus\n      const list = this.elementRef.nativeElement.querySelector(\"ul\");\n      setTimeout(() => {\n        if (this.root) {\n          list.focus();\n        } else {\n          const firstOption = list.querySelector(\".bx--context-menu-option, .bx--menu-option\");\n          firstOption.focus();\n        }\n      });\n    }\n\n    handleNavigation(event) {\n      const list = this.elementRef.nativeElement.querySelector(\"ul\");\n      const subMenus = Array.from(list.querySelectorAll(\"ul[role=menu]\"));\n      const menuItems = Array.from(list.querySelectorAll(\".bx--context-menu-option, .bx--menu-option\")).filter(menuItem => !subMenus.some(subMenu => subMenu.contains(menuItem)));\n      const currentIndex = menuItems.findIndex(menuItem => parseInt(menuItem.getAttribute(\"tabindex\"), 10) === 0);\n      const currentMenuItem = menuItems[currentIndex];\n\n      switch (event.key) {\n        case \"ArrowDown\":\n          {\n            if (document.activeElement === list) {\n              menuItems[0].focus();\n            } else {\n              if (currentIndex !== -1 && currentIndex < menuItems.length - 1) {\n                menuItems[currentIndex + 1].focus();\n              }\n            }\n\n            break;\n          }\n\n        case \"ArrowUp\":\n          {\n            if (document.activeElement === list) {\n              menuItems[menuItems.length - 1].focus();\n            } else {\n              if (currentIndex !== -1 && currentIndex > 0) {\n                menuItems[currentIndex - 1].focus();\n              }\n            }\n\n            break;\n          }\n\n        case \"ArrowRight\":\n          {\n            if (currentIndex !== -1 && subMenus.some(subMenu => currentMenuItem.contains(subMenu))) {\n              currentMenuItem.click();\n            }\n\n            break;\n          }\n\n        case \"ArrowLeft\":\n          {\n            const parent = currentMenuItem.parentElement.closest(\".bx--context-menu-option, .bx--menu-option\");\n\n            if (parent) {\n              parent.focus();\n            }\n\n            break;\n          }\n      }\n    }\n\n    getDimensions() {\n      const element = this.elementRef.nativeElement.querySelector(\"ul\");\n      return element.getBoundingClientRect();\n    }\n\n  }\n\n  ContextMenuComponent.ɵfac = function ContextMenuComponent_Factory(t) {\n    return new (t || ContextMenuComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ContextMenuComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContextMenuComponent,\n    selectors: [[\"ibm-context-menu\"]],\n    hostBindings: function ContextMenuComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ContextMenuComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleNavigation($event);\n        });\n      }\n    },\n    inputs: {\n      root: \"root\",\n      open: \"open\",\n      position: \"position\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 10,\n    consts: [[\"role\", \"menu\", \"tabindex\", \"-1\", 1, \"bx--context-menu\", \"bx--menu\", 3, \"ngClass\", \"ngStyle\"]],\n    template: function ContextMenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(2, _c2, ctx.root, ctx.root, ctx.open, ctx.open))(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(7, _c3, ctx.position.left, ctx.position.top));\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgStyle],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return ContextMenuComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContextMenuItemComponent = /*#__PURE__*/(() => {\n  class ContextMenuItemComponent {\n    constructor(elementRef, contextMenuSelectionService) {\n      this.elementRef = elementRef;\n      this.contextMenuSelectionService = contextMenuSelectionService;\n      this.optionContextClass = true; // deprecated\n\n      this.optionClass = true;\n      this.role = \"menuitem\";\n      this.tabindex = -1;\n      this.ariaHasPopup = null;\n      this.ariaExpanded = null;\n      this.label = \"\";\n      this.info = \"\";\n      this.type = null;\n      this.checked = false;\n      this.icon = \"\";\n      this.value = \"\";\n      this.checkedChange = new EventEmitter();\n      this.hasChildren = false;\n      this.selectable = false;\n      this.subscriptions = new Subscription();\n    }\n\n    ngOnInit() {\n      switch (this.type) {\n        case \"checkbox\":\n          {\n            this.role = \"menuitemcheckbox\";\n            this.selectable = true;\n            break;\n          }\n\n        case \"radio\":\n          {\n            this.role = \"menuitemradio\";\n            this.selectable = true;\n            break;\n          }\n\n        default:\n          {\n            this.role = \"menuitem\";\n          }\n      }\n\n      if (this.type && this.contextMenuSelectionService && this.value) {\n        const {\n          selectionObservable\n        } = this.contextMenuSelectionService;\n        const subscription = selectionObservable.subscribe(value => {\n          if (this.type === \"radio\") {\n            this.handleSelection(value === this.value);\n          }\n\n          if (this.type === \"checkbox\") {\n            this.handleSelection(value.includes(this.value));\n          }\n        });\n        this.subscriptions.add(subscription);\n      }\n    }\n\n    ngAfterContentInit() {\n      if (this.childContextMenu) {\n        this.hasChildren = true;\n        this.ariaHasPopup = true;\n        this.ariaExpanded = false;\n        this.childContextMenu.root = false;\n      }\n    }\n\n    handleClick(event) {\n      event.stopPropagation();\n\n      if (this.hasChildren) {\n        this.openSubMenu();\n        this.childContextMenu.focusMenu();\n      }\n\n      if (this.type) {\n        this.handleSelection(!this.checked);\n      }\n\n      if (this.contextMenuSelectionService) {\n        if (this.type === \"radio\") {\n          this.contextMenuSelectionService.selectRadio(this.value);\n        }\n\n        if (this.type === \"checkbox\") {\n          this.contextMenuSelectionService.selectCheckbox(this.value);\n        }\n      }\n    }\n\n    handleSelection(selected) {\n      this.checked = selected;\n      this.checkedChange.emit(this.checked);\n    }\n\n    openSubMenu() {\n      if (this.childContextMenu) {\n        this.childContextMenu.open = true;\n        this.ariaExpanded = true;\n        const dimensions = this.getDimensions();\n        this.childContextMenu.position.left = dimensions.left + dimensions.width; // subtract 4px to account for margins\n\n        this.childContextMenu.position.top = dimensions.top - 4;\n      }\n    }\n\n    closeSubMenu() {\n      if (this.childContextMenu) {\n        this.childContextMenu.open = false;\n        this.ariaExpanded = false;\n      }\n    }\n\n    handleMouseOver() {\n      this.openSubMenu();\n    }\n\n    handleMouseOut() {\n      this.closeSubMenu();\n    }\n\n    handleFocus() {\n      this.tabindex = 0;\n\n      if (this.hasChildren && this.ariaExpanded) {\n        this.closeSubMenu();\n      }\n    }\n\n    handleBlur() {\n      this.tabindex = -1;\n    }\n\n    focusItem() {\n      this.elementRef.nativeElement.focus();\n    }\n\n    getDimensions() {\n      const element = this.elementRef.nativeElement.querySelector(\".bx--context-menu-option__content, .bx--menu-option__content\");\n      return element.getBoundingClientRect();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n\n  }\n\n  ContextMenuItemComponent.ɵfac = function ContextMenuItemComponent_Factory(t) {\n    return new (t || ContextMenuItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ContextMenuSelectionService, 8));\n  };\n\n  ContextMenuItemComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContextMenuItemComponent,\n    selectors: [[\"ibm-context-menu-item\"]],\n    contentQueries: function ContextMenuItemComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ContextMenuComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childContextMenu = _t.first);\n      }\n    },\n    hostVars: 8,\n    hostBindings: function ContextMenuItemComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown.enter\", function ContextMenuItemComponent_keydown_enter_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        })(\"keydown.space\", function ContextMenuItemComponent_keydown_space_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        })(\"click\", function ContextMenuItemComponent_click_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        })(\"mouseover\", function ContextMenuItemComponent_mouseover_HostBindingHandler() {\n          return ctx.handleMouseOver();\n        })(\"mouseout\", function ContextMenuItemComponent_mouseout_HostBindingHandler() {\n          return ctx.handleMouseOut();\n        })(\"focus\", function ContextMenuItemComponent_focus_HostBindingHandler() {\n          return ctx.handleFocus();\n        })(\"blur\", function ContextMenuItemComponent_blur_HostBindingHandler() {\n          return ctx.handleBlur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabindex)(\"aria-haspopup\", ctx.ariaHasPopup)(\"aria-expanded\", ctx.ariaExpanded);\n        ɵngcc0.ɵɵclassProp(\"bx--context-menu-option\", ctx.optionContextClass)(\"bx--menu-option\", ctx.optionClass);\n      }\n    },\n    inputs: {\n      label: \"label\",\n      info: \"info\",\n      type: \"type\",\n      checked: \"checked\",\n      icon: \"icon\",\n      value: \"value\"\n    },\n    outputs: {\n      checkedChange: \"checkedChange\"\n    },\n    ngContentSelectors: _c0,\n    decls: 10,\n    vars: 6,\n    consts: [[1, \"bx--context-menu-option__content\", \"bx--menu-option__content\"], [1, \"bx--context-menu-option__icon\", \"bx--menu-option__icon\"], [\"ibmIcon\", \"checkmark\", \"size\", \"16\", 4, \"ngIf\"], [\"size\", \"16\", 3, \"ibmIcon\", 4, \"ngIf\"], [1, \"bx--context-menu-option__label\", \"bx--menu-option__label\", 3, \"title\"], [1, \"bx--context-menu-option__info\", \"bx--menu-option__info\"], [\"ibmIcon\", \"caret--right\", \"size\", \"16\", 4, \"ngIf\"], [\"ibmIcon\", \"checkmark\", \"size\", \"16\"], [\"size\", \"16\", 3, \"ibmIcon\"], [\"ibmIcon\", \"caret--right\", \"size\", \"16\"]],\n    template: function ContextMenuItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, ContextMenuItemComponent__svg_svg_2_Template, 1, 0, \"svg\", 2);\n        ɵngcc0.ɵɵtemplate(3, ContextMenuItemComponent__svg_svg_3_Template, 1, 1, \"svg\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"span\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵtext(7);\n        ɵngcc0.ɵɵtemplate(8, ContextMenuItemComponent__svg_svg_8_Template, 1, 0, \"svg\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵprojection(9);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selectable && ctx.checked);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.selectable && ctx.icon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"title\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.info, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasChildren);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc2.IconDirective],\n    styles: [_c1]\n  });\n  /** @nocollapse */\n\n  return ContextMenuItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContextMenuModule = /*#__PURE__*/(() => {\n  class ContextMenuModule {}\n\n  ContextMenuModule.ɵfac = function ContextMenuModule_Factory(t) {\n    return new (t || ContextMenuModule)();\n  };\n\n  ContextMenuModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ContextMenuModule\n  });\n  ContextMenuModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule]\n  });\n  return ContextMenuModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContextMenuModule, {\n    declarations: function () {\n      return [ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuComponent];\n    },\n    imports: function () {\n      return [CommonModule, IconModule];\n    },\n    exports: function () {\n      return [ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ContextMenuSelectionService as ɵa, ContextMenuModule, ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuComponent }; //# sourceMappingURL=carbon-components-angular-context-menu.js.map","map":null,"metadata":{},"sourceType":"module"}