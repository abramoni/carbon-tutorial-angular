{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-modal.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { tap, delay } from 'rxjs/operators';\nimport { cycleTabs, getFocusElementList } from 'carbon-components-angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ButtonModule } from 'carbon-components-angular/forms';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport { PlaceholderService, PlaceholderModule } from 'carbon-components-angular/placeholder';\nimport { ExperimentalModule } from 'carbon-components-angular/experimental';\nimport { Output, EventEmitter, Input, Directive, Component, Inject, ViewChild, Optional, ComponentFactoryResolver, Injector, Injectable, HostListener, Renderer2, HostBinding, NgModule } from '@angular/core';\nimport { IconModule } from 'carbon-components-angular/icon';\n/**\n * Extend `BaseModal` in your custom modal implementations to ensure consistent close behavior.\n *\n * `ModalService` depends on the `close` event to correctly clean up the component.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'carbon-components-angular/forms';\nimport * as ɵngcc3 from 'carbon-components-angular/i18n';\nimport * as ɵngcc4 from 'carbon-components-angular/icon';\nimport * as ɵngcc5 from 'carbon-components-angular/placeholder';\nconst _c0 = [\"modalContent\"];\n\nfunction AlertModal_ibm_modal_footer_9_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function AlertModal_ibm_modal_footer_9_ng_container_1_Template_button_click_1_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r5.buttonClicked(i_r4));\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const button_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ibmButton\", button_r3.type)(\"id\", button_r3.id);\n    ɵngcc0.ɵɵattribute(\"modal-primary-focus\", button_r3.type.indexOf(\"primary\") !== -1 ? \"\" : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", button_r3.text, \" \");\n  }\n}\n\nfunction AlertModal_ibm_modal_footer_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ibm-modal-footer\");\n    ɵngcc0.ɵɵtemplate(1, AlertModal_ibm_modal_footer_9_ng_container_1_Template, 3, 4, \"ng-container\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.buttons);\n  }\n}\n\nconst _c1 = [\"*\"];\n\nfunction ModalHeader_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function ModalHeader_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1.onClose());\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(3, \"svg\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.closeLabel);\n  }\n}\n\nconst _c2 = [\"modal\"];\n\nfunction Modal_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n  }\n}\n\nconst _c3 = function (a0, a1, a2, a3) {\n  return {\n    \"bx--modal-container--xs\": a0,\n    \"bx--modal-container--sm\": a1,\n    \"bx--modal-container--md\": a2,\n    \"bx--modal-container--lg\": a3\n  };\n};\n\nconst _c4 = [\"overlay\"];\n\nconst _c5 = function (a0, a1) {\n  return {\n    \"bx--modal--danger\": a0,\n    \"is-visible\": a1\n  };\n};\n\nlet BaseModal = /*#__PURE__*/(() => {\n  class BaseModal {\n    constructor() {\n      /**\n       * Base event emitter to propagate close events\n       */\n      this.close = new EventEmitter();\n      /**\n       * Controls the open state of the modal\n       */\n\n      this.open = false;\n    }\n    /**\n     * Default method to handle closing the modal\n     */\n\n\n    closeModal() {\n      this.close.emit();\n    }\n\n  }\n\n  BaseModal.ɵfac = function BaseModal_Factory(t) {\n    return new (t || BaseModal)();\n  };\n\n  BaseModal.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BaseModal,\n    selectors: [[\"\", \"ibmBaseModal\", \"\"]],\n    inputs: {\n      open: \"open\"\n    },\n    outputs: {\n      close: \"close\"\n    }\n  });\n  return BaseModal;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Component to create standard modals for presenting content or asking for user's input.\n * It can show as a passive modal showing only text or show as a transactional modal with\n * multiple buttons for different actions for the user to choose from.\n *\n * Using a modal in your application requires `ibm-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n * ```html\n * <ibm-placeholder></ibm-placeholder>\n * ```\n *\n * Example of opening the modal:\n *\n * ```typescript\n * \\@Component({\n *  selector: \"app-modal-demo\",\n *  template: `\n *   <button class=\"btn--primary\" (click)=\"openModal()\">Open modal</button>\n *   <ibm-placeholder></ibm-placeholder>`\n * })\n * export class ModalDemo {\n * \topenModal() {\n * \t\tthis.modalService.show({\n *\t\t\tmodalType: \"default\",\n *\t\t\tlabel: \"optional header text\",\n *\t\t\ttitle: \"Modal title\",\n *\t\t\ttext: \"Modal text\",\n *\t\t\tbuttons: [{\n *\t\t\t\ttext: \"Button text\",\n *\t\t\t\ttype: \"primary\",\n *\t\t\t\tclick: clickFunction\n *\t\t\t}]\n *\t\t});\n * \t}\n * }\n * ```\n */\n\n\nlet AlertModal = /*#__PURE__*/(() => {\n  class AlertModal extends BaseModal {\n    /**\n     * Creates an instance of `AlertModal`.\n     */\n    constructor(type = \"default\", label, title, content, size, hasScrollingContent = null, buttons = [], onClose, showCloseButton = true) {\n      super();\n      this.type = type;\n      this.label = label;\n      this.title = title;\n      this.content = content;\n      this.size = size;\n      this.hasScrollingContent = hasScrollingContent;\n      this.buttons = buttons;\n      this.onClose = onClose;\n      this.showCloseButton = showCloseButton;\n\n      for (let i = 0; i < this.buttons.length; i++) {\n        const button = this.buttons[i];\n\n        if (!button.id) {\n          button.id = `alert-modal-button-${i}`;\n        }\n\n        if (!button.type) {\n          button.type = \"secondary\";\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      if (!this.modalContent) {\n        return false;\n      }\n\n      const element = this.modalContent.nativeElement;\n\n      if (element.scrollHeight > element.clientHeight) {\n        element.tabIndex = 0;\n      } else {\n        element.tabIndex = -1;\n      }\n    }\n\n    buttonClicked(buttonIndex) {\n      const button = this.buttons[buttonIndex];\n\n      if (button.click) {\n        button.click();\n      }\n\n      this.closeModal();\n    }\n\n    dismissModal(trigger) {\n      if (this.onClose && this.onClose(trigger) === false) {\n        return;\n      }\n\n      this.closeModal();\n    }\n\n  }\n\n  AlertModal.ɵfac = function AlertModal_Factory(t) {\n    return new (t || AlertModal)(ɵngcc0.ɵɵdirectiveInject(\"type\", 8), ɵngcc0.ɵɵdirectiveInject(\"label\", 8), ɵngcc0.ɵɵdirectiveInject(\"title\", 8), ɵngcc0.ɵɵdirectiveInject(\"content\", 8), ɵngcc0.ɵɵdirectiveInject(\"size\", 8), ɵngcc0.ɵɵdirectiveInject(\"hasScrollingContent\", 8), ɵngcc0.ɵɵdirectiveInject(\"buttons\", 8), ɵngcc0.ɵɵdirectiveInject(\"close\", 8), ɵngcc0.ɵɵdirectiveInject(\"showCloseButton\", 8));\n  };\n\n  AlertModal.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AlertModal,\n    selectors: [[\"ibm-alert-modal\"]],\n    viewQuery: function AlertModal_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalContent = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 10,\n    consts: [[3, \"size\", \"theme\", \"ariaLabel\", \"hasScrollingContent\", \"open\", \"overlaySelected\"], [3, \"showCloseButton\", \"closeSelect\"], [\"ibmModalHeaderLabel\", \"\", 1, \"bx--type-delta\"], [\"ibmModalHeaderHeading\", \"\", 1, \"bx--type-beta\"], [\"ibmModalContent\", \"\"], [\"modalContent\", \"\"], [3, \"innerHTML\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ibmButton\", \"id\", \"click\"]],\n    template: function AlertModal_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ibm-modal\", 0);\n        ɵngcc0.ɵɵlistener(\"overlaySelected\", function AlertModal_Template_ibm_modal_overlaySelected_0_listener() {\n          return ctx.dismissModal(\"overlay\");\n        });\n        ɵngcc0.ɵɵelementStart(1, \"ibm-modal-header\", 1);\n        ɵngcc0.ɵɵlistener(\"closeSelect\", function AlertModal_Template_ibm_modal_header_closeSelect_1_listener() {\n          return ctx.dismissModal(\"close\");\n        });\n        ɵngcc0.ɵɵelementStart(2, \"p\", 2);\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"p\", 3);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 4, 5);\n        ɵngcc0.ɵɵelement(8, \"p\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, AlertModal_ibm_modal_footer_9_Template, 2, 1, \"ibm-modal-footer\", 7);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"size\", ctx.size)(\"theme\", ctx.type)(\"ariaLabel\", ctx.title)(\"hasScrollingContent\", ctx.hasScrollingContent)(\"open\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"showCloseButton\", ctx.showCloseButton);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.title);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.content, ɵngcc0.ɵɵsanitizeHtml);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.buttons.length > 0);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.Button, Modal, ModalHeader, ModalFooter, ModalContent, ModalHeaderHeading, ModalHeaderLabel];\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return AlertModal;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AlertModalType = /*#__PURE__*/(() => {\n  (function (AlertModalType) {\n    AlertModalType[\"default\"] = \"default\";\n    AlertModalType[\"danger\"] = \"danger\";\n  })(AlertModalType || (AlertModalType = {}));\n\n  return AlertModalType;\n})();\nvar ModalButtonType = /*#__PURE__*/(() => {\n  (function (ModalButtonType) {\n    ModalButtonType[\"primary\"] = \"primary\";\n    ModalButtonType[\"secondary\"] = \"secondary\";\n    ModalButtonType[\"tertiary\"] = \"tertiary\";\n    ModalButtonType[\"ghost\"] = \"ghost\";\n    ModalButtonType[\"danger\"] = \"danger\";\n    ModalButtonType[\"danger_primary\"] = \"danger--primary\";\n  })(ModalButtonType || (ModalButtonType = {}));\n\n  return ModalButtonType;\n})();\nlet ModalFooter = /*#__PURE__*/(() => {\n  class ModalFooter {}\n\n  ModalFooter.ɵfac = function ModalFooter_Factory(t) {\n    return new (t || ModalFooter)();\n  };\n\n  ModalFooter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ModalFooter,\n    selectors: [[\"ibm-modal-footer\"]],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"bx--modal-footer\"]],\n    template: function ModalFooter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"footer\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ModalFooter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * ***Inputs***\n * ```html\n * <ibm-modal-header>Header text</ibm-modal-header>\n * ```\n *\n * ***Outputs***\n * ```html\n * <ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n * ```\n */\n\n\nlet ModalHeader = /*#__PURE__*/(() => {\n  class ModalHeader {\n    constructor(i18n) {\n      this.i18n = i18n;\n      /**\n       * Sets the style on the modal heading based on its category.\n       */\n\n      this.theme = \"default\";\n      /**\n       * Accessible label for the header close button.\n       * Defaults to the `MODAL.CLOSE` value from the i18n service.\n       */\n\n      this.closeLabel = this.i18n.get().MODAL.CLOSE;\n      /**\n       * Set to `false` to hide the close button.\n       */\n\n      this.showCloseButton = true;\n      /**\n       * To emit the event of clicking on the close icon within the modal.\n       */\n\n      this.closeSelect = new EventEmitter();\n    }\n    /**\n     * Handles click for the close icon button within the `Modal`.\n     */\n\n\n    onClose() {\n      this.closeSelect.emit();\n    }\n\n  }\n\n  ModalHeader.ɵfac = function ModalHeader_Factory(t) {\n    return new (t || ModalHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.I18n));\n  };\n\n  ModalHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ModalHeader,\n    selectors: [[\"ibm-modal-header\"]],\n    inputs: {\n      theme: \"theme\",\n      closeLabel: \"closeLabel\",\n      showCloseButton: \"showCloseButton\"\n    },\n    outputs: {\n      closeSelect: \"closeSelect\"\n    },\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 4,\n    consts: [[\"type\", \"button\", \"class\", \"bx--modal-close\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"bx--modal-close\", 3, \"click\"], [1, \"bx--assistive-text\"], [\"ibmIcon\", \"close\", \"size\", \"20\", 1, \"bx--modal-close__icon\"]],\n    template: function ModalHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"header\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, ModalHeader_button_2_Template, 4, 1, \"button\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMapInterpolate1(\"\", ctx.theme, \" bx--modal-header\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showCloseButton);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc4.IconDirective],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return ModalHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Modal service handles instantiating and destroying modal instances.\n * Uses PlaceholderService to track open instances, and for it's placeholder view reference.\n */\n\n\nlet ModalService = /*#__PURE__*/(() => {\n  class ModalService {\n    /**\n     * Creates an instance of `ModalService`.\n     */\n    constructor(resolver, placeholderService) {\n      this.resolver = resolver;\n      this.placeholderService = placeholderService;\n    }\n    /**\n     * Creates and renders the modal component that is passed in.\n     * `inputs` is an optional parameter of `data` that can be passed to the `Modal` component.\n     */\n\n\n    create(data) {\n      let defaults = {\n        inputs: {}\n      };\n      data = Object.assign({}, defaults, data);\n      const inputProviders = Object.keys(data.inputs).map(inputName => ({\n        provide: inputName,\n        useValue: data.inputs[inputName]\n      }));\n      const injector = Injector.create(inputProviders);\n      const factory = this.resolver.resolveComponentFactory(data.component);\n      let focusedElement = document.activeElement;\n      let component = this.placeholderService.createComponent(factory, injector);\n      setTimeout(() => {\n        component.instance.open = true;\n      });\n      component[\"previouslyFocusedElement\"] = focusedElement; // used to return focus to previously focused element\n\n      component.instance.close.pipe( // trigger the close animation\n      tap(() => {\n        component.instance.open = false;\n      }), // delay closing by an arbitrary amount to allow the animation to finish\n      delay(150)).subscribe(() => {\n        this.placeholderService.destroyComponent(component); // filter out our component\n\n        ModalService.modalList = ModalService.modalList.filter(c => c !== component);\n      });\n      component.onDestroy(() => {\n        focusedElement.focus();\n      });\n      ModalService.modalList.push(component);\n      return component;\n    }\n    /**\n     * Creates and renders a new alert modal component.\n     * @param data You can pass in:\n     * `type` - \"default\" | \"danger\" = \"default\",\n     * `label` - a label shown over the title,\n     * `title` - modal's title,\n     * `content` - modal's content, could include HTML tags.\n     * `buttons` is an array of objects\n     * `close` custom close function\n     * ```\n     * {\n     * \t\ttext: \"Button text\",\n     * \t\ttype: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\" | \"danger--primary\" = \"primary\",\n     * \t\tclick: clickFunction,\n     * }\n     * ```\n     */\n\n\n    show(data) {\n      return this.create({\n        component: AlertModal,\n        inputs: {\n          type: data.type,\n          label: data.label,\n          title: data.title,\n          content: data.content,\n          hasScrollingContent: data.hasScrollingContent || null,\n          size: data.size,\n          buttons: data.buttons || [],\n          close: data.close || (() => {}),\n          showCloseButton: data.showCloseButton\n        }\n      });\n    }\n    /**\n     * Destroys the modal on the supplied index.\n     * When called without parameters it destroys the most recently created/top most modal.\n     */\n\n\n    destroy(index = -1) {\n      // return if nothing to destroy because it's already destroyed\n      if (index >= ModalService.modalList.length || ModalService.modalList.length === 0) {\n        return;\n      } // on negative index destroy the last on the list (top modal)\n\n\n      if (index < 0) {\n        index = ModalService.modalList.length - 1;\n      }\n\n      this.placeholderService.destroyComponent(ModalService.modalList[index]);\n      ModalService.modalList.splice(index, 1);\n    }\n\n  }\n\n  ModalService.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc5.PlaceholderService));\n  };\n\n  ModalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac\n  }); // track all our open modals\n\n  ModalService.modalList = [];\n  /** @nocollapse */\n\n  return ModalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Component to create modals for presenting content.\n *\n * [See demo](../../?path=/story/components-modal--basic)\n *\n * Using a modal in your application requires `ibm-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n```html\n<ibm-placeholder></ibm-placeholder>\n```\n *\n * A more complete example for `Modal` is given as follows:\n *\n * Example modal definition:\n *\n```typescript\n@Component({\n    selector: \"app-sample-modal\",\n    template: `\n                <ibm-modal size=\"xl\" (overlaySelected)=\"closeModal()\">\n                    <ibm-modal-header (closeSelect)=\"closeModal()\">Header text</ibm-modal-header>\n                        <section class=\"modal-body\">\n                            <h1>Sample modal works.</h1>\n                            <button class=\"btn--icon-link\" nPopover=\"Hello there\" title=\"Popover title\" placement=\"right\" appendInline=\"true\">\n                                <svg ibmIcon=\"info\" size=\"sm\"></svg>\n                            </button>\n                            {{modalText}}\n                        </section>\n                    <ibm-modal-footer><button ibmButton=\"primary\" (click)=\"closeModal()\">Close</button></ibm-modal-footer>\n                </ibm-modal>`,\n    styleUrls: [\"./sample-modal.component.scss\"]\n})\nexport class SampleModal extends BaseModal {\n    modalText: string;\n    constructor(protected injector: Injector) {\n        super();\n        this.modalText = this.injector.get(\"modalText\");\n    }\n}\n```\n *\n * Example of opening the modal:\n *\n```typescript\n@Component({\n    selector: \"app-modal-demo\",\n    template: `\n                <button ibmButton=\"primary\" (click)=\"openModal('drill')\">Drill-down modal</button>\n                <ibm-placeholder></ibm-placeholder>`\n})\nexport class ModalDemo {\n    openModal() {\n        this.modalService.create({component: SampleModal, inputs: {modalText: \"Hello universe.\"}});\n    }\n}\n```\n *\n * <example-url>../../iframe.html?id=components-modal--basic</example-url>\n */\n\n\nlet Modal = /*#__PURE__*/(() => {\n  class Modal {\n    /**\n     * Creates an instance of `Modal`.\n     */\n    constructor(modalService, document, renderer) {\n      this.modalService = modalService;\n      this.document = document;\n      this.renderer = renderer;\n      /**\n       * Size of the modal to display.\n       */\n\n      this.size = \"md\";\n      /**\n       * Classification of the modal.\n       */\n\n      this.theme = \"default\";\n      this.ariaLabel = \"default\";\n      /**\n       * Controls the visibility of the modal when used directly in a template\n       */\n\n      this.open = false;\n      /**\n       * Specify whether the modal contains scrolling content. This property overrides the automatic\n       * detection of the existence of scrolling content. Set this property to `true` to force\n       * overflow indicator to show up or to `false` to force overflow indicator to disappear.\n       * It is set to `null` by default which indicates not to override automatic detection.\n       */\n\n      this.hasScrollingContent = null;\n      /**\n       * Emits event when click occurs within `n-overlay` element. This is to track click events occurring outside bounds of the `Modal` object.\n       */\n\n      this.overlaySelected = new EventEmitter();\n      /**\n       * To emit the closing event of the modal window.\n       */\n\n      this.close = new EventEmitter();\n      /**\n       * An element should have 'modal-primary-focus' as an attribute to receive initial focus within the `Modal` component.\n       */\n\n      this.selectorPrimaryFocus = \"[modal-primary-focus]\";\n    }\n    /**\n     * Label for the modal.\n     *\n     * @deprecated since v4\n     */\n\n\n    set modalLabel(value) {\n      this.ariaLabel = value;\n    }\n\n    get modalLabel() {\n      return this.ariaLabel;\n    }\n    /**\n     * This detects whether or not the modal contains scrolling content.\n     *\n     * To force trigger a detection (ie. on window resize), change or reset the value of the modal content.\n     *\n     * Use the `hasScrollingContent` input to manually override the overflow indicator.\n     */\n\n\n    get shouldShowScrollbar() {\n      const modalContent = this.modal ? this.modal.nativeElement.querySelector(\".bx--modal-content\") : null;\n\n      if (!modalContent) {\n        return false;\n      } // get rounded value from height to match integer returned from scrollHeight\n\n\n      const modalContentHeight = Math.ceil(modalContent.getBoundingClientRect().height);\n      const modalContentScrollHeight = modalContent.scrollHeight;\n      return modalContentScrollHeight > modalContentHeight;\n    }\n\n    ngOnChanges({\n      open\n    }) {\n      if (open) {\n        if (open.currentValue) {\n          // `100` is just enough time to allow the modal\n          // to become visible, so that we can set focus\n          setTimeout(() => this.focusInitialElement(), 100); // Prevent scrolling on open\n\n          this.renderer.addClass(this.document.body, \"bx--body--with-modal-open\");\n        } else if (!open.currentValue) {\n          // Enable scrolling on close\n          this.renderer.removeClass(this.document.body, \"bx--body--with-modal-open\");\n        } else if (this.trigger) {\n          this.trigger.focus();\n        }\n      }\n    }\n    /**\n     * Set document focus to be on the modal component after it is initialized.\n     */\n\n\n    ngAfterViewInit() {\n      this.focusInitialElement();\n    }\n    /**\n     * Handle keyboard events to close modal and tab through the content within the modal.\n     */\n\n\n    handleKeyboardEvent(event) {\n      switch (event.key) {\n        case \"Escape\":\n          {\n            event.stopImmediatePropagation(); // prevents events being fired for multiple modals if more than 2 open\n\n            this.modalService.destroy(); // destroy top (latest) modal\n\n            this.close.emit();\n            break;\n          }\n\n        case \"Tab\":\n          {\n            cycleTabs(event, this.modal.nativeElement);\n            break;\n          }\n      }\n    } // Remove class preventing scrolling\n\n\n    ngOnDestroy() {\n      this.renderer.removeClass(this.document.body, \"bx--body--with-modal-open\");\n    }\n\n    focusInitialElement() {\n      const primaryFocusElement = this.modal.nativeElement.querySelector(this.selectorPrimaryFocus);\n\n      if (primaryFocusElement && primaryFocusElement.focus) {\n        setTimeout(() => primaryFocusElement.focus());\n      } else if (getFocusElementList(this.modal.nativeElement).length > 0) {\n        setTimeout(() => getFocusElementList(this.modal.nativeElement)[0].focus());\n      } else {\n        setTimeout(() => this.modal.nativeElement.focus());\n      }\n    }\n\n  }\n\n  Modal.ɵfac = function Modal_Factory(t) {\n    return new (t || Modal)(ɵngcc0.ɵɵdirectiveInject(ModalService), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  Modal.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Modal,\n    selectors: [[\"ibm-modal\"]],\n    viewQuery: function Modal_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modal = _t.first);\n      }\n    },\n    hostBindings: function Modal_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function Modal_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        });\n      }\n    },\n    inputs: {\n      size: \"size\",\n      theme: \"theme\",\n      ariaLabel: \"ariaLabel\",\n      open: \"open\",\n      hasScrollingContent: \"hasScrollingContent\",\n      modalLabel: \"modalLabel\",\n      trigger: \"trigger\"\n    },\n    outputs: {\n      overlaySelected: \"overlaySelected\",\n      close: \"close\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 10,\n    consts: [[3, \"theme\", \"open\", \"overlaySelect\"], [\"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"bx--modal-container\", 2, \"z-index\", \"1\", 3, \"ngClass\"], [\"modal\", \"\"], [\"class\", \"bx--modal-content--overflow-indicator\", 4, \"ngIf\"], [1, \"bx--modal-content--overflow-indicator\"]],\n    template: function Modal_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"ibm-overlay\", 0);\n        ɵngcc0.ɵɵlistener(\"overlaySelect\", function Modal_Template_ibm_overlay_overlaySelect_0_listener() {\n          return ctx.overlaySelected.emit();\n        });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵtemplate(4, Modal_div_4_Template, 1, 0, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"theme\", ctx.theme)(\"open\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(5, _c3, ctx.size === \"xs\", ctx.size === \"sm\", ctx.size === \"md\", ctx.size === \"lg\"));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasScrollingContent !== null ? ctx.hasScrollingContent : ctx.shouldShowScrollbar);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc1.NgClass, ɵngcc1.NgIf, Overlay];\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return Modal;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Component for the overlay object that acts as a backdrop to the `Modal` component.\n *\n * The main purpose for this component is to be able to handle click events that fall outside\n * the bounds of the `Modal` component.\n */\n\n\nlet Overlay = /*#__PURE__*/(() => {\n  class Overlay {\n    constructor() {\n      /**\n       * Classification of the modal.\n       */\n      this.theme = \"default\";\n      this.open = false;\n      /**\n       * To emit the event where the user selects the overlay behind the `Modal`.\n       */\n\n      this.overlaySelect = new EventEmitter();\n    }\n    /**\n     * Handles the user clicking on the `Overlay` which resides outside the `Modal` object.\n     */\n\n\n    overlayClick(event) {\n      if (event.target !== this.overlay.nativeElement) {\n        return;\n      }\n\n      event.stopPropagation();\n      this.overlaySelect.emit(event);\n    }\n\n  }\n\n  Overlay.ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)();\n  };\n\n  Overlay.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Overlay,\n    selectors: [[\"ibm-overlay\"]],\n    viewQuery: function Overlay_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlay = _t.first);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      open: \"open\"\n    },\n    outputs: {\n      overlaySelect: \"overlaySelect\"\n    },\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 4,\n    consts: [[1, \"bx--modal\", \"bx--modal-tall\", 3, \"ngClass\", \"click\"], [\"overlay\", \"\"]],\n    template: function Overlay_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"section\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function Overlay_Template_section_click_0_listener($event) {\n          return ctx.overlayClick($event);\n        });\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(1, _c5, ctx.theme === \"danger\", ctx.open));\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    encapsulation: 2\n  });\n  return Overlay;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ModalContent = /*#__PURE__*/(() => {\n  class ModalContent {\n    constructor() {\n      this.modalContentClass = true;\n      /**\n       * Provide whether the modal content has a form element.\n       * If `true` is used here, non-form child content should have `bx--modal-content__regular-content` class.\n       */\n\n      this.hasForm = false;\n    }\n\n  }\n\n  ModalContent.ɵfac = function ModalContent_Factory(t) {\n    return new (t || ModalContent)();\n  };\n\n  ModalContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ModalContent,\n    selectors: [[\"\", \"ibmModalContent\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ModalContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--modal-content\", ctx.modalContentClass)(\"bx--modal-content--with-form\", ctx.hasForm);\n      }\n    },\n    inputs: {\n      hasForm: \"hasForm\"\n    }\n  });\n  return ModalContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ModalContentText = /*#__PURE__*/(() => {\n  class ModalContentText {\n    constructor() {\n      this.modalContentTextClass = true;\n    }\n\n  }\n\n  ModalContentText.ɵfac = function ModalContentText_Factory(t) {\n    return new (t || ModalContentText)();\n  };\n\n  ModalContentText.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ModalContentText,\n    selectors: [[\"\", \"ibmModalContentText\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ModalContentText_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--modal-content__text\", ctx.modalContentTextClass);\n      }\n    }\n  });\n  return ModalContentText;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ModalHeaderHeading = /*#__PURE__*/(() => {\n  class ModalHeaderHeading {\n    constructor() {\n      this.modalHeaderHeadingClass = true;\n    }\n\n  }\n\n  ModalHeaderHeading.ɵfac = function ModalHeaderHeading_Factory(t) {\n    return new (t || ModalHeaderHeading)();\n  };\n\n  ModalHeaderHeading.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ModalHeaderHeading,\n    selectors: [[\"\", \"ibmModalHeaderHeading\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ModalHeaderHeading_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--modal-header__heading\", ctx.modalHeaderHeadingClass);\n      }\n    }\n  });\n  return ModalHeaderHeading;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ModalHeaderLabel = /*#__PURE__*/(() => {\n  class ModalHeaderLabel {\n    constructor() {\n      this.modalHeaderLabelClass = true;\n    }\n\n  }\n\n  ModalHeaderLabel.ɵfac = function ModalHeaderLabel_Factory(t) {\n    return new (t || ModalHeaderLabel)();\n  };\n\n  ModalHeaderLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ModalHeaderLabel,\n    selectors: [[\"\", \"ibmModalHeaderLabel\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ModalHeaderLabel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--modal-header__label\", ctx.modalHeaderLabelClass);\n      }\n    }\n  });\n  return ModalHeaderLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n\n\nlet ModalModule = /*#__PURE__*/(() => {\n  class ModalModule {}\n\n  ModalModule.ɵfac = function ModalModule_Factory(t) {\n    return new (t || ModalModule)();\n  };\n\n  ModalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ModalModule\n  });\n  ModalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ModalService],\n    imports: [CommonModule, ButtonModule, I18nModule, PlaceholderModule, ExperimentalModule, IconModule]\n  });\n  return ModalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ModalModule, {\n    declarations: function () {\n      return [AlertModal, Modal, ModalHeader, ModalFooter, Overlay, ModalContent, ModalContentText, ModalHeaderHeading, ModalHeaderLabel, BaseModal];\n    },\n    imports: function () {\n      return [CommonModule, ButtonModule, I18nModule, PlaceholderModule, ExperimentalModule, IconModule];\n    },\n    exports: function () {\n      return [AlertModal, Modal, ModalHeader, ModalFooter, ModalContent, ModalContentText, ModalHeaderHeading, ModalHeaderLabel, BaseModal];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AlertModal, AlertModalType, ModalButtonType, BaseModal, ModalFooter, ModalHeader, Modal, ModalModule, ModalService, Overlay, ModalContent, ModalContentText, ModalHeaderHeading, ModalHeaderLabel }; //# sourceMappingURL=carbon-components-angular-modal.js.map","map":null,"metadata":{},"sourceType":"module"}