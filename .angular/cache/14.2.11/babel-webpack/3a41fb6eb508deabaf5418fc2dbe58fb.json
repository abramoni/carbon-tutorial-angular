{"ast":null,"code":"import { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag'; //this helper lets you write GraphQL queries using interpolated strings (backticks) in JavaScript.\n//https://www.apollographql.com/tutorials/fullstack-quickstart/08-fetching-data-with-queries\n\nimport { TemplateRef } from '@angular/core';\nimport { TableModel, TableItem } from 'carbon-components-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"carbon-components-angular\";\nconst _c0 = [\"linkTemplate\"];\n\nfunction RepoTableComponent_ng_template_7_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtext(2, \"\\u00A0|\\u00A0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 5);\n    i0.ɵɵtext(4, \"HomePage\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const data_r2 = i0.ɵɵnextContext().data;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"href\", data_r2.homepage, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction RepoTableComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4)(1, \"li\")(2, \"a\", 5);\n    i0.ɵɵtext(3, \"Github\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, RepoTableComponent_ng_template_7_li_4_Template, 5, 1, \"li\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r2 = ctx.data;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"href\", data_r2.github, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", data_r2.homepage);\n  }\n}\n\nexport let RepoTableComponent = /*#__PURE__*/(() => {\n  class RepoTableComponent {\n    constructor(apollo) {\n      this.apollo = apollo;\n      this.model = new TableModel();\n    }\n\n    prepareData(data) {\n      const newData = [];\n\n      for (const datum of data) {\n        console.log(\"entrando\");\n        newData.push([new TableItem({\n          data: datum.name,\n          expandedData: datum.description\n        }), new TableItem({\n          data: new Date(datum.createdAt).toLocaleDateString()\n        }), new TableItem({\n          data: new Date(datum.updatedAt).toLocaleDateString()\n        }), new TableItem({\n          data: datum.issues.totalCount\n        }), new TableItem({\n          data: datum.stargazers.totalCount\n        }), new TableItem({\n          data: {\n            github: datum.url,\n            homepage: datum.homepageUrl\n          },\n          template: this.linkTemplate\n        })]);\n      }\n\n      return newData;\n    }\n\n    ngOnInit() {\n      this.apollo.watchQuery({\n        query: gql`\n    query REPO_QUERY {\n      # Let's use carbon as our organization\n      organization(login: \"carbon-design-system\") {\n        # We'll grab all the repositories in one go. To load more resources\n        # continuously, see the advanced topics.\n        repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n          totalCount\n          nodes {\n            url\n            homepageUrl\n            issues(filterBy: { states: OPEN }) {\n              totalCount\n            }\n            stargazers {\n              totalCount\n            }\n            releases(first: 1) {\n              totalCount\n              nodes {\n                name\n              }\n            }\n            name\n            updatedAt\n            createdAt\n            description\n            id\n          }\n        }\n      }\n    }\n  `\n      }).valueChanges.subscribe(response => {\n        if (response.error) {\n          const errorData = [];\n          errorData.push([new TableItem({\n            data: 'error!'\n          })]);\n          this.model.data = errorData;\n        } else if (response.loading) {// Add loading state\n        } else {\n          // If we're here, we've got our data!\n          this.model.data = this.prepareData(response.data.organization.repositories.nodes);\n        }\n      });\n      /* \t\tthis.model.data = [\n                  [\n                      new TableItem({data: 'Repo 1', expandedData: 'Row description'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: '123'}),\n                      new TableItem({data: '456'}),\n                      new TableItem({data: 'Links'})\n                  ],\n                  [\n                      new TableItem({data: 'Repo 2', expandedData: 'Row description'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: '123'}),\n                      new TableItem({data: '456'}),\n                      new TableItem({data: 'Links'})\n                  ],\n                  [\n                      new TableItem({data: 'Repo 3', expandedData: 'Row description'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: 'Date'}),\n                      new TableItem({data: '123'}),\n                      new TableItem({data: '456'}),\n                      new TableItem({data: 'Links'})\n                  ]\n              ];\n              this.model.header = [\n                  new TableHeaderItem({data: 'Name'}),\n                  new TableHeaderItem({data: 'Created'}),\n                  new TableHeaderItem({data: 'Updated'}),\n                  new TableHeaderItem({data: 'Open Issues'}),\n                  new TableHeaderItem({data: 'Stars'}),\n                  new TableHeaderItem({data: 'Links'})\n              ];*/\n    }\n\n  }\n\n  RepoTableComponent.ɵfac = function RepoTableComponent_Factory(t) {\n    return new (t || RepoTableComponent)(i0.ɵɵdirectiveInject(i1.Apollo));\n  };\n\n  RepoTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RepoTableComponent,\n    selectors: [[\"app-repo-table\"]],\n    viewQuery: function RepoTableComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.linkTemplate = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 3,\n    consts: [[\"ibmTableHeaderTitle\", \"\"], [\"ibmTableHeaderDescription\", \"\"], [3, \"model\", \"showSelectionColumn\", \"striped\"], [\"linkTemplate\", \"\"], [2, \"display\", \"flex\"], [\"ibmLink\", \"\", 3, \"href\"], [4, \"ngIf\"]],\n    template: function RepoTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ibm-table-container\")(1, \"ibm-table-header\")(2, \"h4\", 0);\n        i0.ɵɵtext(3, \"Carbon Repositories\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 1);\n        i0.ɵɵtext(5, \"A collection of public Carbon repositories.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(6, \"ibm-table\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, RepoTableComponent_ng_template_7_Template, 5, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"model\", ctx.model)(\"showSelectionColumn\", false)(\"striped\", false);\n      }\n    },\n    dependencies: [i2.NgIf, i3.TableContainer, i3.TableHeader, i3.TableHeaderTitle, i3.TableHeaderDescription, i3.Table]\n  });\n  return RepoTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}