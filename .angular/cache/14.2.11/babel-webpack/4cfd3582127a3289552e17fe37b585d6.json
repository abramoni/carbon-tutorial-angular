{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-notification.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { of, isObservable } from 'rxjs';\nimport { ButtonModule } from 'carbon-components-angular/button';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, ApplicationRef, Directive, HostBinding, Component, Input, Output, EventEmitter, ViewChild, ComponentFactoryResolver, Injector, NgZone, NgModule } from '@angular/core';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport { ExperimentalModule } from 'carbon-components-angular/experimental';\nimport { LinkModule } from 'carbon-components-angular/link';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'carbon-components-angular/i18n';\nimport * as ɵngcc2 from 'carbon-components-angular/button';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from 'carbon-components-angular/link';\nimport * as ɵngcc5 from 'carbon-components-angular/icon';\nconst _c0 = [\"notification\"];\n\nfunction Notification__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 11);\n  }\n}\n\nfunction Notification__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 12);\n  }\n}\n\nfunction Notification__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 13);\n  }\n}\n\nfunction Notification__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 14);\n  }\n}\n\nfunction Notification_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"p\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r4.notificationObj.title, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Notification_div_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 18);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const link_r10 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"href\", link_r10.href, ɵngcc0.ɵɵsanitizeUrl);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", link_r10.text, \"\");\n  }\n}\n\nfunction Notification_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵelement(1, \"span\", 17);\n    ɵngcc0.ɵɵtemplate(2, Notification_div_7_ng_container_2_Template, 3, 2, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r5.notificationObj.message, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.notificationObj.links);\n  }\n}\n\nfunction Notification_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Notification_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\")(1, \"button\", 19);\n    ɵngcc0.ɵɵlistener(\"click\", function Notification_div_9_Template_button_click_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const action_r11 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r12.onClick(action_r11, $event));\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const action_r11 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", action_r11.text, \" \");\n  }\n}\n\nfunction Notification_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 20);\n    ɵngcc0.ɵɵlistener(\"click\", function Notification_button_10_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r14.onClose());\n    });\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(2, \"svg\", 21);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r8.notificationObj.closeLabel));\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction Toast__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 10);\n  }\n}\n\nfunction Toast__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 11);\n  }\n}\n\nfunction Toast__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 12);\n  }\n}\n\nfunction Toast__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 13);\n  }\n}\n\nfunction Toast_h3_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"h3\", 14);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r4.notificationObj.title, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 18);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const link_r10 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"href\", link_r10.href, ɵngcc0.ɵɵsanitizeUrl);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", link_r10.text, \"\");\n  }\n}\n\nfunction Toast_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵelement(1, \"span\", 16);\n    ɵngcc0.ɵɵtemplate(2, Toast_div_6_ng_container_2_Template, 3, 2, \"ng-container\", 17);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r5.notificationObj.subtitle, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.notificationObj.links);\n  }\n}\n\nfunction Toast_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"p\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r6.notificationObj.caption, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Toast_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 20);\n    ɵngcc0.ɵɵlistener(\"click\", function Toast_button_9_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r11.onClose());\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(1, \"svg\", 21);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r8.notificationObj.closeLabel);\n  }\n}\n\nlet NotificationDisplayService = /*#__PURE__*/(() => {\n  class NotificationDisplayService {\n    constructor(applicationRef) {\n      this.applicationRef = applicationRef;\n    }\n    /**\n     * Programatically closes notification based on `notificationRef`.\t *\n     */\n\n\n    close(notificationRef) {\n      if (notificationRef.hostView) {\n        setTimeout(() => {\n          this.applicationRef.detachView(notificationRef.hostView);\n          notificationRef.destroy();\n        }, 200);\n      }\n    }\n\n  }\n\n  NotificationDisplayService.ɵfac = function NotificationDisplayService_Factory(t) {\n    return new (t || NotificationDisplayService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef));\n  };\n\n  NotificationDisplayService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NotificationDisplayService,\n    factory: NotificationDisplayService.ɵfac\n  });\n  /** @nocollapse */\n\n  return NotificationDisplayService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NotificationSubtitle = /*#__PURE__*/(() => {\n  class NotificationSubtitle {\n    constructor() {\n      this.baseClass = true;\n    }\n\n  }\n\n  NotificationSubtitle.ɵfac = function NotificationSubtitle_Factory(t) {\n    return new (t || NotificationSubtitle)();\n  };\n\n  NotificationSubtitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NotificationSubtitle,\n    selectors: [[\"\", \"ibmNotificationSubtitle\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NotificationSubtitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--inline-notification__subtitle\", ctx.baseClass);\n      }\n    }\n  });\n  return NotificationSubtitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NotificationTitle = /*#__PURE__*/(() => {\n  class NotificationTitle {\n    constructor() {\n      this.baseClass = true;\n    }\n\n  }\n\n  NotificationTitle.ɵfac = function NotificationTitle_Factory(t) {\n    return new (t || NotificationTitle)();\n  };\n\n  NotificationTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NotificationTitle,\n    selectors: [[\"\", \"ibmNotificationTitle\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NotificationTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--inline-notification__title\", ctx.baseClass);\n      }\n    }\n  });\n  return NotificationTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Notification messages are displayed toward the top of the UI and do not interrupt user’s work.\n *\n * [See demo](../../?path=/story/components-notification--basic)\n *\n * <example-url>../../iframe.html?id=components-notification--basic</example-url>\n */\n\n\nlet Notification = /*#__PURE__*/(() => {\n  class Notification {\n    constructor(notificationDisplayService, i18n) {\n      this.notificationDisplayService = notificationDisplayService;\n      this.i18n = i18n;\n      /**\n       * Emits on close.\n       */\n\n      this.close = new EventEmitter();\n      this.notificationID = `notification-${Notification.notificationCount++}`;\n      this.notificationClass = true;\n      this.role = \"alert\";\n      this.defaultNotificationObj = {\n        title: \"\",\n        message: \"\",\n        type: \"info\",\n        showClose: true,\n        closeLabel: this.i18n.get(\"NOTIFICATION.CLOSE_BUTTON\")\n      };\n      this._notificationObj = Object.assign({}, this.defaultNotificationObj);\n    }\n    /**\n     * Can have `type`, `title`, and `message` members.\n     *\n     * `type` can be one of `\"info\"`, `\"warning\"`, `\"error\"`, `\"success\"`\n     *\n     * `message` is the message to display\n     */\n\n\n    get notificationObj() {\n      return this._notificationObj;\n    }\n\n    set notificationObj(obj) {\n      if (obj.closeLabel) {\n        obj.closeLabel = of(obj.closeLabel);\n      }\n\n      this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);\n    }\n\n    get isError() {\n      return this.notificationObj.type === \"error\";\n    }\n\n    get isInfo() {\n      return this.notificationObj.type === \"info\";\n    }\n\n    get isSuccess() {\n      return this.notificationObj.type === \"success\";\n    }\n\n    get isWarning() {\n      return this.notificationObj.type === \"warning\";\n    }\n\n    get isLowContrast() {\n      return this.notificationObj.lowContrast;\n    }\n\n    get isCloseHidden() {\n      return !this._notificationObj.showClose;\n    }\n    /**\n     * Emits close event.\n     */\n\n\n    onClose() {\n      this.close.emit();\n    }\n\n    onClick(action, event) {\n      if (!action.click) {\n        return;\n      }\n\n      if (isObservable(action.click)) {\n        action.click.next({\n          event,\n          action\n        });\n      } else {\n        action.click({\n          event,\n          action\n        });\n      }\n    }\n\n    destroy() {\n      this.notificationDisplayService.close(this);\n    }\n\n  }\n\n  Notification.ɵfac = function Notification_Factory(t) {\n    return new (t || Notification)(ɵngcc0.ɵɵdirectiveInject(NotificationDisplayService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n));\n  };\n\n  Notification.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Notification,\n    selectors: [[\"ibm-notification\"]],\n    viewQuery: function Notification_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.notification = _t.first);\n      }\n    },\n    hostVars: 16,\n    hostBindings: function Notification_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.notificationID)(\"role\", ctx.role);\n        ɵngcc0.ɵɵclassProp(\"bx--inline-notification\", ctx.notificationClass)(\"bx--inline-notification--error\", ctx.isError)(\"bx--inline-notification--info\", ctx.isInfo)(\"bx--inline-notification--success\", ctx.isSuccess)(\"bx--inline-notification--warning\", ctx.isWarning)(\"bx--inline-notification--low-contrast\", ctx.isLowContrast)(\"bx--inline-notification--hide-close-button\", ctx.isCloseHidden);\n      }\n    },\n    inputs: {\n      notificationObj: \"notificationObj\"\n    },\n    outputs: {\n      close: \"close\"\n    },\n    decls: 11,\n    vars: 12,\n    consts: [[1, \"bx--inline-notification__details\"], [\"ibmIcon\", \"error--filled\", \"size\", \"20\", \"class\", \"bx--inline-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"20\", \"class\", \"bx--inline-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"20\", \"class\", \"bx--inline-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"information--filled\", \"size\", \"20\", \"class\", \"bx--inline-notification__icon\", 4, \"ngIf\"], [1, \"bx--inline-notification__text-wrapper\"], [\"ibmNotificationTitle\", \"\", 3, \"innerHTML\", 4, \"ngIf\"], [\"ibmNotificationSubtitle\", \"\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"bx--inline-notification__close-button\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"ibmIcon\", \"error--filled\", \"size\", \"20\", 1, \"bx--inline-notification__icon\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"20\", 1, \"bx--inline-notification__icon\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"20\", 1, \"bx--inline-notification__icon\"], [\"ibmIcon\", \"information--filled\", \"size\", \"20\", 1, \"bx--inline-notification__icon\"], [\"ibmNotificationTitle\", \"\", 3, \"innerHTML\"], [\"ibmNotificationSubtitle\", \"\"], [3, \"innerHTML\"], [\"ibmLink\", \"\", 3, \"href\"], [\"ibmButton\", \"ghost\", \"size\", \"sm\", \"type\", \"button\", 1, \"bx--inline-notification__action-button\", 3, \"click\"], [\"type\", \"button\", 1, \"bx--inline-notification__close-button\", 3, \"click\"], [\"ibmIcon\", \"close\", \"size\", \"16\", 1, \"bx--inline-notification__close-icon\"]],\n    template: function Notification_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, Notification__svg_svg_1_Template, 1, 0, \"svg\", 1);\n        ɵngcc0.ɵɵtemplate(2, Notification__svg_svg_2_Template, 1, 0, \"svg\", 2);\n        ɵngcc0.ɵɵtemplate(3, Notification__svg_svg_3_Template, 1, 0, \"svg\", 3);\n        ɵngcc0.ɵɵtemplate(4, Notification__svg_svg_4_Template, 1, 0, \"svg\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(6, Notification_p_6_Template, 1, 1, \"p\", 6);\n        ɵngcc0.ɵɵtemplate(7, Notification_div_7_Template, 3, 2, \"div\", 7);\n        ɵngcc0.ɵɵtemplate(8, Notification_ng_container_8_Template, 1, 0, \"ng-container\", 8);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(9, Notification_div_9_Template, 3, 1, \"div\", 9);\n        ɵngcc0.ɵɵtemplate(10, Notification_button_10_Template, 3, 3, \"button\", 10);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"warning\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"success\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"info\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.notificationObj.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.notificationObj.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.notificationObj.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(10, _c1, ctx.notificationObj));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.notificationObj.actions);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isCloseHidden);\n      }\n    },\n    dependencies: [ɵngcc2.Button, ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.Link, ɵngcc5.IconDirective, NotificationTitle, NotificationSubtitle, ɵngcc3.AsyncPipe],\n    encapsulation: 2\n  });\n  Notification.notificationCount = 0;\n  /** @nocollapse */\n\n  return Notification;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Toast messages are displayed toward the top of the UI and do not interrupt user’s work.\n *\n * [See demo](../../?path=/story/components-notification--toast)\n *\n * <example-url>../../iframe.html?id=components-notification--toast</example-url>\n */\n\n\nlet Toast = /*#__PURE__*/(() => {\n  class Toast extends Notification {\n    constructor(notificationDisplayService, i18n) {\n      super(notificationDisplayService, i18n);\n      this.notificationDisplayService = notificationDisplayService;\n      this.i18n = i18n;\n      this.toastID = `toast-${Toast.toastCount++}`;\n      this.toastClass = true;\n      this.role = \"alert\"; // disable inline notification styles\n\n      this.notificationClass = false;\n    }\n\n    get isError() {\n      return this.notificationObj[\"type\"] === \"error\";\n    }\n\n    get isInfo() {\n      return this.notificationObj[\"type\"] === \"info\";\n    }\n\n    get isSuccess() {\n      return this.notificationObj[\"type\"] === \"success\";\n    }\n\n    get isWarning() {\n      return this.notificationObj[\"type\"] === \"warning\";\n    }\n\n    get isLowContrast() {\n      return this.notificationObj.lowContrast;\n    }\n\n    ngOnInit() {\n      if (!this.notificationObj.closeLabel) {\n        this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;\n      }\n    }\n\n  }\n\n  Toast.ɵfac = function Toast_Factory(t) {\n    return new (t || Toast)(ɵngcc0.ɵɵdirectiveInject(NotificationDisplayService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n));\n  };\n\n  Toast.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Toast,\n    selectors: [[\"ibm-toast\"]],\n    hostVars: 14,\n    hostBindings: function Toast_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.toastID)(\"role\", ctx.role);\n        ɵngcc0.ɵɵclassProp(\"bx--toast-notification\", ctx.toastClass)(\"bx--toast-notification--error\", ctx.isError)(\"bx--toast-notification--info\", ctx.isInfo)(\"bx--toast-notification--success\", ctx.isSuccess)(\"bx--toast-notification--warning\", ctx.isWarning)(\"bx--toast-notification--low-contrast\", ctx.isLowContrast);\n      }\n    },\n    inputs: {\n      notificationObj: \"notificationObj\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 12,\n    consts: [[\"ibmIcon\", \"error--filled\", \"size\", \"20\", \"class\", \"bx--toast-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"20\", \"class\", \"bx--toast-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"20\", \"class\", \"bx--toast-notification__icon\", 4, \"ngIf\"], [\"ibmIcon\", \"information--filled\", \"size\", \"20\", \"class\", \"bx--toast-notification__icon\", 4, \"ngIf\"], [1, \"bx--toast-notification__details\"], [\"ibmToastTitle\", \"\", 3, \"innerHTML\", 4, \"ngIf\"], [\"ibmToastSubtitle\", \"\", 4, \"ngIf\"], [\"ibmToastCaption\", \"\", 3, \"innerHTML\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"bx--toast-notification__close-button\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"ibmIcon\", \"error--filled\", \"size\", \"20\", 1, \"bx--toast-notification__icon\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"20\", 1, \"bx--toast-notification__icon\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"20\", 1, \"bx--toast-notification__icon\"], [\"ibmIcon\", \"information--filled\", \"size\", \"20\", 1, \"bx--toast-notification__icon\"], [\"ibmToastTitle\", \"\", 3, \"innerHTML\"], [\"ibmToastSubtitle\", \"\"], [3, \"innerHTML\"], [4, \"ngFor\", \"ngForOf\"], [\"ibmLink\", \"\", 3, \"href\"], [\"ibmToastCaption\", \"\", 3, \"innerHTML\"], [\"type\", \"button\", 1, \"bx--toast-notification__close-button\", 3, \"click\"], [\"ibmIcon\", \"close\", \"size\", \"16\", 1, \"bx--toast-notification__close-icon\"]],\n    template: function Toast_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, Toast__svg_svg_0_Template, 1, 0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, Toast__svg_svg_1_Template, 1, 0, \"svg\", 1);\n        ɵngcc0.ɵɵtemplate(2, Toast__svg_svg_2_Template, 1, 0, \"svg\", 2);\n        ɵngcc0.ɵɵtemplate(3, Toast__svg_svg_3_Template, 1, 0, \"svg\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(5, Toast_h3_5_Template, 1, 1, \"h3\", 5);\n        ɵngcc0.ɵɵtemplate(6, Toast_div_6_Template, 3, 2, \"div\", 6);\n        ɵngcc0.ɵɵtemplate(7, Toast_p_7_Template, 1, 1, \"p\", 7);\n        ɵngcc0.ɵɵtemplate(8, Toast_ng_container_8_Template, 1, 0, \"ng-container\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, Toast_button_9_Template, 2, 1, \"button\", 9);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"warning\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"success\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notificationObj.type === \"info\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.notificationObj.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.notificationObj.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.notificationObj.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.notificationObj.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(10, _c1, ctx.notificationObj));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isCloseHidden);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.Link, ɵngcc5.IconDirective, ToastTitle, ToastSubtitle, ToastCaption];\n    },\n    encapsulation: 2\n  });\n  Toast.toastCount = 0;\n  /** @nocollapse */\n\n  return Toast;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToastTitle = /*#__PURE__*/(() => {\n  class ToastTitle {\n    constructor() {\n      this.baseClass = true;\n    }\n\n  }\n\n  ToastTitle.ɵfac = function ToastTitle_Factory(t) {\n    return new (t || ToastTitle)();\n  };\n\n  ToastTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ToastTitle,\n    selectors: [[\"\", \"ibmToastTitle\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ToastTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--toast-notification__title\", ctx.baseClass);\n      }\n    }\n  });\n  return ToastTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToastSubtitle = /*#__PURE__*/(() => {\n  class ToastSubtitle {\n    constructor() {\n      this.baseClass = true;\n    }\n\n  }\n\n  ToastSubtitle.ɵfac = function ToastSubtitle_Factory(t) {\n    return new (t || ToastSubtitle)();\n  };\n\n  ToastSubtitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ToastSubtitle,\n    selectors: [[\"\", \"ibmToastSubtitle\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ToastSubtitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--toast-notification__subtitle\", ctx.baseClass);\n      }\n    }\n  });\n  return ToastSubtitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToastCaption = /*#__PURE__*/(() => {\n  class ToastCaption {\n    constructor() {\n      this.baseClass = true;\n    }\n\n  }\n\n  ToastCaption.ɵfac = function ToastCaption_Factory(t) {\n    return new (t || ToastCaption)();\n  };\n\n  ToastCaption.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ToastCaption,\n    selectors: [[\"\", \"ibmToastCaption\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ToastCaption_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--toast-notification__caption\", ctx.baseClass);\n      }\n    }\n  });\n  return ToastCaption;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a way to use the notification component.\n *\n * Notifications are displayed toward the top of the UI and do not interrupt the user’s work.\n */\n\n\nlet NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    /**\n     * Constructs NotificationService.\n     *\n     * @param injector\n     * @param componentFactoryResolver\n     * @param applicationRef\n     */\n    constructor(injector, componentFactoryResolver, applicationRef, ngZone) {\n      this.injector = injector;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.applicationRef = applicationRef;\n      this.ngZone = ngZone;\n      /**\n       * An array containing `ComponentRef`s to all the notifications this service instance\n       * is responsible for.\n       *\n       */\n\n      this.notificationRefs = new Array();\n      this.onClose = new EventEmitter();\n    }\n    /**\n     * Shows the notification based on the `notificationObj`.\n     *\n     * @param notificationObj Can have `type`, `message`, `target`, `duration` and `smart` members.\n     *\n     * **Members:**\n     *\n     * * `type` can be one of `\"info\"`, `\"warning\"`, `\"danger\"`, `\"success\"`\n     * * `message` is message for notification to display\n     * * `target` is css selector defining an element to append notification to. If not provided,\n     * `showNotification()` creates a place for the notification in `body`\n     * * `duration` is number of ms to close the notification after. If used in combination with `smart`,\n     * it's added to the calculated timeout\n     * * `smart`, set to `true` if you want to use smart notification.\n     *\n     * **Example:**\n     * ```typescript\n     * // Info notification, saying \"Sample message.\" added to the element with id notification-container\n     * // uses smart timeout with added duration of 1 second.\n     * {\n     *\ttype: \"info\",\n     *\tmessage: \"Sample message.\",\n     *\ttarget: \"#notification-container\",\n     *\tduration: 1000,\n     *\tsmart: true\n     * }\n     * ```\n     *\n     * @param [notificationComp=Notification] If provided, used to resolve component factory\n     */\n\n\n    showNotification(notificationObj, notificationComp = Notification) {\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(notificationComp);\n      let notificationRef = componentFactory.create(this.injector);\n      notificationRef.instance.notificationObj = notificationObj; // typescript isn't being very smart here, so we type to any\n\n      this.notificationRefs.push(notificationRef);\n      this.onClose = notificationRef.instance.close;\n      this.applicationRef.attachView(notificationRef.hostView);\n\n      if (notificationObj.target) {\n        document.querySelector(notificationObj.target).appendChild(notificationRef.location.nativeElement);\n      } else {\n        let body = document.querySelector(\"body\"); // get or create a container for alert list\n\n        let notificationClassName = \"notification-overlay\";\n        let notificationList = body.querySelector(`.${notificationClassName}`);\n\n        if (!notificationList) {\n          notificationList = document.createElement(\"div\");\n          notificationList.className = notificationClassName;\n          body.appendChild(notificationList);\n        } // add the notification to the top of the list\n\n\n        if (notificationList.firstChild) {\n          notificationList.insertBefore(notificationRef.location.nativeElement, notificationList.firstChild);\n        } else {\n          notificationList.appendChild(notificationRef.location.nativeElement);\n        }\n      }\n\n      if (notificationObj.duration && notificationObj.duration > 0) {\n        this.ngZone.runOutsideAngular(() => {\n          setTimeout(() => {\n            this.ngZone.run(() => {\n              this.close(notificationRef);\n            });\n          }, notificationObj.duration);\n        });\n      }\n\n      if (notificationObj.smart) {\n        this.ngZone.runOutsideAngular(() => {\n          // let it disappear after calculated timeout\n          setTimeout(() => {\n            this.ngZone.run(() => {\n              this.close(notificationRef);\n            });\n          }, this.getSmartTimeout(notificationObj));\n        });\n      }\n\n      this.onClose.subscribe(() => {\n        this.close(notificationRef);\n      });\n      notificationRef.instance.componentRef = notificationRef;\n      return notificationRef.instance;\n    }\n\n    showToast(notificationObj, notificationComp = Toast) {\n      return this.showNotification(notificationObj, notificationComp);\n    }\n    /**\n     * Programatically closes notification based on `notificationRef`.\n     *\n     * @param notificationRef `ComponentRef` of a notification or `Notification` component you wish to close\n     */\n\n\n    close(notificationRef) {\n      if (notificationRef) {\n        if (notificationRef instanceof Notification) {\n          this.close(notificationRef.componentRef);\n        } else {\n          this.applicationRef.detachView(notificationRef.hostView);\n          notificationRef.destroy();\n          const index = this.notificationRefs.indexOf(notificationRef);\n\n          if (index !== -1) {\n            this.notificationRefs.splice(index, 1);\n          }\n        }\n      }\n    }\n    /**\n     * Calculates the amount of time user needs to read the message in the notification.\n     *\n     * @param notificationObj Same object used to instantiate notification.\n     *\n     * In addition to `type` and `message` members, use `duration` member to add\n     * some extra time (in ms) to timeout if you need to.\n     * @returns calculated timeout (in ms) for smart notification\n     */\n\n\n    getSmartTimeout(notificationObj) {\n      // calculate timeout\n      let timeout = 600; // start with reaction time\n      // custom duration\n\n      timeout += notificationObj.duration || 0; // message type\n\n      switch (notificationObj.type) {\n        case \"info\":\n        case \"success\":\n        default:\n          {\n            break;\n          }\n\n        case \"danger\":\n          {\n            timeout += 3000;\n            break;\n          }\n\n        case \"warning\":\n          {\n            timeout += 1500;\n            break;\n          }\n      } // message length\n      // average reader reads around 200 words per minute, or it takes them ~0.3s per word\n      // let's use 1.5 factor for below average speed readers and have 0.45s per word\n\n\n      let wordCount = notificationObj.message.trim().split(/\\s+/).length;\n      timeout += wordCount * 450;\n      return timeout;\n    }\n    /**\n     * OnDestroy hook.\n     *\n     * Destroys all living notifications it is responsible for.\n     *\n     */\n\n\n    ngOnDestroy() {\n      if (this.notificationRefs.length > 0) {\n        for (let i = 0; i < this.notificationRefs.length; i++) {\n          let notificationRef = this.notificationRefs[i];\n          this.applicationRef.detachView(notificationRef.hostView);\n          notificationRef.destroy();\n        }\n\n        this.notificationRefs.length = 0;\n      }\n    }\n\n  }\n\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  NotificationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac\n  });\n  /** @nocollapse */\n\n  return NotificationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NotificationModule = /*#__PURE__*/(() => {\n  class NotificationModule {}\n\n  NotificationModule.ɵfac = function NotificationModule_Factory(t) {\n    return new (t || NotificationModule)();\n  };\n\n  NotificationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NotificationModule\n  });\n  NotificationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [NotificationService, NotificationDisplayService],\n    imports: [ButtonModule, CommonModule, I18nModule, ExperimentalModule, LinkModule, IconModule]\n  });\n  return NotificationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NotificationModule, {\n    declarations: function () {\n      return [Notification, Toast, ToastTitle, ToastSubtitle, ToastCaption, NotificationTitle, NotificationSubtitle];\n    },\n    imports: function () {\n      return [ButtonModule, CommonModule, I18nModule, ExperimentalModule, LinkModule, IconModule];\n    },\n    exports: function () {\n      return [Notification, Toast, ToastTitle, ToastSubtitle, ToastCaption, NotificationTitle, NotificationSubtitle];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NotificationDisplayService, NotificationSubtitle, NotificationTitle, Notification, NotificationModule, NotificationService, ToastCaption, ToastSubtitle, ToastTitle, Toast }; //# sourceMappingURL=carbon-components-angular-notification.js.map","map":null,"metadata":{},"sourceType":"module"}