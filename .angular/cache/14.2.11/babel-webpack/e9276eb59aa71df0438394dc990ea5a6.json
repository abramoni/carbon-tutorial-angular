{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-code-snippet.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, HostBinding, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'carbon-components-angular/i18n';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'carbon-components-angular/icon';\nconst _c0 = [\"code\"];\n\nfunction CodeSnippet_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CodeSnippet_ng_container_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CodeSnippet_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_container_0_ng_container_2_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r3 = ɵngcc0.ɵɵreference(4);\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\");\n  }\n}\n\nfunction CodeSnippet_ng_template_1_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\")(1, \"span\")(2, \"span\");\n  }\n}\n\nfunction CodeSnippet_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_ng_container_1_span_1_Template, 1, 0, \"span\", 0);\n    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_ng_container_1_ng_template_2_Template, 3, 0, \"ng-template\", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r14 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.display === \"single\")(\"ngIfElse\", _r14);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_pre_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_pre_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"pre\");\n    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_pre_2_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r3 = ɵngcc0.ɵɵreference(4);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_button_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function CodeSnippet_ng_template_1_button_3_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r18.onCopyButtonClicked());\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(1, \"svg\", 11);\n    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_button_3_ng_container_2_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r11.translations.COPY_CODE);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function CodeSnippet_ng_template_1_button_4_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r21);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r20.toggleSnippetExpansion());\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(3, \"svg\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.expanded ? ctx_r12.translations.SHOW_LESS : ctx_r12.translations.SHOW_MORE);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ariaLabel\", ctx_r12.translations.SHOW_MORE_ICON);\n  }\n}\n\nfunction CodeSnippet_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_ng_container_1_Template, 4, 2, \"ng-container\", 6);\n    ɵngcc0.ɵɵtemplate(2, CodeSnippet_ng_template_1_pre_2_Template, 2, 1, \"pre\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, CodeSnippet_ng_template_1_button_3_Template, 3, 2, \"button\", 7);\n    ɵngcc0.ɵɵtemplate(4, CodeSnippet_ng_template_1_button_4_Template, 4, 2, \"button\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.translations.CODE_SNIPPET_TEXT);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.skeleton);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.skeleton);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.skeleton);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.shouldShowExpandButton);\n  }\n}\n\nfunction CodeSnippet_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"code\", null, 15);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"bx--btn--copy__feedback--displayed\": a0\n  };\n};\n\nfunction CodeSnippet_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r6.showFeedback));\n    ɵngcc0.ɵɵattribute(\"data-feedback\", ctx_r6.feedbackText);\n  }\n}\n\nconst _c2 = [\"*\"];\nvar SnippetType = /*#__PURE__*/(() => {\n  (function (SnippetType) {\n    SnippetType[\"single\"] = \"single\";\n    SnippetType[\"multi\"] = \"multi\";\n    SnippetType[\"inline\"] = \"inline\";\n  })(SnippetType || (SnippetType = {}));\n\n  return SnippetType;\n})();\n\n/**\n * [See demo](../../?path=/story/components-code-snippet--basic)\n *\n * ```html\n * <ibm-code-snippet>Code</ibm-code-snippet>\n * ```\n *\n * <example-url>../../iframe.html?id=components-code-snippet--basic</example-url>\n */\nlet CodeSnippet = /*#__PURE__*/(() => {\n  class CodeSnippet {\n    /**\n     * Creates an instance of CodeSnippet.\n     */\n    constructor(i18n) {\n      this.i18n = i18n;\n      /**\n       * It can be `\"single\"`, `\"multi\"` or `\"inline\"`\n       *\n       */\n\n      this.display = SnippetType.single;\n      this.translations = this.i18n.get().CODE_SNIPPET;\n      /**\n       * Set to `\"light\"` to apply the light style on the code snippet.\n       */\n\n      this.theme = \"dark\";\n      /**\n       * Text displayed in the tooltip when user clicks button to copy code.\n       *\n       */\n\n      this.feedbackText = this.translations.COPIED;\n      /**\n       * Time in miliseconds to keep the feedback tooltip displayed.\n       *\n       */\n\n      this.feedbackTimeout = 2000;\n      this.expanded = false;\n      this.skeleton = false;\n      this.snippetClass = true;\n      this.showFeedback = false;\n      this.hasExpandButton = null;\n      CodeSnippet.codeSnippetCount++;\n    }\n\n    get snippetSingleClass() {\n      return this.display === SnippetType.single;\n    }\n\n    get snippetMultiClass() {\n      return this.display === SnippetType.multi;\n    }\n\n    get snippetInlineClass() {\n      return this.display === SnippetType.inline;\n    }\n\n    get snippetInlineLightClass() {\n      return this.theme === \"light\";\n    }\n\n    get btnCopyClass() {\n      return this.display === SnippetType.inline;\n    }\n\n    get displayStyle() {\n      return this.display !== SnippetType.inline ? \"block\" : null;\n    }\n\n    get attrType() {\n      return this.display === SnippetType.inline ? \"button\" : null;\n    }\n\n    get shouldShowExpandButton() {\n      // Checks if `hasExpand` button has been initialized in `AfterViewInit` before detecting whether or not to\n      // show the expand button when the code displayed in the component changes during the life of the component.\n      // This is to avoid the `ExpressionChangedAfterItHasBeenCheckedError`.\n      if (this.hasExpandButton === null) {\n        return this.hasExpandButton;\n      }\n\n      return this.canExpand();\n    }\n\n    toggleSnippetExpansion() {\n      this.expanded = !this.expanded;\n    }\n    /**\n     * Copies the code from the `<code>` block to clipboard.\n     *\n     */\n\n\n    copyCode() {\n      // create invisible, uneditable textarea with our code in it\n      const textarea = document.createElement(\"textarea\");\n      textarea.value = this.code.nativeElement.innerText || this.code.nativeElement.textContent;\n      textarea.setAttribute(\"readonly\", \"\");\n      textarea.style.position = \"absolute\";\n      textarea.style.right = \"-99999px\";\n      document.body.appendChild(textarea); // save user selection\n\n      const selected = document.getSelection().rangeCount ? document.getSelection().getRangeAt(0) : null; // copy to clipboard\n\n      textarea.select();\n      document.execCommand(\"copy\"); // remove textarea\n\n      document.body.removeChild(textarea); // restore user selection\n\n      if (selected) {\n        document.getSelection().removeAllRanges();\n        document.getSelection().addRange(selected);\n      }\n    }\n\n    onCopyButtonClicked() {\n      this.copyCode();\n      this.showFeedback = true;\n      setTimeout(() => {\n        this.showFeedback = false;\n      }, this.feedbackTimeout);\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => {\n        if (this.canExpand()) {\n          this.hasExpandButton = true;\n        } else {\n          this.hasExpandButton = false;\n        }\n      });\n    }\n    /**\n     * Inline code snippet acts as button and makes the whole component clickable.\n     *\n     * This handles clicks in that case.\n     */\n\n\n    hostClick() {\n      if (this.display !== SnippetType.inline) {\n        return;\n      }\n\n      this.onCopyButtonClicked();\n    }\n\n    canExpand() {\n      return this.code && this.code.nativeElement.getBoundingClientRect().height > 255 && this.display === \"multi\";\n    }\n\n  }\n\n  CodeSnippet.ɵfac = function CodeSnippet_Factory(t) {\n    return new (t || CodeSnippet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n));\n  };\n\n  CodeSnippet.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CodeSnippet,\n    selectors: [[\"ibm-code-snippet\"]],\n    viewQuery: function CodeSnippet_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.code = _t.first);\n      }\n    },\n    hostVars: 19,\n    hostBindings: function CodeSnippet_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CodeSnippet_click_HostBindingHandler() {\n          return ctx.hostClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"type\", ctx.attrType);\n        ɵngcc0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n        ɵngcc0.ɵɵclassProp(\"bx--snippet--expand\", ctx.expanded)(\"bx--skeleton\", ctx.skeleton)(\"bx--snippet\", ctx.snippetClass)(\"bx--snippet--single\", ctx.snippetSingleClass)(\"bx--snippet--multi\", ctx.snippetMultiClass)(\"bx--snippet--inline\", ctx.snippetInlineClass)(\"bx--snippet--light\", ctx.snippetInlineLightClass)(\"bx--btn--copy\", ctx.btnCopyClass);\n      }\n    },\n    inputs: {\n      display: \"display\",\n      translations: \"translations\",\n      theme: \"theme\",\n      feedbackText: \"feedbackText\",\n      feedbackTimeout: \"feedbackTimeout\",\n      expanded: \"expanded\",\n      skeleton: \"skeleton\"\n    },\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"notInline\", \"\"], [\"codeTemplate\", \"\"], [\"feedbackTemplate\", \"\"], [4, \"ngTemplateOutlet\"], [\"role\", \"textbox\", \"aria-readonly\", \"true\", 1, \"bx--snippet-container\"], [4, \"ngIf\"], [\"class\", \"bx--snippet-button\", \"tabindex\", \"0\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"multiSkeleton\", \"\"], [\"tabindex\", \"0\", 1, \"bx--snippet-button\", 3, \"click\"], [\"ibmIcon\", \"copy\", \"size\", \"16\", 1, \"bx--snippet__icon\"], [\"type\", \"button\", 1, \"bx--btn\", \"bx--btn--ghost\", \"bx--btn--sm\", \"bx--snippet-btn--expand\", 3, \"click\"], [1, \"bx--snippet-btn--text\"], [\"ibmIcon\", \"chevron--down\", \"size\", \"16\", 1, \"bx--icon-chevron--down\", 3, \"ariaLabel\"], [\"code\", \"\"], [1, \"bx--btn--copy__feedback\", 3, \"ngClass\"]],\n    template: function CodeSnippet_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, CodeSnippet_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, CodeSnippet_ng_template_1_Template, 5, 5, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(3, CodeSnippet_ng_template_3_Template, 3, 0, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, CodeSnippet_ng_template_5_Template, 1, 4, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(2);\n\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.display === \"inline\")(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.IconDirective],\n    encapsulation: 2\n  });\n  /**\n   * Variable used for creating unique ids for code-snippet components.\n   */\n\n  CodeSnippet.codeSnippetCount = 0;\n  /** @nocollapse */\n\n  return CodeSnippet;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n\n\nlet CodeSnippetModule = /*#__PURE__*/(() => {\n  class CodeSnippetModule {}\n\n  CodeSnippetModule.ɵfac = function CodeSnippetModule_Factory(t) {\n    return new (t || CodeSnippetModule)();\n  };\n\n  CodeSnippetModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CodeSnippetModule\n  });\n  CodeSnippetModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, I18nModule, IconModule]\n  });\n  return CodeSnippetModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeSnippetModule, {\n    declarations: function () {\n      return [CodeSnippet];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, I18nModule, IconModule];\n    },\n    exports: function () {\n      return [CodeSnippet];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CodeSnippet, CodeSnippetModule }; //# sourceMappingURL=carbon-components-angular-code-snippet.js.map","map":null,"metadata":{},"sourceType":"module"}