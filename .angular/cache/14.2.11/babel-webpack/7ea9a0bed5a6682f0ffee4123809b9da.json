{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-search.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, EventEmitter, Output, HostBinding, ElementRef, HostListener, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport { IconModule } from 'carbon-components-angular/icon';\n/**\n * [See demo](../../?path=/story/components-search--basic)\n *\n * <example-url>../../iframe.html?id=components-search--basic</example-url>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'carbon-components-angular/i18n';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'carbon-components-angular/icon';\nconst _c0 = [\"input\"];\n\nfunction Search_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 5);\n  }\n}\n\nfunction Search_ng_template_4_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function Search_ng_template_4_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r7.openSearch());\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(1, \"svg\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction Search_ng_template_4__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 11);\n  }\n}\n\nfunction Search_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 6, 7);\n    ɵngcc0.ɵɵlistener(\"input\", function Search_ng_template_4_Template_input_input_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r9.onSearch($event.target.value));\n    })(\"keyup.enter\", function Search_ng_template_4_Template_input_keyup_enter_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r11.onEnter());\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, Search_ng_template_4_button_2_Template, 2, 0, \"button\", 8);\n    ɵngcc0.ɵɵtemplate(3, Search_ng_template_4__svg_svg_3_Template, 1, 0, \"svg\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r2.tableSearch || !ctx_r2.toolbar ? \"text\" : \"search\")(\"id\", ctx_r2.id)(\"value\", ctx_r2.value)(\"autocomplete\", ctx_r2.autocomplete)(\"placeholder\", ctx_r2.placeholder)(\"disabled\", ctx_r2.disabled)(\"required\", ctx_r2.required);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.tableSearch && ctx_r2.toolbar);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.tableSearch || !ctx_r2.toolbar);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"bx--search-close--hidden\": a0\n  };\n};\n\nfunction Search_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function Search_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r12.clearSearch());\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(3, \"svg\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c1, !ctx_r3.value || ctx_r3.value.length === 0))(\"title\", ctx_r3.clearButtonTitle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.clearButtonTitle);\n  }\n}\n\nconst _c2 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {\n  return {\n    \"bx--search--sm\": a0,\n    \"bx--search--lg\": a1,\n    \"bx--search--xl\": a2,\n    \"bx--search--light\": a3,\n    \"bx--skeleton\": a4,\n    \"bx--search--expandable\": a5,\n    \"bx--search--expanded\": a6,\n    \"bx--toolbar-search\": a7,\n    \"bx--toolbar-search--active\": a8,\n    \"bx--toolbar-search-container-persistent\": a9,\n    \"bx--toolbar-search-container-expandable\": a10,\n    \"bx--toolbar-search-container-active\": a11\n  };\n};\n\nlet Search = /*#__PURE__*/(() => {\n  class Search {\n    /**\n     * Creates an instance of `Search`.\n     * @param i18n The i18n translations.\n     */\n    constructor(elementRef, i18n) {\n      this.elementRef = elementRef;\n      this.i18n = i18n;\n      /**\n       * `light` or `dark` search theme.\n       */\n\n      this.theme = \"dark\";\n      /**\n       * Set to `true` for a disabled search input.\n       */\n\n      this.disabled = false;\n      /**\n       * Set to `true` for a toolbar search component.\n       */\n\n      this.toolbar = false;\n      /**\n       * Set to `true` to make the search component expandable.\n       * `expandable` would override `toolbar` property behaviours.\n       */\n\n      this.expandable = false;\n      /**\n       * Set to `true` for a loading search component.\n       */\n\n      this.skeleton = false;\n      /**\n       * Set to `true` to expand the toolbar search component.\n       */\n\n      this.active = false;\n      /**\n       * Specifies whether the search component is used in the table toolbar.\n       */\n\n      this.tableSearch = false;\n      /**\n       * The unique id for the search component.\n       */\n\n      this.id = `search-${Search.searchCount}`;\n      /**\n       * Sets the value attribute on the `input` element.\n       */\n\n      this.value = \"\";\n      /**\n       * Sets the autocomplete attribute on the `input` element.\n       * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\n       */\n\n      this.autocomplete = \"on\";\n      /**\n       * Sets the text inside the `label` tag.\n       */\n\n      this.label = this.i18n.get().SEARCH.LABEL;\n      /**\n       * Sets the placeholder attribute on the `input` element.\n       */\n\n      this.placeholder = this.i18n.get().SEARCH.PLACEHOLDER;\n      /**\n       * Used to set the `title` attribute of the clear button.\n       */\n\n      this.clearButtonTitle = this.i18n.get().SEARCH.CLEAR_BUTTON;\n      /**\n       * Title for the search trigger\n       */\n\n      this.searchTitle = \"\";\n      /**\n       * Emits an event when value is changed.\n       */\n\n      this.valueChange = new EventEmitter();\n      this.open = new EventEmitter();\n      /**\n       * Emits an event when the clear button is clicked.\n       */\n\n      this.clear = new EventEmitter();\n      /**\n       * Emits an event on enter.\n       */\n\n      this.search = new EventEmitter();\n      /**\n       * Sets `true` when composing text via IME.\n       */\n\n      this.isComposing = false;\n      this._size = \"md\";\n      /**\n       * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.\n       */\n\n      this.onTouched = () => {};\n      /**\n       * Method set in `registerOnChange` to propagate changes back to the form.\n       */\n\n\n      this.propagateChange = _ => {};\n\n      Search.searchCount++;\n    }\n\n    get containerClass() {\n      return !(this.toolbar || this.expandable);\n    }\n    /**\n     * Size of the search field.\n     */\n\n\n    set size(value) {\n      this._size = value;\n    }\n\n    get size() {\n      return this._size;\n    }\n    /**\n     * This is the initial value set to the component\n     * @param value The input value.\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n\n\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the search input is touched.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Called when text is written in the input.\n     * @param search The input text.\n     */\n\n\n    onSearch(search) {\n      if (this.isComposing) {\n        // check for IME use\n        return;\n      }\n\n      this.value = search;\n      this.doValueChange();\n    }\n    /**\n     * Called on enter.\n     */\n\n\n    onEnter() {\n      this.search.emit(this.value);\n    }\n    /**\n     * Called when clear button is clicked.\n     */\n\n\n    clearSearch() {\n      this.value = \"\";\n      this.clear.emit();\n      this.propagateChange(this.value);\n    }\n\n    doValueChange() {\n      this.valueChange.emit(this.value);\n      this.propagateChange(this.value);\n    }\n\n    openSearch() {\n      this.active = true;\n      this.open.emit(this.active);\n      setTimeout(() => this.inputRef.nativeElement.focus());\n    }\n\n    keyDown(event) {\n      if (this.toolbar || this.expandable) {\n        if (event.key === \"Escape\") {\n          this.active = false;\n        } else if (event.key === \"Enter\") {\n          this.openSearch();\n        }\n      }\n    }\n\n    focusOut(event) {\n      this.onTouched();\n\n      if ((this.expandable || this.toolbar) && this.inputRef && this.inputRef.nativeElement.value === \"\" && !this.elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.active = false;\n        this.open.emit(this.active);\n      }\n    }\n\n    focusIn(event) {\n      this.onTouched(); // set input focus if search icon get focus from tab key press event.\n\n      if ((this.expandable || this.toolbar) && this.inputRef && !event.relatedTarget && !this.elementRef.nativeElement.contains(event.relatedTarget)) {\n        this.openSearch();\n      }\n    }\n    /**\n     * Called when using IME composition.\n     */\n\n\n    compositionStart(event) {\n      this.isComposing = true;\n    }\n    /**\n     * Called when IME composition finishes.\n     */\n\n\n    compositionEnd(event) {\n      this.isComposing = false;\n      this.onSearch(this.value + event.data);\n    }\n\n  }\n\n  Search.ɵfac = function Search_Factory(t) {\n    return new (t || Search)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.I18n));\n  };\n\n  Search.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Search,\n    selectors: [[\"ibm-search\"]],\n    viewQuery: function Search_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function Search_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function Search_keydown_HostBindingHandler($event) {\n          return ctx.keyDown($event);\n        })(\"focusout\", function Search_focusout_HostBindingHandler($event) {\n          return ctx.focusOut($event);\n        })(\"focusin\", function Search_focusin_HostBindingHandler($event) {\n          return ctx.focusIn($event);\n        })(\"compositionstart\", function Search_compositionstart_HostBindingHandler($event) {\n          return ctx.compositionStart($event);\n        })(\"compositionend\", function Search_compositionend_HostBindingHandler($event) {\n          return ctx.compositionEnd($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--form-item\", ctx.containerClass);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      disabled: \"disabled\",\n      toolbar: \"toolbar\",\n      expandable: \"expandable\",\n      skeleton: \"skeleton\",\n      active: \"active\",\n      tableSearch: \"tableSearch\",\n      id: \"id\",\n      value: \"value\",\n      autocomplete: \"autocomplete\",\n      label: \"label\",\n      placeholder: \"placeholder\",\n      clearButtonTitle: \"clearButtonTitle\",\n      searchTitle: \"searchTitle\",\n      size: \"size\",\n      name: \"name\",\n      required: \"required\",\n      ariaLabel: \"ariaLabel\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      open: \"open\",\n      clear: \"clear\",\n      search: \"search\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: Search,\n      multi: true\n    }])],\n    decls: 7,\n    vars: 20,\n    consts: [[\"role\", \"search\", 1, \"bx--search\", 3, \"ngClass\", \"click\"], [1, \"bx--label\", 3, \"for\"], [\"class\", \"bx--search-input\", 4, \"ngIf\", \"ngIfElse\"], [\"enableInput\", \"\"], [\"class\", \"bx--search-close\", 3, \"ngClass\", \"title\", \"click\", 4, \"ngIf\"], [1, \"bx--search-input\"], [1, \"bx--search-input\", 3, \"type\", \"id\", \"value\", \"autocomplete\", \"placeholder\", \"disabled\", \"required\", \"input\", \"keyup.enter\"], [\"input\", \"\"], [\"class\", \"bx--toolbar-search__btn\", \"aria-label\", \"Open search\", 3, \"click\", 4, \"ngIf\"], [\"ibmIcon\", \"search\", \"class\", \"bx--search-magnifier-icon\", \"size\", \"16\", 4, \"ngIf\"], [\"aria-label\", \"Open search\", 1, \"bx--toolbar-search__btn\", 3, \"click\"], [\"ibmIcon\", \"search\", \"size\", \"16\", 1, \"bx--search-magnifier-icon\"], [1, \"bx--search-close\", 3, \"ngClass\", \"title\", \"click\"], [1, \"bx--visually-hidden\"], [\"ibmIcon\", \"close\", \"size\", \"16\"]],\n    template: function Search_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function Search_Template_div_click_0_listener() {\n          return ctx.openSearch();\n        });\n        ɵngcc0.ɵɵelementStart(1, \"label\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, Search_div_3_Template, 1, 0, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, Search_ng_template_4_Template, 4, 9, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(6, Search_button_6_Template, 4, 5, \"button\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(5);\n\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunctionV(7, _c2, [ctx.size === \"sm\", ctx.size === \"md\", ctx.size === \"xl\", ctx.theme === \"light\", ctx.skeleton, ctx.expandable && !ctx.tableSearch, ctx.expandable && !ctx.tableSearch && ctx.active, ctx.toolbar && !ctx.expandable, ctx.toolbar && !ctx.expandable && ctx.active, ctx.tableSearch && !ctx.expandable, ctx.tableSearch && ctx.expandable, ctx.tableSearch && ctx.expandable && ctx.active]));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.skeleton)(\"ngIfElse\", _r1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tableSearch || !ctx.toolbar);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.IconDirective],\n    encapsulation: 2\n  });\n  /**\n   * Variable used for creating unique ids for search components.\n   */\n\n  Search.searchCount = 0;\n  /** @nocollapse */\n\n  return Search;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // modules\n\n\nlet SearchModule = /*#__PURE__*/(() => {\n  class SearchModule {}\n\n  SearchModule.ɵfac = function SearchModule_Factory(t) {\n    return new (t || SearchModule)();\n  };\n\n  SearchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SearchModule\n  });\n  SearchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [FormsModule, CommonModule, I18nModule, IconModule]\n  });\n  return SearchModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, {\n    declarations: function () {\n      return [Search];\n    },\n    imports: function () {\n      return [FormsModule, CommonModule, I18nModule, IconModule];\n    },\n    exports: function () {\n      return [Search];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Search, SearchModule }; //# sourceMappingURL=carbon-components-angular-search.js.map","map":null,"metadata":{},"sourceType":"module"}