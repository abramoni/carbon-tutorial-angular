{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-button.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, HostBinding, Input, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * A convenience directive for applying styling to a button.\n *\n * [See demo](../../?path=/story/components-button--basic)\n *\n * Example:\n *\n * ```html\n * <button ibmButton>A button</button>\n * <button ibmButton=\"secondary\">A secondary button</button>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.\n *\n * <example-url>../../iframe.html?id=components-button--basic</example-url>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"*\"];\nlet Button = /*#__PURE__*/(() => {\n  class Button {\n    constructor() {\n      /**\n       * sets the button type\n       */\n      this.ibmButton = \"primary\";\n      /**\n       * If assistive text is used, this specifies the placement.\n       * Possible placements are `top`, `bottom`, `left`, `right`.\n       * If assistive text is not used, this can be left undefined.\n       */\n\n      this.assistiveTextPlacement = \"top\";\n      /**\n       * If assistive text is used, this specifies the alignment.\n       * Possible alignments are `center`, `start`, `end`.\n       * If assistive text is not used, this can be left undefined.\n       */\n\n      this.assistiveTextAlignment = \"center\";\n      /**\n       * Set to `true` for a skeleton state button\n       */\n\n      this.skeleton = false;\n      /**\n       * Set to `true` if the button contains only an icon, and a span with `.bx--assistive-text` containing the content\n       * For example:\n       *\n       * <button ibmButton=\"primary\" [iconOnly]=\"true\" [hasAssistiveText]=\"true\">\n       *    <svg class=\"bx--btn__icon\" ibmIconCopy size=\"20\"></svg>\n       *    <span class=\"bx--assistive-text\">Icon description</span>\n       * </button>\n       */\n\n      this.iconOnly = false;\n      /**\n       * Set to `true` for a \"expressive\" style button\n       */\n\n      this.isExpressive = false;\n      this.toolbarAction = false;\n      this.overflowMenu = false;\n      /**\n       * `hasAssistiveText` input specifies whether the button contains assistive text or not.\n       * Assistive text can be utilized as follows:\n       * ```typescript\n       *\t<button\n       *\t\tibmButton=\"tertiary\"\n       *\t\t[iconOnly]=\"true\"\n       *\t\t[hasAssistiveText]=\"true\"\n       *\t\tassistiveTextPlacement=\"top\"\n       *\t\tassistiveTextAlignment=\"center\">\n       *\t\t<svg class=\"bx--btn__icon\" ibmIcon=\"copy\" size=\"20\"></svg>\n       *\t\t<span class=\"bx--assistive-text\">Icon description</span>\n       *\t</button>\n       * ```\n       */\n\n      this.hasAssistiveText = false;\n    } // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly\n\n\n    get baseClass() {\n      return !this.toolbarAction;\n    }\n\n    get primaryButton() {\n      return this.ibmButton === \"primary\";\n    }\n\n    get secondaryButton() {\n      return this.ibmButton === \"secondary\";\n    }\n\n    get tertiaryButton() {\n      return this.ibmButton === \"tertiary\";\n    }\n\n    get ghostButton() {\n      return this.ibmButton === \"ghost\";\n    }\n\n    get dangerButton() {\n      return this.ibmButton === \"danger\" || this.ibmButton === \"danger--primary\";\n    }\n\n    get dangerTertiary() {\n      return this.ibmButton === \"danger--tertiary\";\n    }\n\n    get dangerGhost() {\n      return this.ibmButton === \"danger--ghost\";\n    }\n\n    get smallSize() {\n      return this.size === \"sm\";\n    }\n\n    get largeSize() {\n      return this.size === \"lg\";\n    }\n\n    get extraLargeSize() {\n      return this.size === \"xl\";\n    }\n\n    get fieldSize() {\n      return this.size === \"field\";\n    }\n\n    get isAssistiveTextCenterAligned() {\n      return this.hasAssistiveText && this.assistiveTextAlignment === \"center\";\n    }\n\n    get isAssistiveTextStartAligned() {\n      return this.hasAssistiveText && this.assistiveTextAlignment === \"start\";\n    }\n\n    get isAssistiveTextEndAligned() {\n      return this.hasAssistiveText && this.assistiveTextAlignment === \"end\";\n    }\n\n    get isAssistiveTextTopPositioned() {\n      return this.hasAssistiveText && this.assistiveTextPlacement === \"top\";\n    }\n\n    get isAssistiveTextBottomPositioned() {\n      return this.hasAssistiveText && this.assistiveTextPlacement === \"bottom\";\n    }\n\n    get isAssistiveTextLeftPositioned() {\n      return this.hasAssistiveText && this.assistiveTextPlacement === \"left\";\n    }\n\n    get isAssistiveTextRightPositioned() {\n      return this.hasAssistiveText && this.assistiveTextPlacement === \"right\";\n    }\n\n    ngOnInit() {\n      if (!this.ibmButton) {\n        this.ibmButton = \"primary\";\n      }\n    }\n\n  }\n\n  Button.ɵfac = function Button_Factory(t) {\n    return new (t || Button)();\n  };\n\n  Button.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Button,\n    selectors: [[\"\", \"ibmButton\", \"\"]],\n    hostVars: 52,\n    hostBindings: function Button_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--skeleton\", ctx.skeleton)(\"bx--btn--icon-only\", ctx.iconOnly)(\"bx--btn--expressive\", ctx.isExpressive)(\"bx--toolbar-action\", ctx.toolbarAction)(\"bx--overflow-menu\", ctx.overflowMenu)(\"bx--tooltip__trigger\", ctx.hasAssistiveText)(\"bx--tooltip--a11y\", ctx.hasAssistiveText)(\"bx--btn\", ctx.baseClass)(\"bx--btn--primary\", ctx.primaryButton)(\"bx--btn--secondary\", ctx.secondaryButton)(\"bx--btn--tertiary\", ctx.tertiaryButton)(\"bx--btn--ghost\", ctx.ghostButton)(\"bx--btn--danger\", ctx.dangerButton)(\"bx--btn--danger--tertiary\", ctx.dangerTertiary)(\"bx--btn--danger--ghost\", ctx.dangerGhost)(\"bx--btn--sm\", ctx.smallSize)(\"bx--btn--lg\", ctx.largeSize)(\"bx--btn--xl\", ctx.extraLargeSize)(\"bx--btn--field\", ctx.fieldSize)(\"bx--tooltip--align-center\", ctx.isAssistiveTextCenterAligned)(\"bx--tooltip--align-start\", ctx.isAssistiveTextStartAligned)(\"bx--tooltip--align-end\", ctx.isAssistiveTextEndAligned)(\"bx--tooltip--top\", ctx.isAssistiveTextTopPositioned)(\"bx--tooltip--bottom\", ctx.isAssistiveTextBottomPositioned)(\"bx--tooltip--left\", ctx.isAssistiveTextLeftPositioned)(\"bx--tooltip--right\", ctx.isAssistiveTextRightPositioned);\n      }\n    },\n    inputs: {\n      ibmButton: \"ibmButton\",\n      assistiveTextPlacement: \"assistiveTextPlacement\",\n      assistiveTextAlignment: \"assistiveTextAlignment\",\n      skeleton: \"skeleton\",\n      iconOnly: \"iconOnly\",\n      isExpressive: \"isExpressive\",\n      hasAssistiveText: \"hasAssistiveText\",\n      size: \"size\"\n    }\n  });\n  return Button;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ButtonSet = /*#__PURE__*/(() => {\n  class ButtonSet {\n    constructor() {\n      this.buttonSetClass = true;\n    }\n\n  }\n\n  ButtonSet.ɵfac = function ButtonSet_Factory(t) {\n    return new (t || ButtonSet)();\n  };\n\n  ButtonSet.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ButtonSet,\n    selectors: [[\"ibm-button-set\"]],\n    hostVars: 2,\n    hostBindings: function ButtonSet_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--btn-set\", ctx.buttonSetClass);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ButtonSet_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ButtonSet;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ButtonModule = /*#__PURE__*/(() => {\n  class ButtonModule {}\n\n  ButtonModule.ɵfac = function ButtonModule_Factory(t) {\n    return new (t || ButtonModule)();\n  };\n\n  ButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ButtonModule\n  });\n  ButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonModule, {\n    declarations: function () {\n      return [Button, ButtonSet];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [Button, ButtonSet];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Button, ButtonSet, ButtonModule }; //# sourceMappingURL=carbon-components-angular-button.js.map","map":null,"metadata":{},"sourceType":"module"}