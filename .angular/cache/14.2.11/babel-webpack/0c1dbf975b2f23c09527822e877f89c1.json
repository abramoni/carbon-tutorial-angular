{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-grid.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CommonModule } from '@angular/common';\nimport { Directive, HostBinding, Input, NgModule } from '@angular/core';\n/**\n * [See demo](../../?path=/story/components-grid--basic)\n *\n * <example-url>../../iframe.html?id=components-grid--basic</example-url>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet GridDirective = /*#__PURE__*/(() => {\n  class GridDirective {\n    constructor() {\n      this.baseClass = true;\n      this.condensed = false;\n    }\n\n  }\n\n  GridDirective.ɵfac = function GridDirective_Factory(t) {\n    return new (t || GridDirective)();\n  };\n\n  GridDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: GridDirective,\n    selectors: [[\"\", \"ibmGrid\", \"\"]],\n    hostVars: 4,\n    hostBindings: function GridDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--grid\", ctx.baseClass)(\"bx--grid--condensed\", ctx.condensed);\n      }\n    },\n    inputs: {\n      condensed: \"condensed\"\n    }\n  });\n  return GridDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet RowDirective = /*#__PURE__*/(() => {\n  class RowDirective {\n    constructor() {\n      this.gutter = true;\n      this.leftGutter = true;\n      this.rightGutter = true;\n      this.baseClass = true;\n      this.condensed = false;\n    }\n\n    get showGutter() {\n      return !this.gutter;\n    }\n\n    get showLeftGutter() {\n      return !this.leftGutter;\n    }\n\n    get showRightGutter() {\n      return !this.rightGutter;\n    }\n\n  }\n\n  RowDirective.ɵfac = function RowDirective_Factory(t) {\n    return new (t || RowDirective)();\n  };\n\n  RowDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RowDirective,\n    selectors: [[\"\", \"ibmRow\", \"\"]],\n    hostVars: 10,\n    hostBindings: function RowDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--row\", ctx.baseClass)(\"bx--row--condensed\", ctx.condensed)(\"bx--no-gutter\", ctx.showGutter)(\"bx--no-gutter--left\", ctx.showLeftGutter)(\"bx--no-gutter--right\", ctx.showRightGutter);\n      }\n    },\n    inputs: {\n      gutter: \"gutter\",\n      leftGutter: \"leftGutter\",\n      rightGutter: \"rightGutter\",\n      condensed: \"condensed\"\n    }\n  });\n  return RowDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ColumnDirective = /*#__PURE__*/(() => {\n  class ColumnDirective {\n    constructor() {\n      this.class = \"\";\n      this.columnNumbers = {};\n      this.offsets = {}; // initial value if no inputs are provided (if no inputs ngOnChanges won't be executed)\n\n      this._columnClasses = [\"bx--col\"];\n    }\n\n    get columnClasses() {\n      return this._columnClasses.join(\" \");\n    }\n\n    set columnClasses(classes) {\n      this._columnClasses = classes.split(\" \");\n    }\n\n    ngOnChanges() {\n      try {\n        // Reset classes so we don't apply classes for the same breakpoint multiple times\n        this._columnClasses = [];\n        const columnKeys = Object.keys(this.columnNumbers);\n\n        if (columnKeys.length <= 0) {\n          this._columnClasses.push(\"bx--col\");\n        }\n\n        columnKeys.forEach(key => {\n          if (this.columnNumbers[key] === \"nobreak\") {\n            this._columnClasses.push(`bx--col-${key}`);\n          } else {\n            this._columnClasses.push(`bx--col-${key}-${this.columnNumbers[key]}`);\n          }\n        });\n        Object.keys(this.offsets).forEach(key => {\n          this._columnClasses.push(`bx--offset-${key}-${this.offsets[key]}`);\n        });\n      } catch (err) {\n        console.error(`Malformed \\`offsets\\` or \\`columnNumbers\\`: ${err}`);\n      }\n\n      if (this.class) {\n        this._columnClasses = [...new Set([...this._columnClasses, ...this.class.split(\" \")])];\n      }\n    }\n\n  }\n\n  ColumnDirective.ɵfac = function ColumnDirective_Factory(t) {\n    return new (t || ColumnDirective)();\n  };\n\n  ColumnDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ColumnDirective,\n    selectors: [[\"\", \"ibmCol\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ColumnDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.columnClasses);\n      }\n    },\n    inputs: {\n      class: \"class\",\n      columnNumbers: \"columnNumbers\",\n      offsets: \"offsets\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return ColumnDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GridModule = /*#__PURE__*/(() => {\n  class GridModule {}\n\n  GridModule.ɵfac = function GridModule_Factory(t) {\n    return new (t || GridModule)();\n  };\n\n  GridModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GridModule\n  });\n  GridModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return GridModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridModule, {\n    declarations: function () {\n      return [ColumnDirective, GridDirective, RowDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ColumnDirective, GridDirective, RowDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GridModule, GridDirective, RowDirective, ColumnDirective }; //# sourceMappingURL=carbon-components-angular-grid.js.map","map":null,"metadata":{},"sourceType":"module"}