{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-tiles.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Router } from '@angular/router';\nimport { merge } from 'carbon-components-angular/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Component, Input, Output, EventEmitter, Optional, ElementRef, ViewChild, HostListener, HostBinding, ContentChildren, TemplateRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport { LinkModule } from 'carbon-components-angular/link';\n/**\n * Build application's clickable tiles using this component.\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-clickable-tile>\n * \t\ttile content\n * </ibm-clickable-tile>\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'carbon-components-angular/link';\nimport * as ɵngcc4 from 'carbon-components-angular/i18n';\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"bx--tile--light\": a0,\n    \"bx--tile--disabled bx--link--disabled\": a1\n  };\n};\n\nconst _c1 = [\"*\"];\n\nfunction ExpandableTile__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 4);\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵelementStart(2, \"title\");\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵpipe(4, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(5, \"path\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"title\", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r0.expand.subject));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r0.expand.subject));\n  }\n}\n\nfunction ExpandableTile__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 4);\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵelementStart(2, \"title\");\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵpipe(4, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(5, \"path\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"title\", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.collapse.subject));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r1.collapse.subject));\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"bx--tile-content__above-the-fold\"]], [[\"\", 8, \"bx--tile-content__below-the-fold\"]]];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"bx--tile--is-expanded\": a0,\n    \"bx--tile--light\": a1\n  };\n};\n\nconst _c4 = function (a0) {\n  return {\n    \"max-height\": a0\n  };\n};\n\nconst _c5 = [\".bx--tile-content__above-the-fold\", \".bx--tile-content__below-the-fold\"];\nconst _c6 = [\"input\"];\n\nconst _c7 = function (a0, a1, a2) {\n  return {\n    \"bx--tile--is-selected\": a0,\n    \"bx--tile--light\": a1,\n    \"bx--tile--disabled\": a2\n  };\n};\n\nfunction TileGroup_legend_1_1_ng_template_0_Template(rf, ctx) {}\n\nfunction TileGroup_legend_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TileGroup_legend_1_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.legend);\n  }\n}\n\nfunction TileGroup_legend_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.legend);\n  }\n}\n\nfunction TileGroup_legend_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"legend\", 1);\n    ɵngcc0.ɵɵtemplate(1, TileGroup_legend_1_1_Template, 1, 1, null, 2);\n    ɵngcc0.ɵɵtemplate(2, TileGroup_legend_1_ng_template_2_Template, 1, 1, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isTemplate(ctx_r0.legend))(\"ngIfElse\", _r2);\n  }\n}\n\nconst _c8 = [[[\"ibm-selection-tile\"]]];\nconst _c9 = [\"ibm-selection-tile\"];\nlet ClickableTile = /*#__PURE__*/(() => {\n  class ClickableTile {\n    constructor(router) {\n      this.router = router;\n      this.theme = \"dark\";\n      /**\n       * Sets the `href` attribute on the `ibm-clickable-tile` element.\n       */\n\n      this.href = \"#\";\n      /**\n       * Set to `true` to disable the clickable tile.\n       */\n\n      this.disabled = false;\n      /**\n       * Emits the navigation status promise when the link is activated\n       */\n\n      this.navigation = new EventEmitter();\n    }\n\n    navigate(event) {\n      if (this.router && this.route && !this.disabled) {\n        event.preventDefault();\n        const status = this.router.navigate(this.route, this.routeExtras);\n        this.navigation.emit(status);\n      }\n    }\n\n  }\n\n  ClickableTile.ɵfac = function ClickableTile_Factory(t) {\n    return new (t || ClickableTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router, 8));\n  };\n\n  ClickableTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClickableTile,\n    selectors: [[\"ibm-clickable-tile\"]],\n    inputs: {\n      theme: \"theme\",\n      href: \"href\",\n      disabled: \"disabled\",\n      target: \"target\",\n      route: \"route\",\n      routeExtras: \"routeExtras\"\n    },\n    outputs: {\n      navigation: \"navigation\"\n    },\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 7,\n    consts: [[\"ibmLink\", \"\", \"tabindex\", \"0\", 1, \"bx--tile\", \"bx--tile--clickable\", 3, \"ngClass\", \"click\"]],\n    template: function ClickableTile_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"a\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClickableTile_Template_a_click_0_listener($event) {\n          return ctx.navigate($event);\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx.theme === \"light\", ctx.disabled));\n        ɵngcc0.ɵɵattribute(\"href\", ctx.disabled ? null : ctx.href, ɵngcc0.ɵɵsanitizeUrl)(\"target\", ctx.target)(\"aria-disabled\", ctx.disabled);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc3.Link],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return ClickableTile;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ExpandableTile = /*#__PURE__*/(() => {\n  class ExpandableTile {\n    constructor(i18n, elementRef) {\n      this.i18n = i18n;\n      this.elementRef = elementRef;\n      this.theme = \"dark\";\n      this.expanded = false;\n      this.tileMaxHeight = 0;\n      this.currentExpandedHeight = 0;\n      this.element = this.elementRef.nativeElement;\n      this.expand = this.i18n.getOverridable(\"TILES.EXPAND\");\n      this.collapse = this.i18n.getOverridable(\"TILES.COLLAPSE\");\n    }\n    /**\n     * Expects an object that contains some or all of:\n     * ```\n     * {\n     *\t\t\"EXPAND\": \"Expand\",\n     *\t\t\"COLLAPSE\": \"Collapse\",\n     * }\n     * ```\n     */\n\n\n    set translations(value) {\n      const valueWithDefaults = merge(this.i18n.getMultiple(\"TILES\"), value);\n      this.expand.override(valueWithDefaults.EXPAND);\n      this.collapse.override(valueWithDefaults.COLLAPSE);\n    }\n\n    ngAfterContentInit() {\n      this.updateMaxHeight();\n    }\n\n    get expandedHeight() {\n      const tile = this.element.querySelector(\".bx--tile\");\n      const tilePadding = parseInt(getComputedStyle(tile).paddingBottom, 10) + parseInt(getComputedStyle(tile).paddingTop, 10);\n      const expandedHeight = this.tileMaxHeight + tilePadding;\n\n      if (!isNaN(expandedHeight)) {\n        this.currentExpandedHeight = expandedHeight;\n      }\n\n      return this.currentExpandedHeight;\n    }\n\n    updateMaxHeight() {\n      if (this.expanded) {\n        this.tileMaxHeight = this.element.querySelector(\".bx--tile-content\").getBoundingClientRect().height;\n      } else {\n        this.tileMaxHeight = this.element.querySelector(\".bx--tile-content__above-the-fold\").getBoundingClientRect().height;\n      }\n    }\n\n    onClick() {\n      this.expanded = !this.expanded;\n      this.updateMaxHeight();\n    }\n\n  }\n\n  ExpandableTile.ɵfac = function ExpandableTile_Factory(t) {\n    return new (t || ExpandableTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.I18n), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ExpandableTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ExpandableTile,\n    selectors: [[\"ibm-expandable-tile\"]],\n    inputs: {\n      theme: \"theme\",\n      expanded: \"expanded\",\n      translations: \"translations\"\n    },\n    ngContentSelectors: _c5,\n    decls: 7,\n    vars: 9,\n    consts: [[\"type\", \"button\", 1, \"bx--tile\", \"bx--tile--expandable\", 3, \"ngClass\", \"ngStyle\", \"click\"], [1, \"bx--tile__chevron\"], [\"width\", \"12\", \"height\", \"7\", \"viewBox\", \"0 0 12 7\", \"role\", \"img\", 4, \"ngIf\"], [1, \"bx--tile-content\"], [\"width\", \"12\", \"height\", \"7\", \"viewBox\", \"0 0 12 7\", \"role\", \"img\"], [\"fill-rule\", \"nonzero\", \"d\", \"M6.002 5.55L11.27 0l.726.685L6.003 7 0 .685.726 0z\"]],\n    template: function ExpandableTile_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ExpandableTile_Template_button_click_0_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, ExpandableTile__svg_svg_2_Template, 6, 6, \"svg\", 2);\n        ɵngcc0.ɵɵtemplate(3, ExpandableTile__svg_svg_3_Template, 6, 6, \"svg\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵprojection(6, 1);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c3, ctx.expanded, ctx.theme === \"light\"))(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(7, _c4, ctx.expandedHeight + \"px\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.expanded);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expanded);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgStyle, ɵngcc2.AsyncPipe],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return ExpandableTile;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SelectionTile = /*#__PURE__*/(() => {\n  class SelectionTile {\n    constructor(i18n) {\n      this.i18n = i18n;\n      this.theme = \"dark\";\n      /**\n       * The unique id for the input.\n       */\n\n      this.id = `tile-${SelectionTile.tileCount}`;\n      /**\n       * Internal event used to notify the containing `TileGroup` of changes.\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Set to `true` to disable the selection tile.\n       */\n\n      this.disabled = false;\n      /**\n       * Set by the containing `TileGroup`. Used for the `name` property on the input.\n       */\n\n      this.name = \"tile-group-unbound\";\n      /**\n       * Defines whether or not the `SelectionTile` supports selecting multiple tiles as opposed to single\n       * tile selection.\n       */\n\n      this.multiple = true; // Set to true because of the way tile group sets it up.\n      // If an initial selected value is set before input exists, we save\n      // the value and check again when input exists in `AfterViewInit`.\n\n      this._selected = null;\n      SelectionTile.tileCount++;\n    }\n    /**\n     * Updating the state of the input to match the state of the parameter passed in.\n     * Set to `true` if this tile should be selected.\n     */\n\n\n    set selected(value) {\n      // If an initial selected value is set before input exists, we save\n      // the value and check again when input exists in `AfterViewInit`.\n      this._selected = value ? true : null;\n\n      if (this.input) {\n        this.input.nativeElement.checked = this._selected;\n      }\n    }\n\n    get selected() {\n      return this.input ? this.input.nativeElement.checked : false;\n    }\n\n    ngAfterViewInit() {\n      if (this.input) {\n        setTimeout(() => {\n          this.input.nativeElement.checked = this._selected;\n        });\n      }\n    }\n\n    keyboardInput(event) {\n      if (event.key === \"Enter\" || event.key === \"Spacebar\" || event.key === \" \") {\n        this.selected = !this.selected;\n        this.change.emit(event);\n      }\n    }\n\n    onChange(event) {\n      this.change.emit(event);\n    }\n\n  }\n\n  SelectionTile.ɵfac = function SelectionTile_Factory(t) {\n    return new (t || SelectionTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.I18n));\n  };\n\n  SelectionTile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SelectionTile,\n    selectors: [[\"ibm-selection-tile\"]],\n    viewQuery: function SelectionTile_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c6, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    hostBindings: function SelectionTile_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function SelectionTile_keydown_HostBindingHandler($event) {\n          return ctx.keyboardInput($event);\n        });\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      id: \"id\",\n      disabled: \"disabled\",\n      selected: \"selected\",\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 15,\n    consts: [[1, \"bx--tile-input\", 3, \"tabindex\", \"id\", \"disabled\", \"type\", \"value\", \"name\", \"change\"], [\"input\", \"\"], [1, \"bx--tile\", \"bx--tile--selectable\", 3, \"for\", \"ngClass\"], [1, \"bx--tile__checkmark\"], [\"width\", \"16\", \"height\", \"16\", \"viewBox\", \"0 0 16 16\"], [\"d\", \"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm3.646-10.854L6.75 10.043 4.354 7.646l-.708.708 3.104 3.103 5.604-5.603-.708-.708z\", \"fill-rule\", \"evenodd\"], [1, \"bx--tile-content\"]],\n    template: function SelectionTile_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"input\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"change\", function SelectionTile_Template_input_change_0_listener($event) {\n          return ctx.onChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"label\", 2);\n        ɵngcc0.ɵɵpipe(3, \"async\");\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(5, \"svg\", 4);\n        ɵngcc0.ɵɵelement(6, \"path\", 5);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"tabindex\", ctx.disabled ? null : 0)(\"id\", ctx.id)(\"disabled\", ctx.disabled)(\"type\", ctx.multiple ? \"checkbox\" : \"radio\")(\"value\", ctx.value)(\"name\", ctx.name);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id)(\"ngClass\", ɵngcc0.ɵɵpureFunction3(11, _c7, ctx.selected, ctx.theme === \"light\", ctx.disabled));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ɵngcc0.ɵɵpipeBind1(3, 9, ctx.i18n.get(\"TILES.TILE\")));\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.AsyncPipe],\n    encapsulation: 2\n  });\n  SelectionTile.tileCount = 0;\n  /** @nocollapse */\n\n  return SelectionTile;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TileGroup = /*#__PURE__*/(() => {\n  class TileGroup {\n    constructor() {\n      /**\n       * The tile group `name`\n       */\n      this.name = `tile-group-${TileGroup.tileGroupCount}`;\n      /**\n       * Set to `true` to support multiple tile selection\n       */\n\n      this.multiple = false;\n      /**\n       * Emits an event when the tile selection changes.\n       *\n       * Emits an object that looks like:\n       * ```javascript\n       * {\n       * \tvalue: \"something\",\n       * \tselected: true,\n       * \tname: \"tile-group-1\"\n       * }\n       * ```\n       */\n\n      this.selected = new EventEmitter();\n      this.tileGroupClass = true;\n      this.unsubscribe$ = new Subject();\n      this.unsubscribeTiles$ = new Subject();\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n\n      TileGroup.tileGroupCount++;\n    }\n\n    ngAfterContentInit() {\n      const updateTiles = () => {\n        // remove old subscriptions\n        this.unsubscribeTiles$.next(); // react to changes\n        // setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n        setTimeout(() => {\n          this.selectionTiles.forEach(tile => {\n            tile.name = this.name;\n            tile.change.pipe(takeUntil(this.unsubscribeTiles$)).subscribe(() => {\n              this.selected.emit({\n                value: tile.value,\n                selected: tile.selected,\n                name: this.name\n              });\n              this.onChange(tile.value);\n            });\n            tile.multiple = this.multiple;\n          });\n        });\n      };\n\n      updateTiles();\n      this.selectionTiles.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(_ => updateTiles());\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe$.next();\n      this.unsubscribe$.complete(); // takes care of tile subscriptions when tile-group dies\n\n      this.unsubscribeTiles$.next();\n      this.unsubscribeTiles$.complete();\n    }\n\n    writeValue(value) {\n      if (!this.selectionTiles) {\n        return;\n      }\n\n      this.selectionTiles.forEach(tile => {\n        if (tile.value === value) {\n          tile.selected = true;\n        } else {\n          tile.selected = false;\n        }\n      });\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    isTemplate(value) {\n      return value instanceof TemplateRef;\n    }\n\n  }\n\n  TileGroup.ɵfac = function TileGroup_Factory(t) {\n    return new (t || TileGroup)();\n  };\n\n  TileGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TileGroup,\n    selectors: [[\"ibm-tile-group\"]],\n    contentQueries: function TileGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, SelectionTile, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectionTiles = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function TileGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--tile-group\", ctx.tileGroupClass);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      multiple: \"multiple\",\n      legend: \"legend\"\n    },\n    outputs: {\n      selected: \"selected\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TileGroup,\n      multi: true\n    }])],\n    ngContentSelectors: _c9,\n    decls: 3,\n    vars: 1,\n    consts: [[\"class\", \"bx--label\", 4, \"ngIf\"], [1, \"bx--label\"], [4, \"ngIf\", \"ngIfElse\"], [\"legendLabel\", \"\"], [3, \"ngTemplateOutlet\"]],\n    template: function TileGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c8);\n        ɵngcc0.ɵɵelementStart(0, \"fieldset\");\n        ɵngcc0.ɵɵtemplate(1, TileGroup_legend_1_Template, 4, 2, \"legend\", 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.legend);\n      }\n    },\n    dependencies: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  TileGroup.tileGroupCount = 0;\n  /** @nocollapse */\n\n  return TileGroup;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Build application's tiles using this component.\n *\n * [See demo](../../?path=/story/components-tiles--basic)\n *\n * ## Basic usage\n *\n * ```html\n * <ibm-tile>\n * \t\ttile content\n * </ibm-tile>\n * ```\n *\n * <example-url>../../iframe.html?id=components-tiles--basic</example-url>\n */\n\n\nlet Tile = /*#__PURE__*/(() => {\n  class Tile {\n    constructor() {\n      this.tileClass = true;\n      this.theme = \"dark\";\n    }\n\n    get lightThemeEnabled() {\n      return this.theme === \"light\";\n    }\n\n  }\n\n  Tile.ɵfac = function Tile_Factory(t) {\n    return new (t || Tile)();\n  };\n\n  Tile.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: Tile,\n    selectors: [[\"ibm-tile\"]],\n    hostVars: 4,\n    hostBindings: function Tile_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--tile\", ctx.tileClass)(\"bx--tile--light\", ctx.lightThemeEnabled);\n      }\n    },\n    inputs: {\n      theme: \"theme\"\n    },\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function Tile_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return Tile;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TilesModule = /*#__PURE__*/(() => {\n  class TilesModule {}\n\n  TilesModule.ɵfac = function TilesModule_Factory(t) {\n    return new (t || TilesModule)();\n  };\n\n  TilesModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TilesModule\n  });\n  TilesModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, I18nModule, LinkModule]\n  });\n  return TilesModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TilesModule, {\n    declarations: function () {\n      return [Tile, ClickableTile, ExpandableTile, SelectionTile, TileGroup];\n    },\n    imports: function () {\n      return [CommonModule, I18nModule, LinkModule];\n    },\n    exports: function () {\n      return [Tile, ClickableTile, ExpandableTile, SelectionTile, TileGroup];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ClickableTile, ExpandableTile, SelectionTile, TileGroup, Tile, TilesModule }; //# sourceMappingURL=carbon-components-angular-tiles.js.map","map":null,"metadata":{},"sourceType":"module"}