{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-progress-bar.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, HostBinding, Input, TemplateRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'carbon-components-angular/icon';\n\nfunction ProgressBar_div_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.label);\n  }\n}\n\nfunction ProgressBar_div_0_3_ng_template_0_Template(rf, ctx) {}\n\nfunction ProgressBar_div_0_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ProgressBar_div_0_3_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.label);\n  }\n}\n\nfunction ProgressBar_div_0__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 10);\n  }\n}\n\nfunction ProgressBar_div_0__svg_svg_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 11);\n  }\n}\n\nfunction ProgressBar_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4)(1, \"span\", 5);\n    ɵngcc0.ɵɵtemplate(2, ProgressBar_div_0_ng_container_2_Template, 2, 1, \"ng-container\", 6);\n    ɵngcc0.ɵɵtemplate(3, ProgressBar_div_0_3_Template, 1, 1, null, 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, ProgressBar_div_0__svg_svg_4_Template, 1, 0, \"svg\", 7);\n    ɵngcc0.ɵɵtemplate(5, ProgressBar_div_0__svg_svg_5_Template, 1, 0, \"svg\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isTemplate(ctx_r0.label));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isTemplate(ctx_r0.label));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isFinished);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isError);\n  }\n}\n\nfunction ProgressBar_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7.helperText);\n  }\n}\n\nfunction ProgressBar_div_3_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ProgressBar_div_3_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ProgressBar_div_3_2_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.helperText);\n  }\n}\n\nfunction ProgressBar_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵtemplate(1, ProgressBar_div_3_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    ɵngcc0.ɵɵtemplate(2, ProgressBar_div_3_2_Template, 1, 1, null, 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1.helperId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.isTemplate(ctx_r1.helperText));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.isTemplate(ctx_r1.helperText));\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"transform\": a0\n  };\n};\n\nlet ProgressBar = /*#__PURE__*/(() => {\n  class ProgressBar {\n    constructor() {\n      this.id = `progress-bar-${ProgressBar.progressBarCounter++}`;\n      this.helperId = `progress-bar-helper-${ProgressBar.progressBarCounter}`;\n      /**\n       * Maximum value\n       */\n\n      this.max = 100;\n      /**\n       * Alignment variant of the progress bar, default is `default`\n       */\n\n      this.type = \"default\";\n      /**\n       * Current status of the progress bar, default is `active`\n       */\n\n      this.status = \"active\";\n      /**\n       * Size of the progress bar, default is `big`\n       */\n\n      this.size = \"big\";\n      this.defaultClass = true;\n      this._value = undefined;\n    }\n    /**\n     * Current value\n     */\n\n\n    set value(num) {\n      this._value = num; // Validate number\n\n      if (num > this.max) {\n        this._value = this.max;\n      }\n\n      if (num < 0) {\n        this._value = 0;\n      } // Set values based on current state\n\n\n      if (this.isError) {\n        this._value = 0;\n      } else if (this.isFinished) {\n        this._value = this.max;\n      }\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    get percentage() {\n      return `scaleX(${this.value / this.max})`;\n    } // Size\n\n\n    get bigBar() {\n      return this.size === \"big\";\n    }\n\n    get smallBar() {\n      return this.size === \"small\";\n    } // Type\n\n\n    get defaultType() {\n      return this.type === \"default\";\n    }\n\n    get indentedType() {\n      return this.type === \"indented\";\n    }\n\n    get inlineType() {\n      return this.type === \"inline\";\n    } // Status\n\n\n    get isFinished() {\n      return this.status === \"finished\";\n    }\n\n    get isError() {\n      return this.status === \"error\";\n    }\n\n    get indeterminate() {\n      return this.value === undefined && !this.isFinished && !this.isError;\n    }\n\n    isTemplate(value) {\n      return value instanceof TemplateRef;\n    }\n\n  }\n\n  ProgressBar.ɵfac = function ProgressBar_Factory(t) {\n    return new (t || ProgressBar)();\n  };\n\n  ProgressBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ProgressBar,\n    selectors: [[\"ibm-progress-bar\"]],\n    hostVars: 18,\n    hostBindings: function ProgressBar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--progress-bar\", ctx.defaultClass)(\"bx--progress-bar--big\", ctx.bigBar)(\"bx--progress-bar--small\", ctx.smallBar)(\"bx--progress-bar--default\", ctx.defaultType)(\"bx--progress-bar--indented\", ctx.indentedType)(\"bx--progress-bar--inline\", ctx.inlineType)(\"bx--progress-bar--finished\", ctx.isFinished)(\"bx--progress-bar--error\", ctx.isError)(\"bx--progress-bar--indeterminate\", ctx.indeterminate);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      max: \"max\",\n      type: \"type\",\n      status: \"status\",\n      size: \"size\",\n      value: \"value\",\n      label: \"label\",\n      helperText: \"helperText\"\n    },\n    decls: 4,\n    vars: 11,\n    consts: [[\"class\", \"bx--progress-bar__label\", 3, \"id\", 4, \"ngIf\"], [\"role\", \"progressbar\", 1, \"bx--progress-bar__track\"], [1, \"bx--progress-bar__bar\", 3, \"ngStyle\"], [\"class\", \"bx--progress-bar__helper-text\", 3, \"id\", 4, \"ngIf\"], [1, \"bx--progress-bar__label\", 3, \"id\"], [1, \"bx--progress-bar__label-text\"], [4, \"ngIf\"], [\"fill\", \"currentColor\", \"ibmIcon\", \"checkmark--filled\", \"class\", \"bx--progress-bar__status-icon\", 4, \"ngIf\"], [\"fill\", \"currentColor\", \"ibmIcon\", \"error--filled\", \"class\", \"bx--progress-bar__status-icon\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [\"fill\", \"currentColor\", \"ibmIcon\", \"checkmark--filled\", 1, \"bx--progress-bar__status-icon\"], [\"fill\", \"currentColor\", \"ibmIcon\", \"error--filled\", 1, \"bx--progress-bar__status-icon\"], [1, \"bx--progress-bar__helper-text\", 3, \"id\"]],\n    template: function ProgressBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ProgressBar_div_0_Template, 6, 5, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ProgressBar_div_3_Template, 3, 3, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-invalid\", ctx.isError)(\"labelledby\", ctx.id)(\"describedby\", ctx.helperText ? ctx.helperId : null)(\"aria-valuemin\", !ctx.indeterminate ? 0 : null)(\"aria-valuemax\", !ctx.indeterminate ? ctx.max : null)(\"aria-valuenow\", !ctx.indeterminate ? ctx.value : null);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(9, _c0, !ctx.isFinished && !ctx.isError ? ctx.percentage : null));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.helperText);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgStyle, ɵngcc2.IconDirective],\n    encapsulation: 2\n  });\n  ProgressBar.progressBarCounter = 0;\n  return ProgressBar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ProgressBarModule = /*#__PURE__*/(() => {\n  class ProgressBarModule {}\n\n  ProgressBarModule.ɵfac = function ProgressBarModule_Factory(t) {\n    return new (t || ProgressBarModule)();\n  };\n\n  ProgressBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ProgressBarModule\n  });\n  ProgressBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule]\n  });\n  return ProgressBarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressBarModule, {\n    declarations: function () {\n      return [ProgressBar];\n    },\n    imports: function () {\n      return [CommonModule, IconModule];\n    },\n    exports: function () {\n      return [ProgressBar];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ProgressBar, ProgressBarModule }; //# sourceMappingURL=carbon-components-angular-progress-bar.js.map","map":null,"metadata":{},"sourceType":"module"}