{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-skeleton.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction SkeletonText_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"p\", 1);\n  }\n\n  if (rf & 2) {\n    const width_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵstyleProp(\"width\", width_r1);\n  }\n}\n\nlet SkeletonPlaceholder = /*#__PURE__*/(() => {\n  class SkeletonPlaceholder {}\n\n  SkeletonPlaceholder.ɵfac = function SkeletonPlaceholder_Factory(t) {\n    return new (t || SkeletonPlaceholder)();\n  };\n\n  SkeletonPlaceholder.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SkeletonPlaceholder,\n    selectors: [[\"ibm-skeleton-placeholder\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[1, \"bx--skeleton__placeholder\"]],\n    template: function SkeletonPlaceholder_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return SkeletonPlaceholder;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SkeletonText = /*#__PURE__*/(() => {\n  class SkeletonText {\n    constructor() {\n      this.lines = 5;\n      this.minLineWidth = 100;\n      this.maxLineWidth = 300;\n    }\n    /**\n     * Returns a random width in pixels based off a min width, and a max width.\n     */\n\n\n    getRandomInt(min, max) {\n      return `${Math.floor(Math.random() * (max - min + 1) + min) + \"px\"}`;\n    }\n\n    ngOnChanges() {\n      // Creates an array of length defined by input lines with content from\n      // 0 to lines - 1, maps each value to a random width in pixels.\n      this.lineWidths = Array.from(Array(this.lines).keys()).map(num => this.getRandomInt(this.minLineWidth, this.maxLineWidth));\n    }\n\n  }\n\n  SkeletonText.ɵfac = function SkeletonText_Factory(t) {\n    return new (t || SkeletonText)();\n  };\n\n  SkeletonText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SkeletonText,\n    selectors: [[\"ibm-skeleton-text\"]],\n    inputs: {\n      lines: \"lines\",\n      minLineWidth: \"minLineWidth\",\n      maxLineWidth: \"maxLineWidth\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"bx--skeleton__text\", 3, \"width\", 4, \"ngFor\", \"ngForOf\"], [1, \"bx--skeleton__text\"]],\n    template: function SkeletonText_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, SkeletonText_p_0_Template, 1, 2, \"p\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.lineWidths);\n      }\n    },\n    dependencies: [ɵngcc1.NgForOf],\n    encapsulation: 2\n  });\n  return SkeletonText;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SkeletonModule = /*#__PURE__*/(() => {\n  class SkeletonModule {}\n\n  SkeletonModule.ɵfac = function SkeletonModule_Factory(t) {\n    return new (t || SkeletonModule)();\n  };\n\n  SkeletonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: SkeletonModule\n  });\n  SkeletonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return SkeletonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SkeletonModule, {\n    declarations: function () {\n      return [SkeletonPlaceholder, SkeletonText];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [SkeletonPlaceholder, SkeletonText];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SkeletonPlaceholder, SkeletonText, SkeletonModule }; //# sourceMappingURL=carbon-components-angular-skeleton.js.map","map":null,"metadata":{},"sourceType":"module"}