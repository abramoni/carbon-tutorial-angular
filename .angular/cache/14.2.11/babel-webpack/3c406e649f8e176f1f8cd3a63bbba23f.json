{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-experimental.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable, NgModule, SkipSelf, Optional } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nlet ExperimentalService = /*#__PURE__*/(() => {\n  class ExperimentalService {\n    constructor() {\n      /**\n       * Map to hold all our experiments\n       */\n      this.experiments = new Map();\n    }\n    /**\n     * Adds an experiment if it doesn't exist.\n     */\n\n\n    addExperiment(name, options = {\n      enabled: false\n    }) {\n      if (!this.experiments.has(name)) {\n        this.experiments.set(name, options);\n      }\n    }\n    /**\n     * Enables an experiment by name\n     * @param name name of the experiment to enable\n     */\n\n\n    enableExperiment(name) {\n      const experiment = this.getExperiment(name);\n      experiment.enabled = true;\n    }\n    /**\n     * Disables an experiment by name\n     * @param name name of the experiment to disable\n     */\n\n\n    disableExperiment(name) {\n      const experiment = this.getExperiment(name);\n      experiment.enabled = false;\n    }\n    /**\n     * Get the options for an experiment by name\n     * @param name name of experiment to get\n     */\n\n\n    getExperiment(name) {\n      if (!this.experiments.has(name)) {\n        this.addExperiment(name);\n        return this.getExperiment(name);\n      }\n\n      return this.experiments.get(name);\n    }\n    /**\n     * Get an array of tuples representing an experiment and it's options\n     */\n\n\n    getExperiments() {\n      return Array.from(this.experiments.entries());\n    }\n\n  }\n\n  ExperimentalService.ɵfac = function ExperimentalService_Factory(t) {\n    return new (t || ExperimentalService)();\n  };\n\n  ExperimentalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ExperimentalService,\n    factory: ExperimentalService.ɵfac\n  });\n  return ExperimentalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // either provides a new instance of ExperimentalService, or returns the parent\n\n\nfunction EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService) {\n  return parentService || new ExperimentalService();\n}\n\nconst EXPERIMENTAL_SERVICE_PROVIDER = {\n  provide: ExperimentalService,\n  deps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n  useFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\nlet ExperimentalModule = /*#__PURE__*/(() => {\n  class ExperimentalModule {}\n\n  ExperimentalModule.ɵfac = function ExperimentalModule_Factory(t) {\n    return new (t || ExperimentalModule)();\n  };\n\n  ExperimentalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ExperimentalModule\n  });\n  ExperimentalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ExperimentalService, EXPERIMENTAL_SERVICE_PROVIDER]\n  });\n  return ExperimentalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPERIMENTAL_SERVICE_PROVIDER_FACTORY, EXPERIMENTAL_SERVICE_PROVIDER, ExperimentalModule, ExperimentalService }; //# sourceMappingURL=carbon-components-angular-experimental.js.map","map":null,"metadata":{},"sourceType":"module"}