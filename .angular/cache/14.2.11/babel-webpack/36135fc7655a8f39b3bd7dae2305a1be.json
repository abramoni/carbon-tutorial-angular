{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-inline-loading.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, Output, EventEmitter, HostBinding, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from 'carbon-components-angular/icon';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'carbon-components-angular/icon';\n\nconst _c0 = function (a0) {\n  return {\n    \"bx--loading--stop\": a0\n  };\n};\n\nfunction InlineLoading_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"circle\", 8)(3, \"circle\", 9);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx_r4.state === ctx_r4.InlineLoadingState.Inactive));\n  }\n}\n\nfunction InlineLoading_div_0__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 10);\n  }\n}\n\nfunction InlineLoading_div_0__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 11);\n  }\n}\n\nfunction InlineLoading_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵtemplate(1, InlineLoading_div_0_div_1_Template, 4, 3, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(2, InlineLoading_div_0__svg_svg_2_Template, 1, 0, \"svg\", 4);\n    ɵngcc0.ɵɵtemplate(3, InlineLoading_div_0__svg_svg_3_Template, 1, 0, \"svg\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.state === ctx_r0.InlineLoadingState.Inactive || ctx_r0.state === ctx_r0.InlineLoadingState.Active);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.state === ctx_r0.InlineLoadingState.Finished);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.state === ctx_r0.InlineLoadingState.Error);\n  }\n}\n\nfunction InlineLoading_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.loadingText);\n  }\n}\n\nfunction InlineLoading_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.successText);\n  }\n}\n\nfunction InlineLoading_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.errorText);\n  }\n}\n\nvar InlineLoadingState = /*#__PURE__*/(() => {\n  (function (InlineLoadingState) {\n    /** It hides the whole component. */\n    InlineLoadingState[\"Hidden\"] = \"hidden\";\n    /** It shows the `loadingText` but no loading animation. */\n\n    InlineLoadingState[\"Inactive\"] = \"inactive\";\n    /** It shows the `loadingText` with loading animation. */\n\n    InlineLoadingState[\"Active\"] = \"active\";\n    /** It shows the `successText` with a success state. */\n\n    InlineLoadingState[\"Finished\"] = \"finished\";\n    /** It shows the `errorText` with an error state. */\n\n    InlineLoadingState[\"Error\"] = \"error\";\n  })(InlineLoadingState || (InlineLoadingState = {}));\n\n  return InlineLoadingState;\n})();\n\n/**\n * [See demo](../../?path=/story/components-inline-loading--basic)\n *\n * <example-url>../../iframe.html?id=components-inline-loading--basic</example-url>\n */\nlet InlineLoading = /*#__PURE__*/(() => {\n  class InlineLoading {\n    constructor() {\n      this.InlineLoadingState = InlineLoadingState;\n      /**\n       * Specify the text description for the loading state.\n       */\n\n      this.state = InlineLoadingState.Active;\n      /**\n       * Provide a delay for the `setTimeout` for success.\n       */\n\n      this.successDelay = 1500;\n      /**\n       * Emits event after the success state is active\n       */\n\n      this.onSuccess = new EventEmitter();\n      this.loadingClass = true;\n    }\n    /**\n     * set to `false` to stop the loading animation\n     */\n\n\n    get isActive() {\n      return this.state === InlineLoadingState.Active;\n    }\n\n    set isActive(active) {\n      this.state = active ? InlineLoadingState.Active : InlineLoadingState.Inactive;\n    }\n    /**\n     * Returns value `true` if the component is in the success state.\n     */\n\n\n    get success() {\n      return this.state === InlineLoadingState.Finished;\n    }\n    /**\n     * Set the component's state to match the parameter and emits onSuccess if it exits.\n     */\n\n\n    set success(success) {\n      this.state = success ? InlineLoadingState.Finished : InlineLoadingState.Error;\n\n      if (this.state === InlineLoadingState.Finished) {\n        setTimeout(() => {\n          this.onSuccess.emit();\n        }, this.successDelay);\n      }\n    }\n\n  }\n\n  InlineLoading.ɵfac = function InlineLoading_Factory(t) {\n    return new (t || InlineLoading)();\n  };\n\n  InlineLoading.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: InlineLoading,\n    selectors: [[\"ibm-inline-loading\"]],\n    hostVars: 2,\n    hostBindings: function InlineLoading_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"bx--inline-loading\", ctx.loadingClass);\n      }\n    },\n    inputs: {\n      state: \"state\",\n      successDelay: \"successDelay\",\n      isActive: \"isActive\",\n      success: \"success\",\n      loadingText: \"loadingText\",\n      successText: \"successText\",\n      errorText: \"errorText\"\n    },\n    outputs: {\n      onSuccess: \"onSuccess\"\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"bx--inline-loading__animation\", 4, \"ngIf\"], [\"class\", \"bx--inline-loading__text\", 4, \"ngIf\"], [1, \"bx--inline-loading__animation\"], [\"class\", \"bx--loading bx--loading--small\", 3, \"ngClass\", 4, \"ngIf\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"16\", \"class\", \"bx--inline-loading__checkmark-container\", 4, \"ngIf\"], [\"ibmIcon\", \"error--filled\", \"size\", \"16\", \"class\", \"bx--inline-loading--error\", 4, \"ngIf\"], [1, \"bx--loading\", \"bx--loading--small\", 3, \"ngClass\"], [\"viewBox\", \"0 0 100 100\", 1, \"bx--loading__svg\"], [\"cx\", \"50%\", \"cy\", \"50%\", \"r\", \"44\", 1, \"bx--loading__background\"], [\"cx\", \"50%\", \"cy\", \"50%\", \"r\", \"44\", 1, \"bx--loading__stroke\"], [\"ibmIcon\", \"checkmark--filled\", \"size\", \"16\", 1, \"bx--inline-loading__checkmark-container\"], [\"ibmIcon\", \"error--filled\", \"size\", \"16\", 1, \"bx--inline-loading--error\"], [1, \"bx--inline-loading__text\"]],\n    template: function InlineLoading_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, InlineLoading_div_0_Template, 4, 3, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, InlineLoading_p_1_Template, 2, 1, \"p\", 1);\n        ɵngcc0.ɵɵtemplate(2, InlineLoading_p_2_Template, 2, 1, \"p\", 1);\n        ɵngcc0.ɵɵtemplate(3, InlineLoading_p_3_Template, 2, 1, \"p\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== ctx.InlineLoadingState.Hidden);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state === ctx.InlineLoadingState.Inactive || ctx.state === ctx.InlineLoadingState.Active);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state === ctx.InlineLoadingState.Finished);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state === ctx.InlineLoadingState.Error);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.IconDirective],\n    encapsulation: 2\n  });\n  return InlineLoading;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet InlineLoadingModule = /*#__PURE__*/(() => {\n  class InlineLoadingModule {}\n\n  InlineLoadingModule.ɵfac = function InlineLoadingModule_Factory(t) {\n    return new (t || InlineLoadingModule)();\n  };\n\n  InlineLoadingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: InlineLoadingModule\n  });\n  InlineLoadingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, IconModule]\n  });\n  return InlineLoadingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InlineLoadingModule, {\n    declarations: function () {\n      return [InlineLoading];\n    },\n    imports: function () {\n      return [CommonModule, IconModule];\n    },\n    exports: function () {\n      return [InlineLoading];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { InlineLoading, InlineLoadingState, InlineLoadingModule }; //# sourceMappingURL=carbon-components-angular-inline-loading.js.map","map":null,"metadata":{},"sourceType":"module"}