{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-combobox.js\n *\n * Copyright 2014, 2023 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filter } from 'rxjs/operators';\nimport { Component, ContentChild, Input, Output, HostListener, ElementRef, ViewChild, EventEmitter, HostBinding, TemplateRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbstractDropdownView, DropdownService, DropdownModule } from 'carbon-components-angular/dropdown';\nimport { I18n, I18nModule } from 'carbon-components-angular/i18n';\nimport { DocumentService, getScrollableParents, hasScrollableParents, UtilsModule } from 'carbon-components-angular/utils';\nimport { IconModule } from 'carbon-components-angular/icon';\n/**\n * ComboBoxes are similar to dropdowns, except a combobox provides an input field for users to search items and (optionally) add their own.\n * Multi-select comboboxes also provide \"pills\" of selected items.\n *\n * [See demo](../../?path=/story/components-combobox--basic)\n *\n * <example-url>../../iframe.html?id=components-combobox--basic</example-url>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'carbon-components-angular/utils';\nimport * as ɵngcc2 from 'carbon-components-angular/dropdown';\nimport * as ɵngcc3 from 'carbon-components-angular/i18n';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from 'carbon-components-angular/icon';\nconst _c0 = [\"dropdownMenu\"];\nconst _c1 = [\"input\"];\nconst _c2 = [\"listbox\"];\n\nfunction ComboBox_label_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.label);\n  }\n}\n\nfunction ComboBox_label_1_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ComboBox_label_1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ComboBox_label_1_2_ng_template_0_Template, 0, 0, \"ng-template\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r13.label);\n  }\n}\n\nconst _c3 = function (a0) {\n  return {\n    \"bx--label--disabled\": a0\n  };\n};\n\nfunction ComboBox_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"label\", 18);\n    ɵngcc0.ɵɵtemplate(1, ComboBox_label_1_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n    ɵngcc0.ɵɵtemplate(2, ComboBox_label_1_2_Template, 1, 1, null, 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"for\", ctx_r0.id)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r0.disabled));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isTemplate(ctx_r0.label));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.isTemplate(ctx_r0.label));\n  }\n}\n\nconst _c4 = function (a0) {\n  return {\n    \"bx--tag--disabled\": a0\n  };\n};\n\nfunction ComboBox_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20)(1, \"span\", 21);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"button\", 22);\n    ɵngcc0.ɵɵlistener(\"click\", function ComboBox_div_5_Template_button_click_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r15.clearSelected($event));\n    })(\"blur\", function ComboBox_div_5_Template_button_blur_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r17.onBlur());\n    })(\"keydown.enter\", function ComboBox_div_5_Template_button_keydown_enter_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r18.clearSelected($event));\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(4, \"svg\", 23);\n    ɵngcc0.ɵɵelement(5, \"path\", 24);\n    ɵngcc0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c4, ctx_r2.disabled));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.pills.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r2.clearSelectionsTitle)(\"disabled\", ctx_r2.disabled);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.clearSelectionAria);\n  }\n}\n\nfunction ComboBox__svg_svg_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 25);\n  }\n}\n\nfunction ComboBox__svg_svg_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"svg\", 26);\n  }\n}\n\nfunction ComboBox_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 27);\n    ɵngcc0.ɵɵlistener(\"keyup.enter\", function ComboBox_div_10_Template_div_keyup_enter_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r19.clearInput($event));\n    })(\"click\", function ComboBox_div_10_Template_div_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r21.clearInput($event));\n    })(\"blur\", function ComboBox_div_10_Template_div_blur_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r22.onBlur());\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(1, \"svg\", 28);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r6.clearSelectionTitle);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r6.clearSelectionAria);\n  }\n}\n\nfunction ComboBox_ng_content_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"open\"]);\n  }\n}\n\nfunction ComboBox_div_16_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r23.helperText);\n  }\n}\n\nfunction ComboBox_div_16_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ComboBox_div_16_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ComboBox_div_16_2_ng_template_0_Template, 0, 0, \"ng-template\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r24.helperText);\n  }\n}\n\nconst _c5 = function (a0) {\n  return {\n    \"bx--form__helper-text--disabled\": a0\n  };\n};\n\nfunction ComboBox_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 29);\n    ɵngcc0.ɵɵtemplate(1, ComboBox_div_16_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n    ɵngcc0.ɵɵtemplate(2, ComboBox_div_16_2_Template, 1, 1, null, 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c5, ctx_r9.disabled));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r9.isTemplate(ctx_r9.helperText));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.isTemplate(ctx_r9.helperText));\n  }\n}\n\nfunction ComboBox_div_17_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r26 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r26.invalidText);\n  }\n}\n\nfunction ComboBox_div_17_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ComboBox_div_17_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ComboBox_div_17_2_ng_template_0_Template, 0, 0, \"ng-template\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r27.invalidText);\n  }\n}\n\nfunction ComboBox_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 30);\n    ɵngcc0.ɵɵtemplate(1, ComboBox_div_17_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n    ɵngcc0.ɵɵtemplate(2, ComboBox_div_17_2_Template, 1, 1, null, 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r10.isTemplate(ctx_r10.invalidText));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r10.isTemplate(ctx_r10.invalidText));\n  }\n}\n\nfunction ComboBox_div_18_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r29.warnText);\n  }\n}\n\nfunction ComboBox_div_18_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ComboBox_div_18_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ComboBox_div_18_2_ng_template_0_Template, 0, 0, \"ng-template\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r30 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r30.warnText);\n  }\n}\n\nfunction ComboBox_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 30);\n    ɵngcc0.ɵɵtemplate(1, ComboBox_div_18_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n    ɵngcc0.ɵɵtemplate(2, ComboBox_div_18_2_Template, 1, 1, null, 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r11.isTemplate(ctx_r11.warnText));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r11.isTemplate(ctx_r11.warnText));\n  }\n}\n\nconst _c6 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"bx--multi-select bx--multi-select--filterable\": a0,\n    \"bx--list-box--light\": a1,\n    \"bx--list-box--expanded\": a2,\n    \"bx--list-box--sm\": a3,\n    \"bx--list-box--lg\": a4,\n    \"bx--list-box--disabled\": a5,\n    \"bx--combo-box--warning bx--list-box--warning\": a6\n  };\n};\n\nconst _c7 = function (a0) {\n  return {\n    \"bx--text-input--empty\": a0\n  };\n};\n\nconst _c8 = function (a0) {\n  return {\n    \"bx--list-box__menu-icon--open\": a0\n  };\n};\n\nconst _c9 = function (a0) {\n  return {\n    \"bx--list-box--up\": a0\n  };\n};\n\nconst _c10 = [\"*\"];\nlet ComboBox = /*#__PURE__*/(() => {\n  class ComboBox {\n    /**\n     * Creates an instance of ComboBox.\n     */\n    constructor(elementRef, documentService, dropdownService, i18n) {\n      this.elementRef = elementRef;\n      this.documentService = documentService;\n      this.dropdownService = dropdownService;\n      this.i18n = i18n;\n      this.id = `dropdown-${ComboBox.comboBoxCount++}`;\n      /**\n       * List of items to fill the content with.\n       *\n       * **Example:**\n       * ```javascript\n       * items = [\n       *\t\t{\n       *\t\t\tcontent: \"Abacus\",\n       *\t\t\tselected: false\n       *\t\t},\n       *\t\t{\n       *\t\t\tcontent: \"Byte\",\n       *\t\t\tselected: false,\n       *\t\t},\n       *\t\t{\n       *\t\t\tcontent: \"Computer\",\n       *\t\t\tselected: false\n       *\t\t},\n       *\t\t{\n       *\t\t\tcontent: \"Digital\",\n       *\t\t\tselected: false\n       *\t\t}\n       * ];\n       * ```\n       *\n       */\n\n      this.items = [];\n      /**\n       * Combo box type (supporting single or multi selection of items).\n       */\n\n      this.type = \"single\";\n      /**\n       * Combo box render size.\n       *\n       * @deprecated since v4\n       */\n\n      this.size = \"md\";\n      /**\n       * set to `true` to place the dropdown view inline with the component\n       */\n\n      this.appendInline = null;\n      /**\n       * Set to `true` to show the invalid state.\n       */\n\n      this.invalid = false;\n      /**\n      * Set to `true` to show a warning (contents set by warnText)\n      */\n\n      this.warn = false;\n      /**\n       * Max length value to limit input characters\n       */\n\n      this.maxLength = null;\n      /**\n       * `light` or `dark` dropdown theme\n       */\n\n      this.theme = \"dark\";\n      /**\n       * Specify feedback (mode) of the selection.\n       * `top`: selected item jumps to top\n       * `fixed`: selected item stays at its position\n       * `top-after-reopen`: selected item jump to top after reopen dropdown\n       */\n\n      this.selectionFeedback = \"top-after-reopen\";\n      /**\n       * Specify aria-autocomplete attribute of text input.\n       * \"list\", is the expected value for a combobox that invokes a drop-down list\n       */\n\n      this.autocomplete = \"list\";\n      /**\n       * Set to `true` to disable combobox.\n       */\n\n      this.disabled = false;\n      /**\n       * Emits a ListItem\n       *\n       * Example:\n       * ```javascript\n       * {\n       * \t\tcontent: \"one\",\n       * \t\tselected: true\n       * }\n       * ```\n       */\n\n      this.selected = new EventEmitter();\n      /**\n       * Intended to be used to add items to the list.\n       *\n       * Emits an event that includes the current item list, the suggested index for the new item, and a simple ListItem\n       *\n       * Example:\n       * ```javascript\n       *\t{\n       *\t\titems: [{content: \"one\", selected: true}, {content: \"two\", selected: true}],\n       *\t\tindex: 1,\n       *\t\tvalue: {\n       *\t\t\tcontent: \"some user string\",\n       *\t\t\tselected: false\n       *\t\t}\n       *\t}\n       * ```\n       *\n       *\n       * Example:\n       * ```javascript\n       * {\n       *\tafter: 1,\n       *\tvalue: \"some user string\"\n       * }\n       * ```\n       */\n\n      this.submit = new EventEmitter();\n      /** Emits an empty event when the menu is closed */\n\n      this.close = new EventEmitter();\n      /** Emits the search string from the input */\n\n      this.search = new EventEmitter();\n      /** Emits an event when the clear button is clicked. */\n\n      this.clear = new EventEmitter();\n      this.hostClass = true; // @HostBinding(\"attr.role\") role = \"combobox\";\n\n      this.display = \"block\";\n      this.open = false;\n      this.showClearButton = false;\n      /** Selected items for multi-select combo-boxes. */\n\n      this.pills = [];\n      /** used to update the displayValue */\n\n      this.selectedValue = \"\";\n      this.keyboardNav = this._keyboardNav.bind(this);\n      /**\n       * controls whether the `drop-up` class is applied\n       */\n\n      this._dropUp = false;\n      this.noop = this._noop.bind(this);\n      this.onTouchedCallback = this._noop;\n      this.propagateChangeCallback = this._noop;\n      this._placeholder = this.i18n.getOverridable(\"COMBOBOX.PLACEHOLDER\");\n      this._closeMenuAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLOSE_MENU\");\n      this._openMenuAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.OPEN_MENU\");\n      this._clearSelectionsTitle = this.i18n.getOverridable(\"COMBOBOX.CLEAR_SELECTIONS\");\n      this._clearSelectionsAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLEAR_SELECTIONS\");\n      this._clearSelectionTitle = this.i18n.getOverridable(\"COMBOBOX.CLEAR_SELECTED\");\n      this._clearSelectionAria = this.i18n.getOverridable(\"COMBOBOX.A11Y.CLEAR_SELECTED\");\n    }\n    /**\n     * Text to show when nothing is selected.\n     */\n\n\n    set placeholder(value) {\n      this._placeholder.override(value);\n    }\n\n    get placeholder() {\n      return this._placeholder.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when closed\n     */\n\n\n    set openMenuAria(value) {\n      this._openMenuAria.override(value);\n    }\n\n    get openMenuAria() {\n      return this._openMenuAria.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the combobox control menu when opened\n     */\n\n\n    set closeMenuAria(value) {\n      this._closeMenuAria.override(value);\n    }\n\n    get closeMenuAria() {\n      return this._closeMenuAria.value;\n    }\n    /**\n     * Value to display on the clear selections icon, when multi is selected\n     */\n\n\n    set clearSelectionsTitle(value) {\n      this._clearSelectionsTitle.override(value);\n    }\n\n    get clearSelectionsTitle() {\n      return this._clearSelectionsTitle.value;\n    }\n    /**\n     * Value to display for accessibility purposes to clear selections, when multi is selected\n     */\n\n\n    set clearSelectionsAria(value) {\n      this._clearSelectionsAria.override(value);\n    }\n\n    get clearSelectionsAria() {\n      return this._clearSelectionsAria.value;\n    }\n    /**\n     * Value to display on the clear the selected item icon, when single is selected\n     */\n\n\n    set clearSelectionTitle(value) {\n      this._clearSelectionTitle.override(value);\n    }\n\n    get clearSelectionTitle() {\n      return this._clearSelectionTitle.value;\n    }\n    /**\n     * Value to display for accessibility purposes on the clear the selected item icon, when single is selected\n     */\n\n\n    set clearSelectionAria(value) {\n      this._clearSelectionAria.override(value);\n    }\n\n    get clearSelectionAria() {\n      return this._clearSelectionAria.value;\n    }\n    /**\n     * Lifecycle hook.\n     * Updates pills if necessary.\n     *\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes.items) {\n        this.view.items = changes.items.currentValue;\n        this.updateSelected(); // If new items are added into the combobox while there is search input,\n        // repeat the search. Search should only trigger for type 'single' when there is no value selected.\n\n        if (this.type === \"multi\" || this.type === \"single\" && !this.selectedValue) {\n          this.onSearch(this.input.nativeElement.value, false);\n        }\n      }\n    }\n    /**\n     * Sets initial state that depends on child components\n     * Subscribes to select events and handles focus/filtering/initial list updates\n     */\n\n\n    ngAfterContentInit() {\n      if (this.view) {\n        this.view.type = this.type; // function to check if the event is organic (isUpdate === false) or programmatic\n\n        const isUpdate = event => event && event.isUpdate;\n\n        this.view.select.subscribe(event => {\n          if (this.type === \"multi\") {\n            this.updatePills();\n\n            if (!isUpdate(event)) {\n              if (this.itemValueKey && this.view.getSelected()) {\n                const values = this.view.getSelected().map(item => item[this.itemValueKey]);\n                this.propagateChangeCallback(values); // otherwise just pass up the values from `getSelected`\n              } else {\n                this.propagateChangeCallback(this.view.getSelected());\n              }\n            }\n          } else {\n            if (event.item && event.item.selected) {\n              this.showClearButton = true;\n              this.selectedValue = event.item.content;\n\n              if (!isUpdate(event)) {\n                if (this.itemValueKey) {\n                  this.propagateChangeCallback(event.item[this.itemValueKey]);\n                } else {\n                  this.propagateChangeCallback(event.item);\n                }\n              }\n            } else {\n              this.selectedValue = \"\";\n\n              if (!isUpdate(event)) {\n                this.propagateChangeCallback(null);\n              }\n            } // not guarding these since the nativeElement has to be loaded\n            // for select to even fire\n            // only focus for \"organic\" selections\n\n\n            if (!isUpdate(event)) {\n              this.elementRef.nativeElement.querySelector(\"input\").focus();\n              this.view.filterBy(\"\");\n            }\n\n            this.closeDropdown();\n          }\n\n          if (!isUpdate(event)) {\n            this.selected.emit(event);\n          }\n        }); // update the rest of combobox with any pre-selected items\n        // setTimeout just defers the call to the next check cycle\n\n        setTimeout(() => {\n          this.updateSelected();\n        });\n        this.view.blurIntent.pipe(filter(v => v === \"top\")).subscribe(() => {\n          this.elementRef.nativeElement.querySelector(\".bx--text-input\").focus();\n        });\n      }\n    }\n    /**\n     * Binds event handlers against the rendered view\n     */\n\n\n    ngAfterViewInit() {\n      this.documentService.handleClick(event => {\n        if (!this.elementRef.nativeElement.contains(event.target) && !this.dropdownMenu.nativeElement.contains(event.target)) {\n          if (this.open) {\n            this.closeDropdown();\n          }\n        }\n      }); // if appendInline is default valued (null) we should:\n      // 1. if there are scrollable parents (not including body) don't append inline\n      //    this should also cover the case where the dropdown is in a modal\n      //    (where we _do_ want to append to the placeholder)\n\n      if (this.appendInline === null && hasScrollableParents(this.elementRef.nativeElement)) {\n        this.appendInline = false; // 2. otherwise we should append inline\n      } else if (this.appendInline === null) {\n        this.appendInline = true;\n      }\n    }\n    /**\n     * Removing the `Dropdown` from the body if it is appended to the body.\n     */\n\n\n    ngOnDestroy() {\n      if (!this.appendInline) {\n        this._appendToDropdown();\n      }\n    }\n    /**\n     * Handles `Escape/Tab` key closing the dropdown, and arrow up/down focus to/from the dropdown list.\n     */\n\n\n    hostkeys(ev) {\n      if (ev.key === \"Escape\") {\n        this.closeDropdown();\n      } else if ((ev.key === \"ArrowDown\" || ev.key === \"Down\" // `\"Down\"` is IE specific value\n      ) && (!this.dropdownMenu || !this.dropdownMenu.nativeElement.contains(ev.target))) {\n        ev.stopPropagation();\n        this.openDropdown();\n        setTimeout(() => {\n          this.view.initFocus();\n        }, 0);\n      }\n\n      if (this.open && ev.key === \"Tab\" && (this.dropdownMenu.nativeElement.contains(ev.target) || ev.target === this.input.nativeElement)) {\n        this.closeDropdown();\n      }\n\n      if (this.open && ev.key === \"Tab\" && ev.shiftKey) {\n        this.closeDropdown();\n      }\n    }\n    /*\n     * no-op method for null event listeners, and other no op calls\n     */\n\n\n    _noop() {}\n    /*\n     * propagates the value provided from ngModel\n     */\n\n\n    writeValue(value) {\n      if (this.type === \"single\") {\n        if (this.itemValueKey) {\n          // clone the specified item and update its state\n          const newValue = Object.assign({}, this.view.getListItems().find(item => item[this.itemValueKey] === value));\n          newValue.selected = true;\n          this.view.propagateSelected([newValue]);\n        } else {\n          // all items in propagateSelected must be iterable\n          this.view.propagateSelected([value || \"\"]);\n        }\n\n        this.showClearButton = !!(value && this.view.getSelected().length);\n      } else {\n        if (this.itemValueKey) {\n          // clone the items and update their state based on the received value array\n          // this way we don't lose any additional metadata that may be passed in via the `items` Input\n          let newValues = [];\n\n          for (const v of value) {\n            for (const item of this.view.getListItems()) {\n              if (item[this.itemValueKey] === v) {\n                newValues.push(Object.assign({}, item, {\n                  selected: true\n                }));\n              }\n            }\n          }\n\n          this.view.propagateSelected(newValues);\n        } else {\n          this.view.propagateSelected(value ? value : [\"\"]);\n        }\n      }\n\n      this.updateSelected();\n    }\n\n    onBlur() {\n      this.onTouchedCallback();\n    }\n\n    registerOnChange(fn) {\n      this.propagateChangeCallback = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the combobox.\n     *\n     * ex: `this.formGroup.get(\"myCoolCombobox\").disable();`\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Called by `n-pill-input` when the selected pills have changed.\n     */\n\n\n    updatePills() {\n      this.pills = this.view.getSelected() || [];\n      this.checkForReorder();\n    }\n\n    clearSelected(event) {\n      this.items = this.items.map(item => {\n        if (!item.disabled) {\n          item.selected = false;\n        }\n\n        return item;\n      });\n      this.view.items = this.items;\n      this.updatePills(); // clearSelected can only fire on type=multi\n      // so we just emit getSelected() (just in case there's any disabled but selected items)\n\n      const selected = this.view.getSelected();\n      this.propagateChangeCallback(selected);\n      this.selected.emit(selected);\n      this.clear.emit(event);\n    }\n    /**\n     * Closes the dropdown and emits the close event.\n     */\n\n\n    closeDropdown() {\n      this.open = false;\n      this.checkForReorder();\n      this.close.emit();\n\n      if (!this.appendInline) {\n        this._appendToDropdown();\n      }\n    }\n    /**\n     * Opens the dropdown.\n     */\n\n\n    openDropdown() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.open = true;\n      this._dropUp = false;\n\n      if (!this.appendInline) {\n        this._appendToBody();\n      } // set the dropdown menu to drop up if it is near the bottom of the screen\n      // setTimeout lets us do the calculations after it is visible in the DOM\n\n\n      setTimeout(() => {\n        if (this.dropUp === null || this.dropUp === undefined) {\n          this._dropUp = this._shouldDropUp();\n        }\n      }, 0);\n    }\n    /**\n     * Toggles the dropdown.\n     */\n\n\n    toggleDropdown() {\n      if (this.open) {\n        this.closeDropdown();\n      } else {\n        this.openDropdown();\n      }\n    }\n    /**\n     * Sets the list group filter, and manages single select item selection.\n     */\n\n\n    onSearch(searchString, shouldEmitSearch = true) {\n      if (shouldEmitSearch) {\n        this.search.emit(searchString);\n      }\n\n      this.showClearButton = !!searchString;\n      this.view.filterBy(searchString);\n\n      if (searchString !== \"\") {\n        if (!this.open) {\n          this.openDropdown();\n        }\n      } else {\n        this.selectedValue = \"\";\n\n        if (this.type === \"multi\" && (this.selectionFeedback === \"top\" || this.selectionFeedback === \"top-after-reopen\")) {\n          this.view.reorderSelected();\n        }\n      }\n\n      if (this.type === \"single\") {\n        // deselect if the input doesn't match the content\n        // of any given item\n        const matches = this.view.getListItems().some(item => item.content.toLowerCase().includes(searchString.toLowerCase()));\n\n        if (!matches) {\n          const selected = this.view.getSelected();\n\n          if (!selected || !selected[0]) {\n            this.view.filterBy(searchString);\n          }\n        }\n      }\n    }\n    /**\n     * Intended to be used to add items to the list.\n     */\n\n\n    onSubmit(event) {\n      this.submit.emit({\n        items: this.view.getListItems(),\n        index: 0,\n        value: {\n          content: event.target.value,\n          selected: false\n        }\n      });\n    }\n\n    clearInput(event) {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (this.type === \"single\") {\n        // don't want to clear selected or close if multi\n        this.clearSelected(event);\n        this.closeDropdown();\n      }\n\n      this.selectedValue = \"\";\n      this.input.nativeElement.value = \"\";\n      this.showClearButton = false;\n      this.input.nativeElement.focus();\n      this.onSearch(this.input.nativeElement.value);\n    }\n\n    isTemplate(value) {\n      return value instanceof TemplateRef;\n    }\n    /**\n     * Handles keyboard events so users are controlling the `Dropdown` instead of unintentionally controlling outside elements.\n     */\n\n\n    _keyboardNav(event) {\n      // \"Esc\" is an IE specific value\n      if ((event.key === \"Escape\" || event.key === \"Esc\") && this.open) {\n        event.stopImmediatePropagation(); // don't unintentionally close modal if inside of it\n      }\n\n      if (event.key === \"Escape\" || event.key === \"Esc\") {\n        event.preventDefault();\n        this.closeDropdown();\n        this.input.nativeElement.focus();\n      } else if (this.open && event.key === \"Tab\") {\n        // this way focus will start on the next focusable item from the dropdown\n        // not the top of the body!\n        this.input.nativeElement.focus();\n        this.input.nativeElement.dispatchEvent(new KeyboardEvent(\"keydown\", {\n          bubbles: true,\n          cancelable: true,\n          key: \"Tab\"\n        }));\n        this.closeDropdown();\n      }\n    }\n    /**\n     * Creates the `Dropdown` list as an element that is appended to the DOM body.\n     */\n\n\n    _appendToBody() {\n      this.dropdownService.appendToBody(this.listbox.nativeElement, this.dropdownMenu.nativeElement, `${this.elementRef.nativeElement.className}${this.open ? \" bx--list-box--expanded\" : \"\"}`);\n      this.dropdownMenu.nativeElement.addEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Creates the `Dropdown` list appending it to the dropdown parent object instead of the body.\n     */\n\n\n    _appendToDropdown() {\n      this.dropdownService.appendToDropdown(this.elementRef.nativeElement);\n      this.dropdownMenu.nativeElement.removeEventListener(\"keydown\", this.keyboardNav, true);\n    }\n    /**\n     * Detects whether or not the `Dropdown` list is visible within all scrollable parents.\n     * This can be overridden by passing in a value to the `dropUp` input.\n     */\n\n\n    _shouldDropUp() {\n      // check if dropdownMenu exists first.\n      const menu = this.dropdownMenu && this.dropdownMenu.nativeElement.querySelector(\".bx--list-box__menu\"); // check if menu exists first.\n\n      const menuRect = menu && menu.getBoundingClientRect();\n\n      if (menu && menuRect) {\n        const scrollableParents = getScrollableParents(menu);\n        return scrollableParents.reduce((shouldDropUp, parent) => {\n          const parentRect = parent.getBoundingClientRect();\n          const isBelowParent = !(menuRect.bottom <= parentRect.bottom);\n          return shouldDropUp || isBelowParent;\n        }, false);\n      }\n\n      return false;\n    }\n\n    updateSelected() {\n      const selected = this.view.getSelected();\n\n      if (this.type === \"multi\") {\n        this.updatePills();\n      } else if (selected) {\n        const value = selected[0] ? selected[0].content : \"\";\n        const changeCallbackValue = selected[0] ? selected[0] : \"\";\n        this.selectedValue = value;\n        this.showClearButton = !!value;\n      }\n    }\n\n    checkForReorder() {\n      const topAfterReopen = !this.open && this.selectionFeedback === \"top-after-reopen\";\n\n      if (this.type === \"multi\" && (topAfterReopen || this.selectionFeedback === \"top\")) {\n        this.view.reorderSelected(true);\n      }\n    }\n\n  }\n\n  ComboBox.ɵfac = function ComboBox_Factory(t) {\n    return new (t || ComboBox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DocumentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DropdownService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.I18n));\n  };\n\n  ComboBox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ComboBox,\n    selectors: [[\"ibm-combo-box\"]],\n    contentQueries: function ComboBox_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AbstractDropdownView, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.view = _t.first);\n      }\n    },\n    viewQuery: function ComboBox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n        ɵngcc0.ɵɵviewQuery(_c2, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdownMenu = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listbox = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ComboBox_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ComboBox_keydown_HostBindingHandler($event) {\n          return ctx.hostkeys($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"display\", ctx.display);\n        ɵngcc0.ɵɵclassProp(\"bx--list-box__wrapper\", ctx.hostClass);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      items: \"items\",\n      type: \"type\",\n      size: \"size\",\n      appendInline: \"appendInline\",\n      invalid: \"invalid\",\n      warn: \"warn\",\n      maxLength: \"maxLength\",\n      theme: \"theme\",\n      selectionFeedback: \"selectionFeedback\",\n      autocomplete: \"autocomplete\",\n      disabled: \"disabled\",\n      placeholder: \"placeholder\",\n      openMenuAria: \"openMenuAria\",\n      closeMenuAria: \"closeMenuAria\",\n      clearSelectionsTitle: \"clearSelectionsTitle\",\n      clearSelectionsAria: \"clearSelectionsAria\",\n      clearSelectionTitle: \"clearSelectionTitle\",\n      clearSelectionAria: \"clearSelectionAria\",\n      itemValueKey: \"itemValueKey\",\n      label: \"label\",\n      helperText: \"helperText\",\n      invalidText: \"invalidText\",\n      warnText: \"warnText\",\n      dropUp: \"dropUp\"\n    },\n    outputs: {\n      selected: \"selected\",\n      submit: \"submit\",\n      close: \"close\",\n      search: \"search\",\n      clear: \"clear\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: ComboBox,\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c10,\n    decls: 19,\n    vars: 39,\n    consts: [[1, \"bx--list-box__wrapper\"], [\"class\", \"bx--label\", 3, \"for\", \"ngClass\", 4, \"ngIf\"], [1, \"bx--list-box\", \"bx--combo-box\", 3, \"ngClass\"], [\"listbox\", \"\"], [1, \"bx--list-box__field\", 3, \"click\", \"blur\"], [\"class\", \"bx--tag bx--tag--filter bx--tag--high-contrast\", 3, \"ngClass\", 4, \"ngIf\"], [\"type\", \"text\", \"autocomplete\", \"off\", \"role\", \"combobox\", \"tabindex\", \"0\", \"aria-haspopup\", \"listbox\", 1, \"bx--text-input\", 3, \"disabled\", \"value\", \"ngClass\", \"id\", \"placeholder\", \"input\", \"blur\", \"keydown.enter\"], [\"input\", \"\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"16\", \"class\", \"bx--list-box__invalid-icon\", 4, \"ngIf\"], [\"ibmIcon\", \"warning--alt--filled\", \"size\", \"16\", \"class\", \"bx--list-box__invalid-icon bx--list-box__invalid-icon--warning\", 4, \"ngIf\"], [\"role\", \"button\", \"class\", \"bx--list-box__selection\", \"tabindex\", \"0\", 3, \"title\", \"keyup.enter\", \"click\", \"blur\", 4, \"ngIf\"], [\"type\", \"button\", \"role\", \"button\", \"tabindex\", \"-1\", 1, \"bx--list-box__menu-icon\", 3, \"title\", \"ngClass\"], [\"ibmIcon\", \"chevron--down\", \"size\", \"16\"], [3, \"ngClass\"], [\"dropdownMenu\", \"\"], [4, \"ngIf\"], [\"class\", \"bx--form__helper-text\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"bx--form-requirement\", 4, \"ngIf\"], [1, \"bx--label\", 3, \"for\", \"ngClass\"], [3, \"ngTemplateOutlet\"], [1, \"bx--tag\", \"bx--tag--filter\", \"bx--tag--high-contrast\", 3, \"ngClass\"], [1, \"bx--tag__label\"], [\"type\", \"button\", \"tabindex\", \"0\", 1, \"bx--tag__close-icon\", 3, \"title\", \"disabled\", \"click\", \"blur\", \"keydown.enter\"], [\"focusable\", \"false\", \"preserveAspectRatio\", \"xMidYMid meet\", \"role\", \"img\", \"xmlns\", \"http://www.w3.org/2000/svg\", \"width\", \"16\", \"height\", \"16\", \"viewBox\", \"0 0 16 16\", \"aria-hidden\", \"true\", 2, \"will-change\", \"transform\"], [\"d\", \"M12 4.7l-.7-.7L8 7.3 4.7 4l-.7.7L7.3 8 4 11.3l.7.7L8 8.7l3.3 3.3.7-.7L8.7 8z\"], [\"ibmIcon\", \"warning--filled\", \"size\", \"16\", 1, \"bx--list-box__invalid-icon\"], [\"ibmIcon\", \"warning--alt--filled\", \"size\", \"16\", 1, \"bx--list-box__invalid-icon\", \"bx--list-box__invalid-icon--warning\"], [\"role\", \"button\", \"tabindex\", \"0\", 1, \"bx--list-box__selection\", 3, \"title\", \"keyup.enter\", \"click\", \"blur\"], [\"ibmIcon\", \"close\", \"size\", \"16\"], [1, \"bx--form__helper-text\", 3, \"ngClass\"], [1, \"bx--form-requirement\"]],\n    template: function ComboBox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ComboBox_label_1_Template, 3, 6, \"label\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3)(4, \"div\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function ComboBox_Template_div_click_4_listener() {\n          return ctx.toggleDropdown();\n        })(\"blur\", function ComboBox_Template_div_blur_4_listener() {\n          return ctx.onBlur();\n        });\n        ɵngcc0.ɵɵtemplate(5, ComboBox_div_5_Template, 6, 7, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"input\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"input\", function ComboBox_Template_input_input_6_listener($event) {\n          return ctx.onSearch($event.target.value);\n        })(\"blur\", function ComboBox_Template_input_blur_6_listener() {\n          return ctx.onBlur();\n        })(\"keydown.enter\", function ComboBox_Template_input_keydown_enter_6_listener($event) {\n          return ctx.onSubmit($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, ComboBox__svg_svg_8_Template, 1, 0, \"svg\", 8);\n        ɵngcc0.ɵɵtemplate(9, ComboBox__svg_svg_9_Template, 1, 0, \"svg\", 9);\n        ɵngcc0.ɵɵtemplate(10, ComboBox_div_10_Template, 2, 2, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"button\", 11);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelement(12, \"svg\", 12);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(13, \"div\", 13, 14);\n        ɵngcc0.ɵɵtemplate(15, ComboBox_ng_content_15_Template, 1, 0, \"ng-content\", 15);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(16, ComboBox_div_16_Template, 3, 5, \"div\", 16);\n        ɵngcc0.ɵɵtemplate(17, ComboBox_div_17_Template, 3, 2, \"div\", 17);\n        ɵngcc0.ɵɵtemplate(18, ComboBox_div_18_Template, 3, 2, \"div\", 17);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(25, _c6, ctx.type === \"multi\", ctx.theme === \"light\", ctx.open, ctx.size === \"sm\", ctx.size === \"xl\", ctx.disabled, ctx.warn));\n        ɵngcc0.ɵɵattribute(\"data-invalid\", ctx.invalid ? true : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.type === \"multi\" && ctx.pills.length > 0);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"value\", ctx.selectedValue)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(33, _c7, !ctx.showClearButton))(\"id\", ctx.id)(\"placeholder\", ctx.placeholder);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx.id)(\"aria-expanded\", ctx.open)(\"maxlength\", ctx.maxLength)(\"aria-controls\", ctx.open ? ctx.view == null ? null : ctx.view.listId : null)(\"aria-autocomplete\", ctx.autocomplete);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.warn && ctx.invalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.invalid && ctx.warn);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showClearButton);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"title\", ctx.open ? ctx.closeMenuAria : ctx.openMenuAria)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(35, _c8, ctx.open));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.open ? ctx.closeMenuAria : ctx.openMenuAria);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(37, _c9, ctx.dropUp !== null && ctx.dropUp !== undefined ? ctx.dropUp : ctx._dropUp));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.helperText && !ctx.invalid && !ctx.warn);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.warn && ctx.invalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.invalid && ctx.warn);\n      }\n    },\n    dependencies: [ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ɵngcc5.IconDirective],\n    encapsulation: 2\n  });\n  ComboBox.comboBoxCount = 0;\n  /** @nocollapse */\n\n  return ComboBox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ComboBoxModule = /*#__PURE__*/(() => {\n  class ComboBoxModule {}\n\n  ComboBoxModule.ɵfac = function ComboBoxModule_Factory(t) {\n    return new (t || ComboBoxModule)();\n  };\n\n  ComboBoxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ComboBoxModule\n  });\n  ComboBoxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [DropdownService],\n    imports: [CommonModule, DropdownModule, I18nModule, UtilsModule, IconModule, DropdownModule]\n  });\n  return ComboBoxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ComboBoxModule, {\n    declarations: function () {\n      return [ComboBox];\n    },\n    imports: function () {\n      return [CommonModule, DropdownModule, I18nModule, UtilsModule, IconModule];\n    },\n    exports: function () {\n      return [ComboBox, DropdownModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ComboBox, ComboBoxModule }; //# sourceMappingURL=carbon-components-angular-combobox.js.map","map":null,"metadata":{},"sourceType":"module"}